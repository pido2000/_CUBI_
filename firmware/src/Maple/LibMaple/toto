# 1 "wirish/usb_serial.cpp"
# 1 "/home/polo/Documents/Cubi/RemiFabre-cubi-a12594e773f0/firmware/src/Maple/LibMaple//"
# 1 "<built-in>"
#define __STDC__ 1
#define __cplusplus 201402L
#define __STDC_UTF_16__ 1
#define __STDC_UTF_32__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 9
#define __GNUC_MINOR__ 2
#define __GNUC_PATCHLEVEL__ 1
#define __VERSION__ "9.2.1 20191025 (release) [ARM/arm-9-branch revision 277599]"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __OPTIMIZE_SIZE__ 1
#define __OPTIMIZE__ 1
#define __FINITE_MATH_ONLY__ 0
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 8
#define __SIZEOF_SIZE_T__ 4
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 8
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 4
#define __GNUG__ 9
#define __SIZE_TYPE__ unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ unsigned int
#define __WINT_TYPE__ unsigned int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ long unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ long int
#define __INT64_TYPE__ long long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ long unsigned int
#define __UINT64_TYPE__ long long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ long int
#define __INT_LEAST64_TYPE__ long long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ long unsigned int
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __INT_FAST8_TYPE__ int
#define __INT_FAST16_TYPE__ int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long long int
#define __UINT_FAST8_TYPE__ unsigned int
#define __UINT_FAST16_TYPE__ unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __INTPTR_TYPE__ int
#define __UINTPTR_TYPE__ unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_WEAK__ 1
#define __DEPRECATED 1
#define __GXX_EXPERIMENTAL_CXX0X__ 1
#define __cpp_binary_literals 201304
#define __cpp_hex_float 201603
#define __cpp_runtime_arrays 198712
#define __cpp_unicode_characters 200704
#define __cpp_raw_strings 200710
#define __cpp_unicode_literals 200710
#define __cpp_user_defined_literals 200809
#define __cpp_lambdas 200907
#define __cpp_range_based_for 200907
#define __cpp_static_assert 200410
#define __cpp_decltype 200707
#define __cpp_attributes 200809
#define __cpp_rvalue_reference 200610
#define __cpp_rvalue_references 200610
#define __cpp_variadic_templates 200704
#define __cpp_initializer_lists 200806
#define __cpp_delegating_constructors 200604
#define __cpp_nsdmi 200809
#define __cpp_inheriting_constructors 201511
#define __cpp_ref_qualifiers 200710
#define __cpp_alias_templates 200704
#define __cpp_return_type_deduction 201304
#define __cpp_init_captures 201304
#define __cpp_generic_lambdas 201304
#define __cpp_constexpr 201304
#define __cpp_decltype_auto 201304
#define __cpp_aggregate_nsdmi 201304
#define __cpp_variable_templates 201304
#define __cpp_digit_separators 201309
#define __cpp_sized_deallocation 201309
#define __cpp_threadsafe_static_init 200806
#define __GXX_ABI_VERSION 1013
#define __SCHAR_MAX__ 0x7f
#define __SHRT_MAX__ 0x7fff
#define __INT_MAX__ 0x7fffffff
#define __LONG_MAX__ 0x7fffffffL
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
#define __WCHAR_MAX__ 0xffffffffU
#define __WCHAR_MIN__ 0U
#define __WINT_MAX__ 0xffffffffU
#define __WINT_MIN__ 0U
#define __PTRDIFF_MAX__ 0x7fffffff
#define __SIZE_MAX__ 0xffffffffU
#define __SCHAR_WIDTH__ 8
#define __SHRT_WIDTH__ 16
#define __INT_WIDTH__ 32
#define __LONG_WIDTH__ 32
#define __LONG_LONG_WIDTH__ 64
#define __WCHAR_WIDTH__ 32
#define __WINT_WIDTH__ 32
#define __PTRDIFF_WIDTH__ 32
#define __SIZE_WIDTH__ 32
#define __INTMAX_MAX__ 0x7fffffffffffffffLL
#define __INTMAX_C(c) c ## LL
#define __UINTMAX_MAX__ 0xffffffffffffffffULL
#define __UINTMAX_C(c) c ## ULL
#define __INTMAX_WIDTH__ 64
#define __SIG_ATOMIC_MAX__ 0x7fffffff
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __SIG_ATOMIC_WIDTH__ 32
#define __INT8_MAX__ 0x7f
#define __INT16_MAX__ 0x7fff
#define __INT32_MAX__ 0x7fffffffL
#define __INT64_MAX__ 0x7fffffffffffffffLL
#define __UINT8_MAX__ 0xff
#define __UINT16_MAX__ 0xffff
#define __UINT32_MAX__ 0xffffffffUL
#define __UINT64_MAX__ 0xffffffffffffffffULL
#define __INT_LEAST8_MAX__ 0x7f
#define __INT8_C(c) c
#define __INT_LEAST8_WIDTH__ 8
#define __INT_LEAST16_MAX__ 0x7fff
#define __INT16_C(c) c
#define __INT_LEAST16_WIDTH__ 16
#define __INT_LEAST32_MAX__ 0x7fffffffL
#define __INT32_C(c) c ## L
#define __INT_LEAST32_WIDTH__ 32
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffLL
#define __INT64_C(c) c ## LL
#define __INT_LEAST64_WIDTH__ 64
#define __UINT_LEAST8_MAX__ 0xff
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 0xffff
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 0xffffffffUL
#define __UINT32_C(c) c ## UL
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffULL
#define __UINT64_C(c) c ## ULL
#define __INT_FAST8_MAX__ 0x7fffffff
#define __INT_FAST8_WIDTH__ 32
#define __INT_FAST16_MAX__ 0x7fffffff
#define __INT_FAST16_WIDTH__ 32
#define __INT_FAST32_MAX__ 0x7fffffff
#define __INT_FAST32_WIDTH__ 32
#define __INT_FAST64_MAX__ 0x7fffffffffffffffLL
#define __INT_FAST64_WIDTH__ 64
#define __UINT_FAST8_MAX__ 0xffffffffU
#define __UINT_FAST16_MAX__ 0xffffffffU
#define __UINT_FAST32_MAX__ 0xffffffffU
#define __UINT_FAST64_MAX__ 0xffffffffffffffffULL
#define __INTPTR_MAX__ 0x7fffffff
#define __INTPTR_WIDTH__ 32
#define __UINTPTR_MAX__ 0xffffffffU
#define __GCC_IEC_559 0
#define __GCC_IEC_559_COMPLEX 0
#define __FLT_EVAL_METHOD__ 0
#define __FLT_EVAL_METHOD_TS_18661_3__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.4028234663852886e+38F
#define __FLT_MIN__ 1.1754943508222875e-38F
#define __FLT_EPSILON__ 1.1920928955078125e-7F
#define __FLT_DENORM_MIN__ 1.4012984643248171e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ double(1.7976931348623157e+308L)
#define __DBL_MIN__ double(2.2250738585072014e-308L)
#define __DBL_EPSILON__ double(2.2204460492503131e-16L)
#define __DBL_DENORM_MIN__ double(4.9406564584124654e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 53
#define __LDBL_DIG__ 15
#define __LDBL_MIN_EXP__ (-1021)
#define __LDBL_MIN_10_EXP__ (-307)
#define __LDBL_MAX_EXP__ 1024
#define __LDBL_MAX_10_EXP__ 308
#define __DECIMAL_DIG__ 17
#define __LDBL_DECIMAL_DIG__ 17
#define __LDBL_MAX__ 1.7976931348623157e+308L
#define __LDBL_MIN__ 2.2250738585072014e-308L
#define __LDBL_EPSILON__ 2.2204460492503131e-16L
#define __LDBL_DENORM_MIN__ 4.9406564584124654e-324L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __FLT32_MANT_DIG__ 24
#define __FLT32_DIG__ 6
#define __FLT32_MIN_EXP__ (-125)
#define __FLT32_MIN_10_EXP__ (-37)
#define __FLT32_MAX_EXP__ 128
#define __FLT32_MAX_10_EXP__ 38
#define __FLT32_DECIMAL_DIG__ 9
#define __FLT32_MAX__ 3.4028234663852886e+38F32
#define __FLT32_MIN__ 1.1754943508222875e-38F32
#define __FLT32_EPSILON__ 1.1920928955078125e-7F32
#define __FLT32_DENORM_MIN__ 1.4012984643248171e-45F32
#define __FLT32_HAS_DENORM__ 1
#define __FLT32_HAS_INFINITY__ 1
#define __FLT32_HAS_QUIET_NAN__ 1
#define __FLT64_MANT_DIG__ 53
#define __FLT64_DIG__ 15
#define __FLT64_MIN_EXP__ (-1021)
#define __FLT64_MIN_10_EXP__ (-307)
#define __FLT64_MAX_EXP__ 1024
#define __FLT64_MAX_10_EXP__ 308
#define __FLT64_DECIMAL_DIG__ 17
#define __FLT64_MAX__ 1.7976931348623157e+308F64
#define __FLT64_MIN__ 2.2250738585072014e-308F64
#define __FLT64_EPSILON__ 2.2204460492503131e-16F64
#define __FLT64_DENORM_MIN__ 4.9406564584124654e-324F64
#define __FLT64_HAS_DENORM__ 1
#define __FLT64_HAS_INFINITY__ 1
#define __FLT64_HAS_QUIET_NAN__ 1
#define __FLT32X_MANT_DIG__ 53
#define __FLT32X_DIG__ 15
#define __FLT32X_MIN_EXP__ (-1021)
#define __FLT32X_MIN_10_EXP__ (-307)
#define __FLT32X_MAX_EXP__ 1024
#define __FLT32X_MAX_10_EXP__ 308
#define __FLT32X_DECIMAL_DIG__ 17
#define __FLT32X_MAX__ 1.7976931348623157e+308F32x
#define __FLT32X_MIN__ 2.2250738585072014e-308F32x
#define __FLT32X_EPSILON__ 2.2204460492503131e-16F32x
#define __FLT32X_DENORM_MIN__ 4.9406564584124654e-324F32x
#define __FLT32X_HAS_DENORM__ 1
#define __FLT32X_HAS_INFINITY__ 1
#define __FLT32X_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __SFRACT_FBIT__ 7
#define __SFRACT_IBIT__ 0
#define __SFRACT_MIN__ (-0.5HR-0.5HR)
#define __SFRACT_MAX__ 0X7FP-7HR
#define __SFRACT_EPSILON__ 0x1P-7HR
#define __USFRACT_FBIT__ 8
#define __USFRACT_IBIT__ 0
#define __USFRACT_MIN__ 0.0UHR
#define __USFRACT_MAX__ 0XFFP-8UHR
#define __USFRACT_EPSILON__ 0x1P-8UHR
#define __FRACT_FBIT__ 15
#define __FRACT_IBIT__ 0
#define __FRACT_MIN__ (-0.5R-0.5R)
#define __FRACT_MAX__ 0X7FFFP-15R
#define __FRACT_EPSILON__ 0x1P-15R
#define __UFRACT_FBIT__ 16
#define __UFRACT_IBIT__ 0
#define __UFRACT_MIN__ 0.0UR
#define __UFRACT_MAX__ 0XFFFFP-16UR
#define __UFRACT_EPSILON__ 0x1P-16UR
#define __LFRACT_FBIT__ 31
#define __LFRACT_IBIT__ 0
#define __LFRACT_MIN__ (-0.5LR-0.5LR)
#define __LFRACT_MAX__ 0X7FFFFFFFP-31LR
#define __LFRACT_EPSILON__ 0x1P-31LR
#define __ULFRACT_FBIT__ 32
#define __ULFRACT_IBIT__ 0
#define __ULFRACT_MIN__ 0.0ULR
#define __ULFRACT_MAX__ 0XFFFFFFFFP-32ULR
#define __ULFRACT_EPSILON__ 0x1P-32ULR
#define __LLFRACT_FBIT__ 63
#define __LLFRACT_IBIT__ 0
#define __LLFRACT_MIN__ (-0.5LLR-0.5LLR)
#define __LLFRACT_MAX__ 0X7FFFFFFFFFFFFFFFP-63LLR
#define __LLFRACT_EPSILON__ 0x1P-63LLR
#define __ULLFRACT_FBIT__ 64
#define __ULLFRACT_IBIT__ 0
#define __ULLFRACT_MIN__ 0.0ULLR
#define __ULLFRACT_MAX__ 0XFFFFFFFFFFFFFFFFP-64ULLR
#define __ULLFRACT_EPSILON__ 0x1P-64ULLR
#define __SACCUM_FBIT__ 7
#define __SACCUM_IBIT__ 8
#define __SACCUM_MIN__ (-0X1P7HK-0X1P7HK)
#define __SACCUM_MAX__ 0X7FFFP-7HK
#define __SACCUM_EPSILON__ 0x1P-7HK
#define __USACCUM_FBIT__ 8
#define __USACCUM_IBIT__ 8
#define __USACCUM_MIN__ 0.0UHK
#define __USACCUM_MAX__ 0XFFFFP-8UHK
#define __USACCUM_EPSILON__ 0x1P-8UHK
#define __ACCUM_FBIT__ 15
#define __ACCUM_IBIT__ 16
#define __ACCUM_MIN__ (-0X1P15K-0X1P15K)
#define __ACCUM_MAX__ 0X7FFFFFFFP-15K
#define __ACCUM_EPSILON__ 0x1P-15K
#define __UACCUM_FBIT__ 16
#define __UACCUM_IBIT__ 16
#define __UACCUM_MIN__ 0.0UK
#define __UACCUM_MAX__ 0XFFFFFFFFP-16UK
#define __UACCUM_EPSILON__ 0x1P-16UK
#define __LACCUM_FBIT__ 31
#define __LACCUM_IBIT__ 32
#define __LACCUM_MIN__ (-0X1P31LK-0X1P31LK)
#define __LACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LK
#define __LACCUM_EPSILON__ 0x1P-31LK
#define __ULACCUM_FBIT__ 32
#define __ULACCUM_IBIT__ 32
#define __ULACCUM_MIN__ 0.0ULK
#define __ULACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULK
#define __ULACCUM_EPSILON__ 0x1P-32ULK
#define __LLACCUM_FBIT__ 31
#define __LLACCUM_IBIT__ 32
#define __LLACCUM_MIN__ (-0X1P31LLK-0X1P31LLK)
#define __LLACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LLK
#define __LLACCUM_EPSILON__ 0x1P-31LLK
#define __ULLACCUM_FBIT__ 32
#define __ULLACCUM_IBIT__ 32
#define __ULLACCUM_MIN__ 0.0ULLK
#define __ULLACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULLK
#define __ULLACCUM_EPSILON__ 0x1P-32ULLK
#define __QQ_FBIT__ 7
#define __QQ_IBIT__ 0
#define __HQ_FBIT__ 15
#define __HQ_IBIT__ 0
#define __SQ_FBIT__ 31
#define __SQ_IBIT__ 0
#define __DQ_FBIT__ 63
#define __DQ_IBIT__ 0
#define __TQ_FBIT__ 127
#define __TQ_IBIT__ 0
#define __UQQ_FBIT__ 8
#define __UQQ_IBIT__ 0
#define __UHQ_FBIT__ 16
#define __UHQ_IBIT__ 0
#define __USQ_FBIT__ 32
#define __USQ_IBIT__ 0
#define __UDQ_FBIT__ 64
#define __UDQ_IBIT__ 0
#define __UTQ_FBIT__ 128
#define __UTQ_IBIT__ 0
#define __HA_FBIT__ 7
#define __HA_IBIT__ 8
#define __SA_FBIT__ 15
#define __SA_IBIT__ 16
#define __DA_FBIT__ 31
#define __DA_IBIT__ 32
#define __TA_FBIT__ 63
#define __TA_IBIT__ 64
#define __UHA_FBIT__ 8
#define __UHA_IBIT__ 8
#define __USA_FBIT__ 16
#define __USA_IBIT__ 16
#define __UDA_FBIT__ 32
#define __UDA_IBIT__ 32
#define __UTA_FBIT__ 64
#define __UTA_IBIT__ 64
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ 
#define __GNUC_STDC_INLINE__ 1
#define __CHAR_UNSIGNED__ 1
#define __WCHAR_UNSIGNED__ 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
#define __GCC_ATOMIC_INT_LOCK_FREE 2
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
#define __GCC_ATOMIC_LLONG_LOCK_FREE 1
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
#define __HAVE_SPECULATION_SAFE_VALUE 1
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_WCHAR_T__ 4
#define __SIZEOF_WINT_T__ 4
#define __SIZEOF_PTRDIFF_T__ 4
#undef __ARM_FEATURE_DSP
# 1 "<built-in>"
#define __ARM_FEATURE_QBIT 1
#define __ARM_FEATURE_SAT 1
#undef __ARM_FEATURE_CRYPTO
# 1 "<built-in>"
#define __ARM_FEATURE_UNALIGNED 1
#undef __ARM_FEATURE_QRDMX
# 1 "<built-in>"
#undef __ARM_FEATURE_CRC32
# 1 "<built-in>"
#undef __ARM_FEATURE_DOTPROD
# 1 "<built-in>"
#undef __ARM_FEATURE_COMPLEX
# 1 "<built-in>"
#define __ARM_32BIT_STATE 1
#undef __ARM_FEATURE_CMSE
# 1 "<built-in>"
#undef __ARM_FEATURE_LDREX
# 1 "<built-in>"
#define __ARM_FEATURE_LDREX 7
#define __ARM_FEATURE_CLZ 1
#undef __ARM_FEATURE_NUMERIC_MAXMIN
# 1 "<built-in>"
#undef __ARM_FEATURE_SIMD32
# 1 "<built-in>"
#define __ARM_SIZEOF_MINIMAL_ENUM 1
#define __ARM_SIZEOF_WCHAR_T 4
#undef __ARM_ARCH_PROFILE
# 1 "<built-in>"
#define __ARM_ARCH_PROFILE 77
#define __arm__ 1
#undef __ARM_ARCH
# 1 "<built-in>"
#define __ARM_ARCH 7
#define __APCS_32__ 1
#define __thumb__ 1
#define __thumb2__ 1
#define __THUMBEL__ 1
#undef __ARM_ARCH_ISA_THUMB
# 1 "<built-in>"
#define __ARM_ARCH_ISA_THUMB 2
#define __ARMEL__ 1
#define __SOFTFP__ 1
#define __VFP_FP__ 1
#undef __ARM_FP
# 1 "<built-in>"
#undef __ARM_FP16_FORMAT_IEEE
# 1 "<built-in>"
#undef __ARM_FP16_FORMAT_ALTERNATIVE
# 1 "<built-in>"
#undef __ARM_FP16_ARGS
# 1 "<built-in>"
#undef __ARM_FEATURE_FP16_SCALAR_ARITHMETIC
# 1 "<built-in>"
#undef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC
# 1 "<built-in>"
#undef __ARM_FEATURE_FP16_FML
# 1 "<built-in>"
#undef __ARM_FEATURE_FMA
# 1 "<built-in>"
#undef __ARM_NEON__
# 1 "<built-in>"
#undef __ARM_NEON
# 1 "<built-in>"
#undef __ARM_NEON_FP
# 1 "<built-in>"
#define __THUMB_INTERWORK__ 1
#define __ARM_ARCH_7M__ 1
#define __ARM_PCS 1
#define __ARM_EABI__ 1
#define __ARM_ARCH_EXT_IDIV__ 1
#define __ARM_FEATURE_IDIV 1
#define __ARM_ASM_SYNTAX_UNIFIED__ 1
#undef __ARM_FEATURE_COPROC
# 1 "<built-in>"
#define __ARM_FEATURE_COPROC 15
#define __GXX_TYPEINFO_EQUALITY_INLINE 0
#define __ELF__ 1
# 1 "<command-line>"
#define __USES_INITFINI__ 1
#define BOARD_maple 1
#define MCU_STM32F103RB 1
#define ERROR_LED_PORT GPIOA
#define ERROR_LED_PIN 5
#define VECT_TAB_FLASH 1
#define BOOTLOADER_maple 1
#define BOARD_maple 1
#define MCU_STM32F103RB 1
#define ERROR_LED_PORT GPIOA
#define ERROR_LED_PIN 5
#define VECT_TAB_FLASH 1
#define __always_inline 
# 1 "wirish/usb_serial.cpp"
# 31 "wirish/usb_serial.cpp"
# 1 "./wirish/include/wirish/usb_serial.h" 1
# 32 "./wirish/include/wirish/usb_serial.h"
#define _WIRISH_USB_SERIAL_H_ 

# 1 "./wirish/include/wirish/Print.h" 1
# 24 "./wirish/include/wirish/Print.h"
#define _WIRISH_PRINT_H_ 

# 1 "./libmaple/include/libmaple/libmaple_types.h" 1
# 34 "./libmaple/include/libmaple/libmaple_types.h"
#define _LIBMAPLE_LIBMAPLE_TYPES_H_ 


extern "C" {


typedef unsigned char uint8;
typedef unsigned short uint16;
typedef unsigned int uint32;
typedef unsigned long long uint64;

typedef signed char int8;
typedef short int16;
typedef int int32;
typedef long long int64;

typedef void (*voidFuncPtr)(void);
typedef void (*voidArgumentFuncPtr)(void *);

#define __io volatile
#define __attr_flash __attribute__((section (".USER_FLASH")))
#define __packed __attribute__((__packed__))
#define __deprecated __attribute__((__deprecated__))
#define __weak __attribute__((weak))




#define __unused __attribute__((unused))



#define NULL 0



#define offsetof(type,member) __builtin_offsetof(type, member)



}
# 27 "./wirish/include/wirish/Print.h" 2

enum {
    BYTE = 0,
    BIN = 2,
    OCT = 8,
    DEC = 10,
    HEX = 16
};

class Print {
public:
    virtual void write(uint8 ch) = 0;
    virtual void write(const char *str);
    virtual void write(const void *buf, uint32 len);
    void print(char);
    void print(const char[]);
    void print(uint8, int=DEC);
    void print(int, int=DEC);
    void print(unsigned int, int=DEC);
    void print(long, int=DEC);
    void print(unsigned long, int=DEC);
    void print(long long, int=DEC);
    void print(unsigned long long, int=DEC);
    void print(double, int=2);
    void println(void);
    void println(char);
    void println(const char[]);
    void println(uint8, int=DEC);
    void println(int, int=DEC);
    void println(unsigned int, int=DEC);
    void println(long, int=DEC);
    void println(unsigned long, int=DEC);
    void println(long long, int=DEC);
    void println(unsigned long long, int=DEC);
    void println(double, int=2);
private:
    void printNumber(unsigned long long, uint8);
    void printFloat(double, uint8);
};
# 35 "./wirish/include/wirish/usb_serial.h" 2
# 1 "./wirish/include/wirish/boards.h" 1
# 35 "./wirish/include/wirish/boards.h"
#define _WIRISH_BOARDS_H_ 


# 1 "./wirish/include/wirish/wirish_types.h" 1
# 34 "./wirish/include/wirish/wirish_types.h"
#define _WIRISH_WIRISH_TYPES_H_ 


# 1 "./libmaple/include/libmaple/gpio.h" 1
# 34 "./libmaple/include/libmaple/gpio.h"
#define _LIBMAPLE_GPIO_H_ 


extern "C"{






# 1 "./libmaple/stm32f1/include/series/gpio.h" 1
# 35 "./libmaple/stm32f1/include/series/gpio.h"
#define _LIBMAPLE_STM32F1_GPIO_H_ 


extern "C"{


# 1 "./libmaple/include/libmaple/stm32.h" 1
# 39 "./libmaple/include/libmaple/stm32.h"
#define _LIBMAPLE_STM32_H_ 


extern "C" {
# 52 "./libmaple/include/libmaple/stm32.h"
#define STM32_SERIES_F1 0

#define STM32_SERIES_F2 1

#define STM32_SERIES_L1 2

#define STM32_SERIES_F4 3
# 70 "./libmaple/include/libmaple/stm32.h"
# 1 "./libmaple/stm32f1/include/series/stm32.h" 1
# 33 "./libmaple/stm32f1/include/series/stm32.h"
#define _LIBMAPLE_STM32F1_H_ 


extern "C" {


#define STM32_MCU_SERIES STM32_SERIES_F1
# 48 "./libmaple/stm32f1/include/series/stm32.h"
#define STM32_F1_LINE_VALUE 0

#define STM32_F1_LINE_ACCESS 1

#define STM32_F1_LINE_USB_ACCESS 2

#define STM32_F1_LINE_PERFORMANCE 3

#define STM32_F1_LINE_CONNECTIVITY 5
# 68 "./libmaple/stm32f1/include/series/stm32.h"
#define STM32_F1_LINE STM32_F1_LINE_PERFORMANCE
#define STM32_NR_GPIO_PORTS 4
#define STM32_SRAM_END ((void*)0x20005000)
#define STM32_MEDIUM_DENSITY 
# 120 "./libmaple/stm32f1/include/series/stm32.h"
#define STM32_HAVE_USB 1


#define STM32_NR_INTERRUPTS 43
#define STM32_TIMER_MASK 0x1E
#define STM32_HAVE_FSMC 0
#define STM32_HAVE_DAC 0
# 166 "./libmaple/stm32f1/include/series/stm32.h"
#define STM32_PCLK1 36000000U


#define STM32_PCLK2 72000000U


#define STM32_DELAY_US_MULT 12
# 218 "./libmaple/stm32f1/include/series/stm32.h"
}
# 71 "./libmaple/include/libmaple/stm32.h" 2
# 98 "./libmaple/include/libmaple/stm32.h"
#define STM32_HAVE_TIMER(n) (STM32_TIMER_MASK & (1 << (n)))
# 214 "./libmaple/include/libmaple/stm32.h"
#define PCLK1 STM32_PCLK1





#define PCLK2 STM32_PCLK2






#define NR_INTERRUPTS STM32_NR_INTERRUPTS

#define NR_GPIO_PORTS STM32_NR_GPIO_PORTS

#define DELAY_US_MULT STM32_DELAY_US_MULT


}
# 42 "./libmaple/stm32f1/include/series/gpio.h" 2

# 1 "./libmaple/include/libmaple/exti.h" 1
# 35 "./libmaple/include/libmaple/exti.h"
#define _LIBMAPLE_EXTI_H_ 


extern "C"{


# 1 "./libmaple/stm32f1/include/series/exti.h" 1
# 33 "./libmaple/stm32f1/include/series/exti.h"
#define _LIBMAPLE_STM32F1_EXTI_H_ 





struct exti_reg_map;
#define EXTI_BASE ((struct exti_reg_map*)0x40010400)
# 42 "./libmaple/include/libmaple/exti.h" 2







typedef struct exti_reg_map {
    volatile uint32 IMR;
    volatile uint32 EMR;
    volatile uint32 RTSR;
    volatile uint32 FTSR;
    volatile uint32 SWIER;
    volatile uint32 PR;
} exti_reg_map;
# 66 "./libmaple/include/libmaple/exti.h"
typedef enum exti_num {
    EXTI0,
    EXTI1,
    EXTI2,
    EXTI3,
    EXTI4,
    EXTI5,
    EXTI6,
    EXTI7,
    EXTI8,
    EXTI9,
    EXTI10,
    EXTI11,
    EXTI12,
    EXTI13,
    EXTI14,
    EXTI15,
} exti_num;







typedef enum exti_cfg {
    EXTI_PA,
    EXTI_PB,
    EXTI_PC,
    EXTI_PD,
    EXTI_PE,
    EXTI_PF,
    EXTI_PG,
    EXTI_PH,
    EXTI_PI,
} exti_cfg;


typedef enum exti_trigger_mode {
    EXTI_RISING,
    EXTI_FALLING,
    EXTI_RISING_FALLING
} exti_trigger_mode;





void exti_attach_interrupt(exti_num num,
                           exti_cfg port,
                           voidFuncPtr handler,
                           exti_trigger_mode mode);
void exti_attach_callback(exti_num num,
                          exti_cfg port,
                          voidArgumentFuncPtr handler,
                          void *arg,
                          exti_trigger_mode mode);
void exti_detach_interrupt(exti_num num);
# 137 "./libmaple/include/libmaple/exti.h"
extern void exti_select(exti_num num, exti_cfg port);


}
# 44 "./libmaple/stm32f1/include/series/gpio.h" 2






typedef struct gpio_reg_map {
    volatile uint32 CRL;
    volatile uint32 CRH;
    volatile uint32 IDR;
    volatile uint32 ODR;
    volatile uint32 BSRR;
    volatile uint32 BRR;
    volatile uint32 LCKR;
} gpio_reg_map;

struct gpio_dev;
extern struct gpio_dev gpioa;
extern struct gpio_dev* const GPIOA;
extern struct gpio_dev gpiob;
extern struct gpio_dev* const GPIOB;
extern struct gpio_dev gpioc;
extern struct gpio_dev* const GPIOC;
extern struct gpio_dev gpiod;
extern struct gpio_dev* const GPIOD;
# 79 "./libmaple/stm32f1/include/series/gpio.h"
#define GPIOA_BASE ((struct gpio_reg_map*)0x40010800)

#define GPIOB_BASE ((struct gpio_reg_map*)0x40010C00)

#define GPIOC_BASE ((struct gpio_reg_map*)0x40011000)

#define GPIOD_BASE ((struct gpio_reg_map*)0x40011400)

#define GPIOE_BASE ((struct gpio_reg_map*)0x40011800)

#define GPIOF_BASE ((struct gpio_reg_map*)0x40011C00)

#define GPIOG_BASE ((struct gpio_reg_map*)0x40012000)







#define GPIO_CR_CNF (0x3 << 2)
#define GPIO_CR_CNF_INPUT_ANALOG (0x0 << 2)
#define GPIO_CR_CNF_INPUT_FLOATING (0x1 << 2)
#define GPIO_CR_CNF_INPUT_PU_PD (0x2 << 2)
#define GPIO_CR_CNF_OUTPUT_PP (0x0 << 2)
#define GPIO_CR_CNF_OUTPUT_OD (0x1 << 2)
#define GPIO_CR_CNF_AF_OUTPUT_PP (0x2 << 2)
#define GPIO_CR_CNF_AF_OUTPUT_OD (0x3 << 2)
#define GPIO_CR_MODE 0x3
#define GPIO_CR_MODE_INPUT 0x0
#define GPIO_CR_MODE_OUTPUT_10MHZ 0x1
#define GPIO_CR_MODE_OUTPUT_2MHZ 0x2
#define GPIO_CR_MODE_OUTPUT_50MHZ 0x3







typedef enum gpio_pin_mode {

    GPIO_OUTPUT_PP = (0x0 << 2) | 0x3,

    GPIO_OUTPUT_OD = (0x1 << 2) | 0x3,

    GPIO_AF_OUTPUT_PP = (0x2 << 2) | 0x3,

    GPIO_AF_OUTPUT_OD = (0x3 << 2) | 0x3,

    GPIO_INPUT_ANALOG = (0x0 << 2) | 0x0,

    GPIO_INPUT_FLOATING = (0x1 << 2) | 0x0,

    GPIO_INPUT_PD = (0x2 << 2) | 0x0,

    GPIO_INPUT_PU,
} gpio_pin_mode;


#define GPIO_MODE_ANALOG GPIO_INPUT_ANALOG
#define GPIO_MODE_OUTPUT GPIO_OUTPUT_PP






typedef struct afio_reg_map {
    volatile uint32 EVCR;
    volatile uint32 MAPR;
    volatile uint32 EXTICR1;
    volatile uint32 EXTICR2;
    volatile uint32 EXTICR3;
    volatile uint32 EXTICR4;
    volatile uint32 MAPR2;

} afio_reg_map;


#define AFIO_BASE ((struct afio_reg_map *)0x40010000)







#define AFIO_EVCR_EVOE (0x1 << 7)
#define AFIO_EVCR_PORT_PA (0x0 << 4)
#define AFIO_EVCR_PORT_PB (0x1 << 4)
#define AFIO_EVCR_PORT_PC (0x2 << 4)
#define AFIO_EVCR_PORT_PD (0x3 << 4)
#define AFIO_EVCR_PORT_PE (0x4 << 4)
#define AFIO_EVCR_PIN_0 0x0
#define AFIO_EVCR_PIN_1 0x1
#define AFIO_EVCR_PIN_2 0x2
#define AFIO_EVCR_PIN_3 0x3
#define AFIO_EVCR_PIN_4 0x4
#define AFIO_EVCR_PIN_5 0x5
#define AFIO_EVCR_PIN_6 0x6
#define AFIO_EVCR_PIN_7 0x7
#define AFIO_EVCR_PIN_8 0x8
#define AFIO_EVCR_PIN_9 0x9
#define AFIO_EVCR_PIN_10 0xA
#define AFIO_EVCR_PIN_11 0xB
#define AFIO_EVCR_PIN_12 0xC
#define AFIO_EVCR_PIN_13 0xD
#define AFIO_EVCR_PIN_14 0xE
#define AFIO_EVCR_PIN_15 0xF



#define AFIO_MAPR_SWJ_CFG (0x7 << 24)
#define AFIO_MAPR_SWJ_CFG_FULL_SWJ (0x0 << 24)
#define AFIO_MAPR_SWJ_CFG_FULL_SWJ_NO_NJRST (0x1 << 24)
#define AFIO_MAPR_SWJ_CFG_NO_JTAG_SW (0x2 << 24)
#define AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW (0x4 << 24)
#define AFIO_MAPR_ADC2_ETRGREG_REMAP (1U << 20)
#define AFIO_MAPR_ADC2_ETRGINJ_REMAP (1U << 19)
#define AFIO_MAPR_ADC1_ETRGREG_REMAP (1U << 18)
#define AFIO_MAPR_ADC1_ETRGINJ_REMAP (1U << 17)
#define AFIO_MAPR_TIM5CH4_IREMAP (1U << 16)
#define AFIO_MAPR_PD01_REMAP (1U << 15)
#define AFIO_MAPR_CAN_REMAP (0x3 << 13)
#define AFIO_MAPR_CAN_REMAP_NONE (0x0 << 13)
#define AFIO_MAPR_CAN_REMAP_PB8_PB9 (0x2 << 13)
#define AFIO_MAPR_CAN_REMAP_PD0_PD1 (0x3 << 13)
#define AFIO_MAPR_TIM4_REMAP (1U << 12)
#define AFIO_MAPR_TIM3_REMAP (0x3 << 10)
#define AFIO_MAPR_TIM3_REMAP_NONE (0x0 << 10)
#define AFIO_MAPR_TIM3_REMAP_PARTIAL (0x2 << 10)
#define AFIO_MAPR_TIM3_REMAP_FULL (0x3 << 10)
#define AFIO_MAPR_TIM2_REMAP (0x3 << 8)
#define AFIO_MAPR_TIM2_REMAP_NONE (0x0 << 8)
#define AFIO_MAPR_TIM2_REMAP_PA15_PB3_PA2_PA3 (0x1 << 8)
#define AFIO_MAPR_TIM2_REMAP_PA0_PA1_PB10_PB11 (0x2 << 8)
#define AFIO_MAPR_TIM2_REMAP_FULL (0x3 << 8)
#define AFIO_MAPR_TIM1_REMAP (0x3 << 6)
#define AFIO_MAPR_TIM1_REMAP_NONE (0x0 << 6)
#define AFIO_MAPR_TIM1_REMAP_PARTIAL (0x1 << 6)
#define AFIO_MAPR_TIM1_REMAP_FULL (0x3 << 6)
#define AFIO_MAPR_USART3_REMAP (0x3 << 4)
#define AFIO_MAPR_USART3_REMAP_NONE (0x0 << 4)
#define AFIO_MAPR_USART3_REMAP_PARTIAL (0x1 << 4)
#define AFIO_MAPR_USART3_REMAP_FULL (0x3 << 4)
#define AFIO_MAPR_USART2_REMAP (1U << 3)
#define AFIO_MAPR_USART1_REMAP (1U << 2)
#define AFIO_MAPR_I2C1_REMAP (1U << 1)
#define AFIO_MAPR_SPI1_REMAP (1U << 0)



#define AFIO_EXTICR1_EXTI3 (0xF << 12)
#define AFIO_EXTICR1_EXTI3_PA (0x0 << 12)
#define AFIO_EXTICR1_EXTI3_PB (0x1 << 12)
#define AFIO_EXTICR1_EXTI3_PC (0x2 << 12)
#define AFIO_EXTICR1_EXTI3_PD (0x3 << 12)
#define AFIO_EXTICR1_EXTI3_PE (0x4 << 12)
#define AFIO_EXTICR1_EXTI3_PF (0x5 << 12)
#define AFIO_EXTICR1_EXTI3_PG (0x6 << 12)
#define AFIO_EXTICR1_EXTI2 (0xF << 8)
#define AFIO_EXTICR1_EXTI2_PA (0x0 << 8)
#define AFIO_EXTICR1_EXTI2_PB (0x1 << 8)
#define AFIO_EXTICR1_EXTI2_PC (0x2 << 8)
#define AFIO_EXTICR1_EXTI2_PD (0x3 << 8)
#define AFIO_EXTICR1_EXTI2_PE (0x4 << 8)
#define AFIO_EXTICR1_EXTI2_PF (0x5 << 8)
#define AFIO_EXTICR1_EXTI2_PG (0x6 << 8)
#define AFIO_EXTICR1_EXTI1 (0xF << 4)
#define AFIO_EXTICR1_EXTI1_PA (0x0 << 4)
#define AFIO_EXTICR1_EXTI1_PB (0x1 << 4)
#define AFIO_EXTICR1_EXTI1_PC (0x2 << 4)
#define AFIO_EXTICR1_EXTI1_PD (0x3 << 4)
#define AFIO_EXTICR1_EXTI1_PE (0x4 << 4)
#define AFIO_EXTICR1_EXTI1_PF (0x5 << 4)
#define AFIO_EXTICR1_EXTI1_PG (0x6 << 4)
#define AFIO_EXTICR1_EXTI0 0xF
#define AFIO_EXTICR1_EXTI0_PA 0x0
#define AFIO_EXTICR1_EXTI0_PB 0x1
#define AFIO_EXTICR1_EXTI0_PC 0x2
#define AFIO_EXTICR1_EXTI0_PD 0x3
#define AFIO_EXTICR1_EXTI0_PE 0x4
#define AFIO_EXTICR1_EXTI0_PF 0x5
#define AFIO_EXTICR1_EXTI0_PG 0x6



#define AFIO_EXTICR2_EXTI7 (0xF << 12)
#define AFIO_EXTICR2_EXTI7_PA (0x0 << 12)
#define AFIO_EXTICR2_EXTI7_PB (0x1 << 12)
#define AFIO_EXTICR2_EXTI7_PC (0x2 << 12)
#define AFIO_EXTICR2_EXTI7_PD (0x3 << 12)
#define AFIO_EXTICR2_EXTI7_PE (0x4 << 12)
#define AFIO_EXTICR2_EXTI7_PF (0x5 << 12)
#define AFIO_EXTICR2_EXTI7_PG (0x6 << 12)
#define AFIO_EXTICR2_EXTI6 (0xF << 8)
#define AFIO_EXTICR2_EXTI6_PA (0x0 << 8)
#define AFIO_EXTICR2_EXTI6_PB (0x1 << 8)
#define AFIO_EXTICR2_EXTI6_PC (0x2 << 8)
#define AFIO_EXTICR2_EXTI6_PD (0x3 << 8)
#define AFIO_EXTICR2_EXTI6_PE (0x4 << 8)
#define AFIO_EXTICR2_EXTI6_PF (0x5 << 8)
#define AFIO_EXTICR2_EXTI6_PG (0x6 << 8)
#define AFIO_EXTICR2_EXTI5 (0xF << 4)
#define AFIO_EXTICR2_EXTI5_PA (0x0 << 4)
#define AFIO_EXTICR2_EXTI5_PB (0x1 << 4)
#define AFIO_EXTICR2_EXTI5_PC (0x2 << 4)
#define AFIO_EXTICR2_EXTI5_PD (0x3 << 4)
#define AFIO_EXTICR2_EXTI5_PE (0x4 << 4)
#define AFIO_EXTICR2_EXTI5_PF (0x5 << 4)
#define AFIO_EXTICR2_EXTI5_PG (0x6 << 4)
#define AFIO_EXTICR2_EXTI4 0xF
#define AFIO_EXTICR2_EXTI4_PA 0x0
#define AFIO_EXTICR2_EXTI4_PB 0x1
#define AFIO_EXTICR2_EXTI4_PC 0x2
#define AFIO_EXTICR2_EXTI4_PD 0x3
#define AFIO_EXTICR2_EXTI4_PE 0x4
#define AFIO_EXTICR2_EXTI4_PF 0x5
#define AFIO_EXTICR2_EXTI4_PG 0x6



#define AFIO_MAPR2_FSMC_NADV (1U << 10)
#define AFIO_MAPR2_TIM14_REMAP (1U << 9)
#define AFIO_MAPR2_TIM13_REMAP (1U << 8)
#define AFIO_MAPR2_TIM11_REMAP (1U << 7)
#define AFIO_MAPR2_TIM10_REMAP (1U << 6)
#define AFIO_MAPR2_TIM9_REMAP (1U << 5)





void afio_init(void);



#define AFIO_REMAP_USE_MAPR2 (1U << 31)





typedef enum afio_remap_peripheral {

    AFIO_REMAP_ADC2_ETRGREG = (1U << 20),

    AFIO_REMAP_ADC2_ETRGINJ = (1U << 19),

    AFIO_REMAP_ADC1_ETRGREG = (1U << 18),

    AFIO_REMAP_ADC1_ETRGINJ = (1U << 17),

    AFIO_REMAP_TIM5CH4_I = (1U << 16),

    AFIO_REMAP_PD01 = (1U << 15),

    AFIO_REMAP_CAN_1 = (0x2 << 13),

    AFIO_REMAP_CAN_2 = (0x3 << 13),

    AFIO_REMAP_TIM4 = (1U << 12),

    AFIO_REMAP_TIM3_PARTIAL = (0x2 << 10),

    AFIO_REMAP_TIM3_FULL = (0x3 << 10),



    AFIO_REMAP_TIM2_PARTIAL_1 = (0x1 << 8),



    AFIO_REMAP_TIM2_PARTIAL_2 = (0x2 << 8),

    AFIO_REMAP_TIM2_FULL = (0x3 << 8),

    AFIO_REMAP_USART2 = (1U << 3),

    AFIO_REMAP_USART1 = (1U << 2),

    AFIO_REMAP_I2C1 = (1U << 1),

    AFIO_REMAP_SPI1 = (1U << 0),

    AFIO_REMAP_FSMC_NADV = (1U << 10) | (1U << 31),

    AFIO_REMAP_TIM14 = (1U << 9) | (1U << 31),

    AFIO_REMAP_TIM13 = (1U << 8) | (1U << 31),

    AFIO_REMAP_TIM11 = (1U << 7) | (1U << 31),

    AFIO_REMAP_TIM10 = (1U << 6) | (1U << 31),

    AFIO_REMAP_TIM9 = (1U << 5) | (1U << 31),
} afio_remap_peripheral;

void afio_remap(afio_remap_peripheral p);
# 388 "./libmaple/stm32f1/include/series/gpio.h"
typedef enum afio_debug_cfg {

    AFIO_DEBUG_FULL_SWJ = (0x0 << 24),

    AFIO_DEBUG_FULL_SWJ_NO_NJRST = (0x1 << 24),

    AFIO_DEBUG_SW_ONLY = (0x2 << 24),

    AFIO_DEBUG_NONE = (0x4 << 24),
} afio_debug_cfg;






static inline void afio_cfg_debug_ports(afio_debug_cfg config) {
    volatile uint32 *mapr = &((struct afio_reg_map *)0x40010000)->MAPR;
    *mapr = (*mapr & ~(0x7 << 24)) | config;
}
# 422 "./libmaple/stm32f1/include/series/gpio.h"
typedef exti_cfg afio_exti_port;


#define AFIO_EXTI_PA EXTI_PA

#define AFIO_EXTI_PB EXTI_PB

#define AFIO_EXTI_PC EXTI_PC

#define AFIO_EXTI_PD EXTI_PD

#define AFIO_EXTI_PE EXTI_PE

#define AFIO_EXTI_PF EXTI_PF

#define AFIO_EXTI_PG EXTI_PG
# 447 "./libmaple/stm32f1/include/series/gpio.h"
typedef exti_num afio_exti_num;


#define AFIO_EXTI_0 EXTI0

#define AFIO_EXTI_1 EXTI1

#define AFIO_EXTI_2 EXTI2

#define AFIO_EXTI_3 EXTI3

#define AFIO_EXTI_4 EXTI4

#define AFIO_EXTI_5 EXTI5

#define AFIO_EXTI_6 EXTI6

#define AFIO_EXTI_7 EXTI7

#define AFIO_EXTI_8 EXTI8

#define AFIO_EXTI_9 EXTI9

#define AFIO_EXTI_10 EXTI10

#define AFIO_EXTI_11 EXTI11

#define AFIO_EXTI_12 EXTI12

#define AFIO_EXTI_13 EXTI13

#define AFIO_EXTI_14 EXTI14

#define AFIO_EXTI_15 EXTI15




static inline void afio_exti_select(exti_num exti, exti_cfg port) {
    exti_select(exti, port);
}


}
# 45 "./libmaple/include/libmaple/gpio.h" 2

# 1 "./libmaple/include/libmaple/rcc.h" 1
# 33 "./libmaple/include/libmaple/rcc.h"
#define _LIBMAPLE_RCC_H_ 


extern "C"{
# 47 "./libmaple/include/libmaple/rcc.h"
typedef enum rcc_sysclk_src {
    RCC_CLKSRC_HSI = 0x0,
    RCC_CLKSRC_HSE = 0x1,
    RCC_CLKSRC_PLL = 0x2,
} rcc_sysclk_src;

# 1 "./libmaple/stm32f1/include/series/rcc.h" 1
# 34 "./libmaple/stm32f1/include/series/rcc.h"
#define _LIBMAPLE_STM32F1_RCC_H_ 


extern "C"{
# 47 "./libmaple/stm32f1/include/series/rcc.h"
typedef struct rcc_reg_map {
    volatile uint32 CR;
    volatile uint32 CFGR;
    volatile uint32 CIR;
    volatile uint32 APB2RSTR;
    volatile uint32 APB1RSTR;
    volatile uint32 AHBENR;
    volatile uint32 APB2ENR;
    volatile uint32 APB1ENR;
    volatile uint32 BDCR;
    volatile uint32 CSR;
} rcc_reg_map;

#define RCC_BASE ((struct rcc_reg_map*)0x40021000)







#define RCC_CR_PLLRDY_BIT 25
#define RCC_CR_PLLON_BIT 24
#define RCC_CR_CSSON_BIT 19
#define RCC_CR_HSEBYP_BIT 18
#define RCC_CR_HSERDY_BIT 17
#define RCC_CR_HSEON_BIT 16
#define RCC_CR_HSIRDY_BIT 1
#define RCC_CR_HSION_BIT 0

#define RCC_CR_PLLRDY (1U << RCC_CR_PLLRDY_BIT)
#define RCC_CR_PLLON (1U << RCC_CR_PLLON_BIT)
#define RCC_CR_CSSON (1U << RCC_CR_CSSON_BIT)
#define RCC_CR_HSEBYP (1U << RCC_CR_HSEBYP_BIT)
#define RCC_CR_HSERDY (1U << RCC_CR_HSERDY_BIT)
#define RCC_CR_HSEON (1U << RCC_CR_HSEON_BIT)
#define RCC_CR_HSICAL (0xFF << 8)
#define RCC_CR_HSITRIM (0x1F << 3)
#define RCC_CR_HSIRDY (1U << RCC_CR_HSIRDY_BIT)
#define RCC_CR_HSION (1U << RCC_CR_HSION_BIT)



#define RCC_CFGR_USBPRE_BIT 22
#define RCC_CFGR_PLLXTPRE_BIT 17
#define RCC_CFGR_PLLSRC_BIT 16

#define RCC_CFGR_MCO (0x3 << 24)
#define RCC_CFGR_USBPRE (1U << RCC_CFGR_USBPRE_BIT)
#define RCC_CFGR_PLLMUL (0xF << 18)
#define RCC_CFGR_PLLXTPRE (1U << RCC_CFGR_PLLXTPRE_BIT)
#define RCC_CFGR_PLLSRC (1U << RCC_CFGR_PLLSRC_BIT)
#define RCC_CFGR_ADCPRE (0x3 << 14)
#define RCC_CFGR_PPRE2 (0x7 << 11)
#define RCC_CFGR_PPRE1 (0x7 << 8)
#define RCC_CFGR_HPRE (0xF << 4)
#define RCC_CFGR_SWS (0x3 << 2)
#define RCC_CFGR_SWS_PLL (0x2 << 2)
#define RCC_CFGR_SWS_HSE (0x1 << 2)
#define RCC_CFGR_SW 0x3
#define RCC_CFGR_SW_PLL 0x2
#define RCC_CFGR_SW_HSE 0x1



#define RCC_CIR_CSSC_BIT 23
#define RCC_CIR_PLLRDYC_BIT 20
#define RCC_CIR_HSERDYC_BIT 19
#define RCC_CIR_HSIRDYC_BIT 18
#define RCC_CIR_LSERDYC_BIT 17
#define RCC_CIR_LSIRDYC_BIT 16
#define RCC_CIR_PLLRDYIE_BIT 12
#define RCC_CIR_HSERDYIE_BIT 11
#define RCC_CIR_HSIRDYIE_BIT 10
#define RCC_CIR_LSERDYIE_BIT 9
#define RCC_CIR_LSIRDYIE_BIT 8
#define RCC_CIR_CSSF_BIT 7
#define RCC_CIR_PLLRDYF_BIT 4
#define RCC_CIR_HSERDYF_BIT 3
#define RCC_CIR_HSIRDYF_BIT 2
#define RCC_CIR_LSERDYF_BIT 1
#define RCC_CIR_LSIRDYF_BIT 0

#define RCC_CIR_CSSC (1U << RCC_CIR_CSSC_BIT)
#define RCC_CIR_PLLRDYC (1U << RCC_CIR_PLLRDYC_BIT)
#define RCC_CIR_HSERDYC (1U << RCC_CIR_HSERDYC_BIT)
#define RCC_CIR_HSIRDYC (1U << RCC_CIR_HSIRDYC_BIT)
#define RCC_CIR_LSERDYC (1U << RCC_CIR_LSERDYC_BIT)
#define RCC_CIR_LSIRDYC (1U << RCC_CIR_LSIRDYC_BIT)
#define RCC_CIR_PLLRDYIE (1U << RCC_CIR_PLLRDYIE_BIT)
#define RCC_CIR_HSERDYIE (1U << RCC_CIR_HSERDYIE_BIT)
#define RCC_CIR_HSIRDYIE (1U << RCC_CIR_HSIRDYIE_BIT)
#define RCC_CIR_LSERDYIE (1U << RCC_CIR_LSERDYIE_BIT)
#define RCC_CIR_LSIRDYIE (1U << RCC_CIR_LSIRDYIE_BIT)
#define RCC_CIR_CSSF (1U << RCC_CIR_CSSF_BIT)
#define RCC_CIR_PLLRDYF (1U << RCC_CIR_PLLRDYF_BIT)
#define RCC_CIR_HSERDYF (1U << RCC_CIR_HSERDYF_BIT)
#define RCC_CIR_HSIRDYF (1U << RCC_CIR_HSIRDYF_BIT)
#define RCC_CIR_LSERDYF (1U << RCC_CIR_LSERDYF_BIT)
#define RCC_CIR_LSIRDYF (1U << RCC_CIR_LSIRDYF_BIT)



#define RCC_APB2RSTR_TIM11RST_BIT 21
#define RCC_APB2RSTR_TIM10RST_BIT 20
#define RCC_APB2RSTR_TIM9RST_BIT 19
#define RCC_APB2RSTR_ADC3RST_BIT 15
#define RCC_APB2RSTR_USART1RST_BIT 14
#define RCC_APB2RSTR_TIM8RST_BIT 13
#define RCC_APB2RSTR_SPI1RST_BIT 12
#define RCC_APB2RSTR_TIM1RST_BIT 11
#define RCC_APB2RSTR_ADC2RST_BIT 10
#define RCC_APB2RSTR_ADC1RST_BIT 9
#define RCC_APB2RSTR_IOPGRST_BIT 8
#define RCC_APB2RSTR_IOPFRST_BIT 7
#define RCC_APB2RSTR_IOPERST_BIT 6
#define RCC_APB2RSTR_IOPDRST_BIT 5
#define RCC_APB2RSTR_IOPCRST_BIT 4
#define RCC_APB2RSTR_IOPBRST_BIT 3
#define RCC_APB2RSTR_IOPARST_BIT 2
#define RCC_APB2RSTR_AFIORST_BIT 0

#define RCC_APB2RSTR_TIM11RST (1U << RCC_APB2RSTR_TIM11RST_BIT)
#define RCC_APB2RSTR_TIM10RST (1U << RCC_APB2RSTR_TIM10RST_BIT)
#define RCC_APB2RSTR_TIM9RST (1U << RCC_APB2RSTR_TIM9RST_BIT)
#define RCC_APB2RSTR_ADC3RST (1U << RCC_APB2RSTR_ADC3RST_BIT)
#define RCC_APB2RSTR_USART1RST (1U << RCC_APB2RSTR_USART1RST_BIT)
#define RCC_APB2RSTR_TIM8RST (1U << RCC_APB2RSTR_TIM8RST_BIT)
#define RCC_APB2RSTR_SPI1RST (1U << RCC_APB2RSTR_SPI1RST_BIT)
#define RCC_APB2RSTR_TIM1RST (1U << RCC_APB2RSTR_TIM1RST_BIT)
#define RCC_APB2RSTR_ADC2RST (1U << RCC_APB2RSTR_ADC2RST_BIT)
#define RCC_APB2RSTR_ADC1RST (1U << RCC_APB2RSTR_ADC1RST_BIT)
#define RCC_APB2RSTR_IOPGRST (1U << RCC_APB2RSTR_IOPGRST_BIT)
#define RCC_APB2RSTR_IOPFRST (1U << RCC_APB2RSTR_IOPFRST_BIT)
#define RCC_APB2RSTR_IOPERST (1U << RCC_APB2RSTR_IOPERST_BIT)
#define RCC_APB2RSTR_IOPDRST (1U << RCC_APB2RSTR_IOPDRST_BIT)
#define RCC_APB2RSTR_IOPCRST (1U << RCC_APB2RSTR_IOPCRST_BIT)
#define RCC_APB2RSTR_IOPBRST (1U << RCC_APB2RSTR_IOPBRST_BIT)
#define RCC_APB2RSTR_IOPARST (1U << RCC_APB2RSTR_IOPARST_BIT)
#define RCC_APB2RSTR_AFIORST (1U << RCC_APB2RSTR_AFIORST_BIT)



#define RCC_APB1RSTR_DACRST_BIT 29
#define RCC_APB1RSTR_PWRRST_BIT 28
#define RCC_APB1RSTR_BKPRST_BIT 27
#define RCC_APB1RSTR_CANRST_BIT 25
#define RCC_APB1RSTR_USBRST_BIT 23
#define RCC_APB1RSTR_I2C2RST_BIT 22
#define RCC_APB1RSTR_I2C1RST_BIT 21
#define RCC_APB1RSTR_UART5RST_BIT 20
#define RCC_APB1RSTR_UART4RST_BIT 19
#define RCC_APB1RSTR_USART3RST_BIT 18
#define RCC_APB1RSTR_USART2RST_BIT 17
#define RCC_APB1RSTR_SPI3RST_BIT 15
#define RCC_APB1RSTR_SPI2RST_BIT 14
#define RCC_APB1RSTR_WWDRST_BIT 11
#define RCC_APB1RSTR_TIM14RST_BIT 8
#define RCC_APB1RSTR_TIM13RST_BIT 7
#define RCC_APB1RSTR_TIM12RST_BIT 6
#define RCC_APB1RSTR_TIM7RST_BIT 5
#define RCC_APB1RSTR_TIM6RST_BIT 4
#define RCC_APB1RSTR_TIM5RST_BIT 3
#define RCC_APB1RSTR_TIM4RST_BIT 2
#define RCC_APB1RSTR_TIM3RST_BIT 1
#define RCC_APB1RSTR_TIM2RST_BIT 0

#define RCC_APB1RSTR_DACRST (1U << RCC_APB1RSTR_DACRST_BIT)
#define RCC_APB1RSTR_PWRRST (1U << RCC_APB1RSTR_PWRRST_BIT)
#define RCC_APB1RSTR_BKPRST (1U << RCC_APB1RSTR_BKPRST_BIT)
#define RCC_APB1RSTR_CANRST (1U << RCC_APB1RSTR_CANRST_BIT)
#define RCC_APB1RSTR_USBRST (1U << RCC_APB1RSTR_USBRST_BIT)
#define RCC_APB1RSTR_I2C2RST (1U << RCC_APB1RSTR_I2C2RST_BIT)
#define RCC_APB1RSTR_I2C1RST (1U << RCC_APB1RSTR_I2C1RST_BIT)
#define RCC_APB1RSTR_UART5RST (1U << RCC_APB1RSTR_UART5RST_BIT)
#define RCC_APB1RSTR_UART4RST (1U << RCC_APB1RSTR_UART4RST_BIT)
#define RCC_APB1RSTR_USART3RST (1U << RCC_APB1RSTR_USART3RST_BIT)
#define RCC_APB1RSTR_USART2RST (1U << RCC_APB1RSTR_USART2RST_BIT)
#define RCC_APB1RSTR_SPI3RST (1U << RCC_APB1RSTR_SPI3RST_BIT)
#define RCC_APB1RSTR_SPI2RST (1U << RCC_APB1RSTR_SPI2RST_BIT)
#define RCC_APB1RSTR_WWDRST (1U << RCC_APB1RSTR_WWDRST_BIT)
#define RCC_APB1RSTR_TIM14RST (1U << RCC_APB1RSTR_TIM14RST_BIT)
#define RCC_APB1RSTR_TIM13RST (1U << RCC_APB1RSTR_TIM13RST_BIT)
#define RCC_APB1RSTR_TIM12RST (1U << RCC_APB1RSTR_TIM12RST_BIT)
#define RCC_APB1RSTR_TIM7RST (1U << RCC_APB1RSTR_TIM7RST_BIT)
#define RCC_APB1RSTR_TIM6RST (1U << RCC_APB1RSTR_TIM6RST_BIT)
#define RCC_APB1RSTR_TIM5RST (1U << RCC_APB1RSTR_TIM5RST_BIT)
#define RCC_APB1RSTR_TIM4RST (1U << RCC_APB1RSTR_TIM4RST_BIT)
#define RCC_APB1RSTR_TIM3RST (1U << RCC_APB1RSTR_TIM3RST_BIT)
#define RCC_APB1RSTR_TIM2RST (1U << RCC_APB1RSTR_TIM2RST_BIT)



#define RCC_AHBENR_SDIOEN_BIT 10
#define RCC_AHBENR_FSMCEN_BIT 8
#define RCC_AHBENR_CRCEN_BIT 7
#define RCC_AHBENR_FLITFEN_BIT 4
#define RCC_AHBENR_SRAMEN_BIT 2
#define RCC_AHBENR_DMA2EN_BIT 1
#define RCC_AHBENR_DMA1EN_BIT 0

#define RCC_AHBENR_SDIOEN (1U << RCC_AHBENR_SDIOEN_BIT)
#define RCC_AHBENR_FSMCEN (1U << RCC_AHBENR_FSMCEN_BIT)
#define RCC_AHBENR_CRCEN (1U << RCC_AHBENR_CRCEN_BIT)
#define RCC_AHBENR_FLITFEN (1U << RCC_AHBENR_FLITFEN_BIT)
#define RCC_AHBENR_SRAMEN (1U << RCC_AHBENR_SRAMEN_BIT)
#define RCC_AHBENR_DMA2EN (1U << RCC_AHBENR_DMA2EN_BIT)
#define RCC_AHBENR_DMA1EN (1U << RCC_AHBENR_DMA1EN_BIT)



#define RCC_APB2ENR_TIM11EN_BIT 21
#define RCC_APB2ENR_TIM10EN_BIT 20
#define RCC_APB2ENR_TIM9EN_BIT 19
#define RCC_APB2ENR_ADC3EN_BIT 15
#define RCC_APB2ENR_USART1EN_BIT 14
#define RCC_APB2ENR_TIM8EN_BIT 13
#define RCC_APB2ENR_SPI1EN_BIT 12
#define RCC_APB2ENR_TIM1EN_BIT 11
#define RCC_APB2ENR_ADC2EN_BIT 10
#define RCC_APB2ENR_ADC1EN_BIT 9
#define RCC_APB2ENR_IOPGEN_BIT 8
#define RCC_APB2ENR_IOPFEN_BIT 7
#define RCC_APB2ENR_IOPEEN_BIT 6
#define RCC_APB2ENR_IOPDEN_BIT 5
#define RCC_APB2ENR_IOPCEN_BIT 4
#define RCC_APB2ENR_IOPBEN_BIT 3
#define RCC_APB2ENR_IOPAEN_BIT 2
#define RCC_APB2ENR_AFIOEN_BIT 0

#define RCC_APB2ENR_TIM11EN (1U << RCC_APB2ENR_TIM11EN_BIT)
#define RCC_APB2ENR_TIM10EN (1U << RCC_APB2ENR_TIM10EN_BIT)
#define RCC_APB2ENR_TIM9EN (1U << RCC_APB2ENR_TIM9EN_BIT)
#define RCC_APB2ENR_ADC3EN (1U << RCC_APB2ENR_ADC3EN_BIT)
#define RCC_APB2ENR_USART1EN (1U << RCC_APB2ENR_USART1EN_BIT)
#define RCC_APB2ENR_TIM8EN (1U << RCC_APB2ENR_TIM8EN_BIT)
#define RCC_APB2ENR_SPI1EN (1U << RCC_APB2ENR_SPI1EN_BIT)
#define RCC_APB2ENR_TIM1EN (1U << RCC_APB2ENR_TIM1EN_BIT)
#define RCC_APB2ENR_ADC2EN (1U << RCC_APB2ENR_ADC2EN_BIT)
#define RCC_APB2ENR_ADC1EN (1U << RCC_APB2ENR_ADC1EN_BIT)
#define RCC_APB2ENR_IOPGEN (1U << RCC_APB2ENR_IOPGEN_BIT)
#define RCC_APB2ENR_IOPFEN (1U << RCC_APB2ENR_IOPFEN_BIT)
#define RCC_APB2ENR_IOPEEN (1U << RCC_APB2ENR_IOPEEN_BIT)
#define RCC_APB2ENR_IOPDEN (1U << RCC_APB2ENR_IOPDEN_BIT)
#define RCC_APB2ENR_IOPCEN (1U << RCC_APB2ENR_IOPCEN_BIT)
#define RCC_APB2ENR_IOPBEN (1U << RCC_APB2ENR_IOPBEN_BIT)
#define RCC_APB2ENR_IOPAEN (1U << RCC_APB2ENR_IOPAEN_BIT)
#define RCC_APB2ENR_AFIOEN (1U << RCC_APB2ENR_AFIOEN_BIT)



#define RCC_APB1ENR_DACEN_BIT 29
#define RCC_APB1ENR_PWREN_BIT 28
#define RCC_APB1ENR_BKPEN_BIT 27
#define RCC_APB1ENR_CANEN_BIT 25
#define RCC_APB1ENR_USBEN_BIT 23
#define RCC_APB1ENR_I2C2EN_BIT 22
#define RCC_APB1ENR_I2C1EN_BIT 21
#define RCC_APB1ENR_UART5EN_BIT 20
#define RCC_APB1ENR_UART4EN_BIT 19
#define RCC_APB1ENR_USART3EN_BIT 18
#define RCC_APB1ENR_USART2EN_BIT 17
#define RCC_APB1ENR_SPI3EN_BIT 15
#define RCC_APB1ENR_SPI2EN_BIT 14
#define RCC_APB1ENR_WWDEN_BIT 11
#define RCC_APB1ENR_TIM14EN_BIT 8
#define RCC_APB1ENR_TIM13EN_BIT 7
#define RCC_APB1ENR_TIM12EN_BIT 6
#define RCC_APB1ENR_TIM7EN_BIT 5
#define RCC_APB1ENR_TIM6EN_BIT 4
#define RCC_APB1ENR_TIM5EN_BIT 3
#define RCC_APB1ENR_TIM4EN_BIT 2
#define RCC_APB1ENR_TIM3EN_BIT 1
#define RCC_APB1ENR_TIM2EN_BIT 0

#define RCC_APB1ENR_DACEN (1U << RCC_APB1ENR_DACEN_BIT)
#define RCC_APB1ENR_PWREN (1U << RCC_APB1ENR_PWREN_BIT)
#define RCC_APB1ENR_BKPEN (1U << RCC_APB1ENR_BKPEN_BIT)
#define RCC_APB1ENR_CANEN (1U << RCC_APB1ENR_CANEN_BIT)
#define RCC_APB1ENR_USBEN (1U << RCC_APB1ENR_USBEN_BIT)
#define RCC_APB1ENR_I2C2EN (1U << RCC_APB1ENR_I2C2EN_BIT)
#define RCC_APB1ENR_I2C1EN (1U << RCC_APB1ENR_I2C1EN_BIT)
#define RCC_APB1ENR_UART5EN (1U << RCC_APB1ENR_UART5EN_BIT)
#define RCC_APB1ENR_UART4EN (1U << RCC_APB1ENR_UART4EN_BIT)
#define RCC_APB1ENR_USART3EN (1U << RCC_APB1ENR_USART3EN_BIT)
#define RCC_APB1ENR_USART2EN (1U << RCC_APB1ENR_USART2EN_BIT)
#define RCC_APB1ENR_SPI3EN (1U << RCC_APB1ENR_SPI3EN_BIT)
#define RCC_APB1ENR_SPI2EN (1U << RCC_APB1ENR_SPI2EN_BIT)
#define RCC_APB1ENR_WWDEN (1U << RCC_APB1ENR_WWDEN_BIT)
#define RCC_APB1ENR_TIM14EN (1U << RCC_APB1ENR_TIM14EN_BIT)
#define RCC_APB1ENR_TIM13EN (1U << RCC_APB1ENR_TIM13EN_BIT)
#define RCC_APB1ENR_TIM12EN (1U << RCC_APB1ENR_TIM12EN_BIT)
#define RCC_APB1ENR_TIM7EN (1U << RCC_APB1ENR_TIM7EN_BIT)
#define RCC_APB1ENR_TIM6EN (1U << RCC_APB1ENR_TIM6EN_BIT)
#define RCC_APB1ENR_TIM5EN (1U << RCC_APB1ENR_TIM5EN_BIT)
#define RCC_APB1ENR_TIM4EN (1U << RCC_APB1ENR_TIM4EN_BIT)
#define RCC_APB1ENR_TIM3EN (1U << RCC_APB1ENR_TIM3EN_BIT)
#define RCC_APB1ENR_TIM2EN (1U << RCC_APB1ENR_TIM2EN_BIT)



#define RCC_BDCR_BDRST_BIT 16
#define RCC_BDCR_RTCEN_BIT 15
#define RCC_BDCR_LSEBYP_BIT 2
#define RCC_BDCR_LSERDY_BIT 1
#define RCC_BDCR_LSEON_BIT 0

#define RCC_BDCR_BDRST (1U << RCC_BDCR_BDRST_BIT)
#define RCC_BDCR_RTCEN (1U << RCC_BDCR_RTC_BIT)
#define RCC_BDCR_RTCSEL (0x3 << 8)
#define RCC_BDCR_RTCSEL_NONE (0x0 << 8)
#define RCC_BDCR_RTCSEL_LSE (0x1 << 8)
#define RCC_BDCR_RTCSEL_HSE (0x3 << 8)
#define RCC_BDCR_LSEBYP (1U << RCC_BDCR_LSEBYP_BIT)
#define RCC_BDCR_LSERDY (1U << RCC_BDCR_LSERDY_BIT)
#define RCC_BDCR_LSEON (1U << RCC_BDCR_LSEON_BIT)



#define RCC_CSR_LPWRRSTF_BIT 31
#define RCC_CSR_WWDGRSTF_BIT 30
#define RCC_CSR_IWDGRSTF_BIT 29
#define RCC_CSR_SFTRSTF_BIT 28
#define RCC_CSR_PORRSTF_BIT 27
#define RCC_CSR_PINRSTF_BIT 26
#define RCC_CSR_RMVF_BIT 24
#define RCC_CSR_LSIRDY_BIT 1
#define RCC_CSR_LSION_BIT 0

#define RCC_CSR_LPWRRSTF (1U << RCC_CSR_LPWRRSTF_BIT)
#define RCC_CSR_WWDGRSTF (1U << RCC_CSR_WWDGRSTF_BIT)
#define RCC_CSR_IWDGRSTF (1U << RCC_CSR_IWDGRSTF_BIT)
#define RCC_CSR_SFTRSTF (1U << RCC_CSR_SFTRSTF_BIT)
#define RCC_CSR_PORRSTF (1U << RCC_CSR_PORRSTF_BIT)
#define RCC_CSR_PINRSTF (1U << RCC_CSR_PINRSTF_BIT)
#define RCC_CSR_RMVF (1U << RCC_CSR_RMVF_BIT)
#define RCC_CSR_LSIRDY (1U << RCC_CSR_LSIRDY_BIT)
#define RCC_CSR_LSION (1U << RCC_CSR_LSION_BIT)
# 393 "./libmaple/stm32f1/include/series/rcc.h"
typedef enum rcc_clk_id {
    RCC_ADC1,
    RCC_ADC2,
    RCC_ADC3,
    RCC_AFIO,
    RCC_BKP,
    RCC_CRC,
    RCC_DAC,
    RCC_DMA1,
    RCC_DMA2,
    RCC_FLITF,
    RCC_FSMC,
    RCC_GPIOA,
    RCC_GPIOB,
    RCC_GPIOC,
    RCC_GPIOD,
    RCC_GPIOE,
    RCC_GPIOF,
    RCC_GPIOG,
    RCC_I2C1,
    RCC_I2C2,
    RCC_PWR,
    RCC_SDIO,
    RCC_SPI1,
    RCC_SPI2,
    RCC_SPI3,
    RCC_SRAM,
    RCC_TIMER1,
    RCC_TIMER2,
    RCC_TIMER3,
    RCC_TIMER4,
    RCC_TIMER5,
    RCC_TIMER6,
    RCC_TIMER7,
    RCC_TIMER8,
    RCC_TIMER9,
    RCC_TIMER10,
    RCC_TIMER11,
    RCC_TIMER12,
    RCC_TIMER13,
    RCC_TIMER14,
    RCC_USART1,
    RCC_USART2,
    RCC_USART3,
    RCC_UART4,
    RCC_UART5,
    RCC_USB,
    RCC_WWDG
} rcc_clk_id;





typedef enum rcc_pllsrc {
    RCC_PLLSRC_HSE = (0x1 << 16),
    RCC_PLLSRC_HSI_DIV_2 = (0x0 << 16)
} rcc_pllsrc;





typedef enum rcc_clk_domain {
    RCC_APB1,
    RCC_APB2,
    RCC_AHB
} rcc_clk_domain;





typedef enum rcc_prescaler {
    RCC_PRESCALER_AHB,
    RCC_PRESCALER_APB1,
    RCC_PRESCALER_APB2,
    RCC_PRESCALER_USB,
    RCC_PRESCALER_ADC
} rcc_prescaler;





typedef enum rcc_adc_divider {
    RCC_ADCPRE_PCLK_DIV_2 = 0x0 << 14,
    RCC_ADCPRE_PCLK_DIV_4 = 0x1 << 14,
    RCC_ADCPRE_PCLK_DIV_6 = 0x2 << 14,
    RCC_ADCPRE_PCLK_DIV_8 = 0x3 << 14,
} rcc_adc_divider;





typedef enum rcc_apb1_divider {
    RCC_APB1_HCLK_DIV_1 = 0x0 << 8,
    RCC_APB1_HCLK_DIV_2 = 0x4 << 8,
    RCC_APB1_HCLK_DIV_4 = 0x5 << 8,
    RCC_APB1_HCLK_DIV_8 = 0x6 << 8,
    RCC_APB1_HCLK_DIV_16 = 0x7 << 8,
} rcc_apb1_divider;





typedef enum rcc_apb2_divider {
    RCC_APB2_HCLK_DIV_1 = 0x0 << 11,
    RCC_APB2_HCLK_DIV_2 = 0x4 << 11,
    RCC_APB2_HCLK_DIV_4 = 0x5 << 11,
    RCC_APB2_HCLK_DIV_8 = 0x6 << 11,
    RCC_APB2_HCLK_DIV_16 = 0x7 << 11,
} rcc_apb2_divider;





typedef enum rcc_ahb_divider {
    RCC_AHB_SYSCLK_DIV_1 = 0x0 << 4,
    RCC_AHB_SYSCLK_DIV_2 = 0x8 << 4,
    RCC_AHB_SYSCLK_DIV_4 = 0x9 << 4,
    RCC_AHB_SYSCLK_DIV_8 = 0xA << 4,
    RCC_AHB_SYSCLK_DIV_16 = 0xB << 4,
    RCC_AHB_SYSCLK_DIV_32 = 0xC << 4,
    RCC_AHB_SYSCLK_DIV_64 = 0xD << 4,
    RCC_AHB_SYSCLK_DIV_128 = 0xD << 4,
    RCC_AHB_SYSCLK_DIV_256 = 0xE << 4,
    RCC_AHB_SYSCLK_DIV_512 = 0xF << 4,
} rcc_ahb_divider;




typedef enum rcc_clk {
    RCC_CLK_PLL = (uint16)((__builtin_offsetof(struct rcc_reg_map, CR) << 8) |
                              24),

    RCC_CLK_HSE = (uint16)((__builtin_offsetof(struct rcc_reg_map, CR) << 8) |
                              16),
    RCC_CLK_HSI = (uint16)((__builtin_offsetof(struct rcc_reg_map, CR) << 8) |
                              0),
    RCC_CLK_LSE = (uint16)((__builtin_offsetof(struct rcc_reg_map, BDCR) << 8) |
                              0),

    RCC_CLK_LSI = (uint16)((__builtin_offsetof(struct rcc_reg_map, CSR) << 8) |
                              0),

} rcc_clk;




typedef enum rcc_pll_multiplier {
    RCC_PLLMUL_2 = (0x0 << 18),
    RCC_PLLMUL_3 = (0x1 << 18),
    RCC_PLLMUL_4 = (0x2 << 18),
    RCC_PLLMUL_5 = (0x3 << 18),
    RCC_PLLMUL_6 = (0x4 << 18),
    RCC_PLLMUL_7 = (0x5 << 18),
    RCC_PLLMUL_8 = (0x6 << 18),
    RCC_PLLMUL_9 = (0x7 << 18),
    RCC_PLLMUL_10 = (0x8 << 18),
    RCC_PLLMUL_11 = (0x9 << 18),
    RCC_PLLMUL_12 = (0xA << 18),
    RCC_PLLMUL_13 = (0xB << 18),
    RCC_PLLMUL_14 = (0xC << 18),
    RCC_PLLMUL_15 = (0xD << 18),
    RCC_PLLMUL_16 = (0xE << 18),
} rcc_pll_multiplier;
# 573 "./libmaple/stm32f1/include/series/rcc.h"
typedef struct stm32f1_rcc_pll_data {
     rcc_pll_multiplier pll_mul;
} stm32f1_rcc_pll_data;
# 591 "./libmaple/stm32f1/include/series/rcc.h"
__attribute__((__deprecated__))
void rcc_clk_init(rcc_sysclk_src sysclk_src,
                  rcc_pllsrc pll_src,
                  rcc_pll_multiplier pll_mul);


}
# 54 "./libmaple/include/libmaple/rcc.h" 2
# 99 "./libmaple/include/libmaple/rcc.h"
extern void rcc_set_prescaler(rcc_prescaler prescaler, uint32 divider);



void rcc_switch_sysclk(rcc_sysclk_src sysclk_src);






typedef struct rcc_pll_cfg {
    rcc_pllsrc pllsrc;


    void *data;
} rcc_pll_cfg;
# 125 "./libmaple/include/libmaple/rcc.h"
extern void rcc_configure_pll(rcc_pll_cfg *pll_cfg);



void rcc_turn_on_clk(rcc_clk clock);
void rcc_turn_off_clk(rcc_clk clock);
int rcc_is_clk_on(rcc_clk clock);
int rcc_is_clk_ready(rcc_clk clock);







extern void rcc_clk_enable(rcc_clk_id id);
# 151 "./libmaple/include/libmaple/rcc.h"
extern void rcc_reset_dev(rcc_clk_id id);

rcc_clk_domain rcc_dev_clk(rcc_clk_id id);






static inline void rcc_enable_css() {
    ((struct rcc_reg_map*)0x40021000)->CR |= (1U << 19);
}




static inline void rcc_disable_css() {
    ((struct rcc_reg_map*)0x40021000)->CR &= ~(1U << 19);
}


}
# 47 "./libmaple/include/libmaple/gpio.h" 2







typedef struct gpio_dev {
    gpio_reg_map *regs;
    rcc_clk_id clk_id;




    exti_cfg exti_port;
} gpio_dev;





void gpio_init(gpio_dev *dev);
void gpio_init_all(void);

void gpio_set_mode(gpio_dev *dev, uint8 pin, gpio_pin_mode mode);





static inline exti_cfg gpio_exti_port(gpio_dev *dev) {
    return (exti_cfg)(EXTI_PA + (dev->clk_id - RCC_GPIOA));
}
# 90 "./libmaple/include/libmaple/gpio.h"
static inline void gpio_write_bit(gpio_dev *dev, uint8 pin, uint8 val) {
    val = !val;
    dev->regs->BSRR = (1U << pin) << (16 * val);
}
# 104 "./libmaple/include/libmaple/gpio.h"
static inline uint32 gpio_read_bit(gpio_dev *dev, uint8 pin) {
    return dev->regs->IDR & (1U << pin);
}






static inline void gpio_toggle_bit(gpio_dev *dev, uint8 pin) {
    dev->regs->ODR = dev->regs->ODR ^ (1U << pin);
}


}
# 38 "./wirish/include/wirish/wirish_types.h" 2
# 1 "./libmaple/include/libmaple/timer.h" 1
# 34 "./libmaple/include/libmaple/timer.h"
#define _LIBMAPLE_TIMER_H_ 


extern "C"{


# 1 "./libmaple/stm32f1/include/series/timer.h" 1
# 34 "./libmaple/stm32f1/include/series/timer.h"
#define _LIBMAPLE_STM32F1_TIMER_H_ 
# 43 "./libmaple/stm32f1/include/series/timer.h"
typedef struct timer_gen_reg_map {
    volatile uint32 CR1;
    volatile uint32 CR2;
    volatile uint32 SMCR;
    volatile uint32 DIER;
    volatile uint32 SR;
    volatile uint32 EGR;
    volatile uint32 CCMR1;
    volatile uint32 CCMR2;
    volatile uint32 CCER;
    volatile uint32 CNT;
    volatile uint32 PSC;
    volatile uint32 ARR;
    const uint32 RESERVED1;
    volatile uint32 CCR1;
    volatile uint32 CCR2;
    volatile uint32 CCR3;
    volatile uint32 CCR4;
    const uint32 RESERVED2;
    volatile uint32 DCR;
    volatile uint32 DMAR;
} timer_gen_reg_map;

struct timer_adv_reg_map;
struct timer_bas_reg_map;


#define TIMER1_BASE ((struct timer_adv_reg_map*)0x40012C00)

#define TIMER2_BASE ((struct timer_gen_reg_map*)0x40000000)

#define TIMER3_BASE ((struct timer_gen_reg_map*)0x40000400)

#define TIMER4_BASE ((struct timer_gen_reg_map*)0x40000800)

#define TIMER5_BASE ((struct timer_gen_reg_map*)0x40000C00)

#define TIMER6_BASE ((struct timer_bas_reg_map*)0x40001000)

#define TIMER7_BASE ((struct timer_bas_reg_map*)0x40001400)

#define TIMER8_BASE ((struct timer_adv_reg_map*)0x40013400)

#define TIMER9_BASE ((struct timer_gen_reg_map*)0x40014C00)

#define TIMER10_BASE ((struct timer_gen_reg_map*)0x40015000)

#define TIMER11_BASE ((struct timer_gen_reg_map*)0x40015400)

#define TIMER12_BASE ((struct timer_gen_reg_map*)0x40001800)

#define TIMER13_BASE ((struct timer_gen_reg_map*)0x40001C00)

#define TIMER14_BASE ((struct timer_gen_reg_map*)0x40002000)
# 107 "./libmaple/stm32f1/include/series/timer.h"
struct timer_dev;

extern struct timer_dev *TIMER1;
extern struct timer_dev *TIMER2;
extern struct timer_dev *TIMER3;
extern struct timer_dev *TIMER4;
# 41 "./libmaple/include/libmaple/timer.h" 2
# 1 "./libmaple/include/libmaple/libmaple.h" 1
# 33 "./libmaple/include/libmaple/libmaple.h"
#define _LIBMAPLE_LIBMAPLE_H_ 


extern "C" {




# 1 "./libmaple/include/libmaple/util.h" 1
# 33 "./libmaple/include/libmaple/util.h"
#define _LIBMAPLE_UTIL_H_ 


extern "C"{
# 46 "./libmaple/include/libmaple/util.h"
#define BIT(shift) (1UL << (shift))

#define BIT_MASK_SHIFT(mask,shift) ((mask) << (shift))

#define GET_BITS(x,m,n) ((((uint32)x) << (31 - (n))) >> ((31 - (n)) + (m)))

#define IS_POWER_OF_TWO(v) ((v) && !((v) & ((v) - 1)))





void __error(void);
void _fail(const char*, int, const char*);
void throb(void);





#define DEBUG_NONE 0
#define DEBUG_FAULT 1
#define DEBUG_ALL 2
# 84 "./libmaple/include/libmaple/util.h"
#define DEBUG_LEVEL DEBUG_ALL



#define ASSERT(exp) if (exp) { } else { _fail(__FILE__, __LINE__, #exp); }
# 98 "./libmaple/include/libmaple/util.h"
#define ASSERT_FAULT(exp) if (exp) { } else { _fail(__FILE__, __LINE__, #exp); }
# 108 "./libmaple/include/libmaple/util.h"
}
# 42 "./libmaple/include/libmaple/libmaple.h" 2
# 1 "./libmaple/include/libmaple/delay.h" 1
# 34 "./libmaple/include/libmaple/delay.h"
#define _LIBMAPLE_DELAY_H_ 


extern "C" {
# 48 "./libmaple/include/libmaple/delay.h"
static inline void delay_us(uint32 us) {
    us *= 12;


    us--;
    asm volatile("   mov r0, %[us]          \n\t"
                 "1: subs r0, #1            \n\t"
                 "   bhi 1b                 \n\t"
                 :
                 : [us] "r" (us)
                 : "r0");
}


}
# 43 "./libmaple/include/libmaple/libmaple.h" 2


}
# 42 "./libmaple/include/libmaple/timer.h" 2

# 1 "./libmaple/include/libmaple/nvic.h" 1
# 47 "./libmaple/include/libmaple/nvic.h"
#define _LIBMAPLE_NVIC_H_ 


extern "C"{






typedef struct nvic_reg_map {
    volatile uint32 ISER[8];

    uint32 RESERVED0[24];

    volatile uint32 ICER[8];

    uint32 RESERVED1[24];

    volatile uint32 ISPR[8];

    uint32 RESERVED2[24];

    volatile uint32 ICPR[8];

    uint32 RESERVED3[24];

    volatile uint32 IABR[8];

    uint32 RESERVED4[56];

    volatile uint8 IP[240];

    uint32 RESERVED5[644];

    volatile uint32 STIR;
} nvic_reg_map;


#define NVIC_BASE ((struct nvic_reg_map*)0xE000E100)
# 100 "./libmaple/include/libmaple/nvic.h"
# 1 "./libmaple/stm32f1/include/series/nvic.h" 1
# 33 "./libmaple/stm32f1/include/series/nvic.h"
#define _LIBMAPLE_STM32F1_NVIC_H_ 


extern "C"{
# 46 "./libmaple/stm32f1/include/series/nvic.h"
typedef enum nvic_irq_num {
    NVIC_NMI = -14,
    NVIC_HARDFAULT = -13,
    NVIC_MEM_MANAGE = -12,
    NVIC_BUS_FAULT = -11,

    NVIC_USAGE_FAULT = -10,

    NVIC_SVC = -5,
    NVIC_DEBUG_MON = -4,
    NVIC_PEND_SVC = -2,
    NVIC_SYSTICK = -1,
    NVIC_WWDG = 0,
    NVIC_PVD = 1,
    NVIC_TAMPER = 2,
    NVIC_RTC = 3,
    NVIC_FLASH = 4,
    NVIC_RCC = 5,
    NVIC_EXTI0 = 6,
    NVIC_EXTI1 = 7,
    NVIC_EXTI2 = 8,
    NVIC_EXTI3 = 9,
    NVIC_EXTI4 = 10,
    NVIC_DMA_CH1 = 11,
    NVIC_DMA_CH2 = 12,
    NVIC_DMA_CH3 = 13,
    NVIC_DMA_CH4 = 14,
    NVIC_DMA_CH5 = 15,
    NVIC_DMA_CH6 = 16,
    NVIC_DMA_CH7 = 17,
    NVIC_ADC_1_2 = 18,
    NVIC_USB_HP_CAN_TX = 19,
    NVIC_USB_LP_CAN_RX0 = 20,
    NVIC_CAN_RX1 = 21,
    NVIC_CAN_SCE = 22,
    NVIC_EXTI_9_5 = 23,
    NVIC_TIMER1_BRK_TIMER9 = 24,
    NVIC_TIMER1_UP_TIMER10 = 25,
    NVIC_TIMER1_TRG_COM_TIMER11 = 26,


    NVIC_TIMER1_CC = 27,
    NVIC_TIMER2 = 28,
    NVIC_TIMER3 = 29,
    NVIC_TIMER4 = 30,
    NVIC_I2C1_EV = 31,
    NVIC_I2C1_ER = 32,
    NVIC_I2C2_EV = 33,
    NVIC_I2C2_ER = 34,
    NVIC_SPI1 = 35,
    NVIC_SPI2 = 36,
    NVIC_USART1 = 37,
    NVIC_USART2 = 38,
    NVIC_USART3 = 39,
    NVIC_EXTI_15_10 = 40,
    NVIC_RTCALARM = 41,
    NVIC_USBWAKEUP = 42,

    NVIC_TIMER8_BRK_TIMER12 = 43,
    NVIC_TIMER8_UP_TIMER13 = 44,
    NVIC_TIMER8_TRG_COM_TIMER14 = 45,


    NVIC_TIMER8_CC = 46,
    NVIC_ADC3 = 47,
    NVIC_FSMC = 48,
    NVIC_SDIO = 49,
    NVIC_TIMER5 = 50,
    NVIC_SPI3 = 51,
    NVIC_UART4 = 52,
    NVIC_UART5 = 53,
    NVIC_TIMER6 = 54,
    NVIC_TIMER7 = 55,
    NVIC_DMA2_CH1 = 56,
    NVIC_DMA2_CH2 = 57,
    NVIC_DMA2_CH3 = 58,
    NVIC_DMA2_CH_4_5 = 59,


    NVIC_TIMER1_BRK =
        NVIC_TIMER1_BRK_TIMER9,



    NVIC_TIMER1_UP =
        NVIC_TIMER1_UP_TIMER10,



    NVIC_TIMER1_TRG_COM =
        NVIC_TIMER1_TRG_COM_TIMER11,





    NVIC_TIMER8_BRK =
        NVIC_TIMER8_BRK_TIMER12,



    NVIC_TIMER8_UP =
        NVIC_TIMER8_UP_TIMER13,


    NVIC_TIMER8_TRG_COM =
        NVIC_TIMER8_TRG_COM_TIMER14,




} nvic_irq_num;

static inline void nvic_irq_disable_all(void) {

    ((struct nvic_reg_map*)0xE000E100)->ICER[0] = 0xFFFFFFFF;
    ((struct nvic_reg_map*)0xE000E100)->ICER[1] = 0xFFFFFFFF;




}


}
# 101 "./libmaple/include/libmaple/nvic.h" 2

void nvic_init(uint32 address, uint32 offset);
void nvic_set_vector_table(uint32 address, uint32 offset);
void nvic_irq_set_priority(nvic_irq_num irqn, uint8 priority);
void nvic_sys_reset();




static inline void nvic_globalirq_enable() {
    asm volatile("cpsie i");
}




static inline void nvic_globalirq_disable() {
    asm volatile("cpsid i");
}





static inline void nvic_irq_enable(nvic_irq_num irq_num) {
    if (irq_num < 0) {
        return;
    }
    ((struct nvic_reg_map*)0xE000E100)->ISER[irq_num / 32] = (1UL << (irq_num % 32));
}





static inline void nvic_irq_disable(nvic_irq_num irq_num) {
    if (irq_num < 0) {
        return;
    }
    ((struct nvic_reg_map*)0xE000E100)->ICER[irq_num / 32] = (1UL << (irq_num % 32));
}







static inline void nvic_irq_disable_all(void);


}
# 44 "./libmaple/include/libmaple/timer.h" 2
# 1 "./libmaple/include/libmaple/bitband.h" 1
# 34 "./libmaple/include/libmaple/bitband.h"
#define _LIBMAPLE_BITBAND_H_ 


extern "C" {




#define BB_SRAM_REF 0x20000000
#define BB_SRAM_BASE 0x22000000
#define BB_PERI_REF 0x40000000
#define BB_PERI_BASE 0x42000000

static inline volatile uint32* __bb_addr(volatile void*,
                                         uint32,
                                         uint32,
                                         uint32);







static inline volatile uint32* bb_sramp(volatile void *address, uint32 bit) {
    return __bb_addr(address, bit, 0x22000000, 0x20000000);
}







static inline uint8 bb_sram_get_bit(volatile void *address, uint32 bit) {
    return *bb_sramp(address, bit);
}







static inline void bb_sram_set_bit(volatile void *address,
                                   uint32 bit,
                                   uint8 val) {
    *bb_sramp(address, bit) = val;
}







static inline volatile uint32* bb_perip(volatile void *address, uint32 bit) {
    return __bb_addr(address, bit, 0x42000000, 0x40000000);
}







static inline uint8 bb_peri_get_bit(volatile void *address, uint32 bit) {
    return *bb_perip(address, bit);
}







static inline void bb_peri_set_bit(volatile void *address,
                                   uint32 bit,
                                   uint8 val) {
    *bb_perip(address, bit) = val;
}

static inline volatile uint32* __bb_addr(volatile void *address,
                                         uint32 bit,
                                         uint32 bb_base,
                                         uint32 bb_ref) {
    return (volatile uint32*)(bb_base + ((uint32)address - bb_ref) * 32 +
                              bit * 4);
}


}
# 45 "./libmaple/include/libmaple/timer.h" 2






typedef struct timer_adv_reg_map {
    volatile uint32 CR1;
    volatile uint32 CR2;
    volatile uint32 SMCR;
    volatile uint32 DIER;
    volatile uint32 SR;
    volatile uint32 EGR;
    volatile uint32 CCMR1;
    volatile uint32 CCMR2;
    volatile uint32 CCER;
    volatile uint32 CNT;
    volatile uint32 PSC;
    volatile uint32 ARR;
    volatile uint32 RCR;
    volatile uint32 CCR1;
    volatile uint32 CCR2;
    volatile uint32 CCR3;
    volatile uint32 CCR4;
    volatile uint32 BDTR;
    volatile uint32 DCR;
    volatile uint32 DMAR;
} timer_adv_reg_map;







typedef struct timer_bas_reg_map {
    volatile uint32 CR1;
    volatile uint32 CR2;
    const uint32 RESERVED1;
    volatile uint32 DIER;
    volatile uint32 SR;
    volatile uint32 EGR;
    const uint32 RESERVED2;
    const uint32 RESERVED3;
    const uint32 RESERVED4;
    volatile uint32 CNT;
    volatile uint32 PSC;
    volatile uint32 ARR;
} timer_bas_reg_map;
# 105 "./libmaple/include/libmaple/timer.h"
typedef union timer_reg_map {
    timer_adv_reg_map *adv;
    timer_gen_reg_map *gen;
    timer_bas_reg_map *bas;
} timer_reg_map;
# 118 "./libmaple/include/libmaple/timer.h"
typedef enum timer_type {
    TIMER_ADVANCED,
    TIMER_GENERAL,
    TIMER_BASIC,
} timer_type;


typedef struct timer_dev {
    timer_reg_map regs;
    rcc_clk_id clk_id;
    timer_type type;
    voidFuncPtr handlers[];



} timer_dev;


extern timer_dev *TIMER1;


extern timer_dev *TIMER2;


extern timer_dev *TIMER3;


extern timer_dev *TIMER4;
# 184 "./libmaple/include/libmaple/timer.h"
#define TIMER_CR1_ARPE_BIT 7
#define TIMER_CR1_DIR_BIT 4
#define TIMER_CR1_OPM_BIT 3
#define TIMER_CR1_URS_BIT 2
#define TIMER_CR1_UDIS_BIT 1
#define TIMER_CR1_CEN_BIT 0

#define TIMER_CR1_CKD (0x3 << 8)
#define TIMER_CR1_CKD_1TCKINT (0x0 << 8)
#define TIMER_CR1_CKD_2TCKINT (0x1 << 8)
#define TIMER_CR1_CKD_4TICKINT (0x2 << 8)
#define TIMER_CR1_ARPE (1U << TIMER_CR1_ARPE_BIT)
#define TIMER_CR1_CKD_CMS (0x3 << 5)
#define TIMER_CR1_CKD_CMS_EDGE (0x0 << 5)
#define TIMER_CR1_CKD_CMS_CENTER1 (0x1 << 5)
#define TIMER_CR1_CKD_CMS_CENTER2 (0x2 << 5)
#define TIMER_CR1_CKD_CMS_CENTER3 (0x3 << 5)
#define TIMER_CR1_DIR (1U << TIMER_CR1_DIR_BIT)
#define TIMER_CR1_OPM (1U << TIMER_CR1_OPM_BIT)
#define TIMER_CR1_URS (1U << TIMER_CR1_URS_BIT)
#define TIMER_CR1_UDIS (1U << TIMER_CR1_UDIS_BIT)
#define TIMER_CR1_CEN (1U << TIMER_CR1_CEN_BIT)



#define TIMER_CR2_OIS4_BIT 14
#define TIMER_CR2_OIS3N_BIT 13
#define TIMER_CR2_OIS3_BIT 12
#define TIMER_CR2_OIS2N_BIT 11
#define TIMER_CR2_OIS2_BIT 10
#define TIMER_CR2_OIS1N_BIT 9
#define TIMER_CR2_OIS1_BIT 8
#define TIMER_CR2_TI1S_BIT 7
#define TIMER_CR2_CCDS_BIT 3
#define TIMER_CR2_CCUS_BIT 2
#define TIMER_CR2_CCPC_BIT 0

#define TIMER_CR2_OIS4 (1U << TIMER_CR2_OIS4_BIT)
#define TIMER_CR2_OIS3N (1U << TIMER_CR2_OIS3N_BIT)
#define TIMER_CR2_OIS3 (1U << TIMER_CR2_OIS3_BIT)
#define TIMER_CR2_OIS2N (1U << TIMER_CR2_OIS2N_BIT)
#define TIMER_CR2_OIS2 (1U << TIMER_CR2_OIS2_BIT)
#define TIMER_CR2_OIS1N (1U << TIMER_CR2_OIS1N_BIT)
#define TIMER_CR2_OIS1 (1U << TIMER_CR2_OIS1_BIT)
#define TIMER_CR2_TI1S (1U << TIMER_CR2_TI1S_BIT)
#define TIMER_CR2_MMS (0x7 << 4)
#define TIMER_CR2_MMS_RESET (0x0 << 4)
#define TIMER_CR2_MMS_ENABLE (0x1 << 4)
#define TIMER_CR2_MMS_UPDATE (0x2 << 4)
#define TIMER_CR2_MMS_COMPARE_PULSE (0x3 << 4)
#define TIMER_CR2_MMS_COMPARE_OC1REF (0x4 << 4)
#define TIMER_CR2_MMS_COMPARE_OC2REF (0x5 << 4)
#define TIMER_CR2_MMS_COMPARE_OC3REF (0x6 << 4)
#define TIMER_CR2_MMS_COMPARE_OC4REF (0x7 << 4)
#define TIMER_CR2_CCDS (1U << TIMER_CR2_CCDS_BIT)
#define TIMER_CR2_CCUS (1U << TIMER_CR2_CCUS_BIT)
#define TIMER_CR2_CCPC (1U << TIMER_CR2_CCPC_BIT)



#define TIMER_SMCR_ETP_BIT 15
#define TIMER_SMCR_ECE_BIT 14
#define TIMER_SMCR_MSM_BIT 7

#define TIMER_SMCR_ETP (1U << TIMER_SMCR_ETP_BIT)
#define TIMER_SMCR_ECE (1U << TIMER_SMCR_ECE_BIT)
#define TIMER_SMCR_ETPS (0x3 << 12)
#define TIMER_SMCR_ETPS_OFF (0x0 << 12)
#define TIMER_SMCR_ETPS_DIV2 (0x1 << 12)
#define TIMER_SMCR_ETPS_DIV4 (0x2 << 12)
#define TIMER_SMCR_ETPS_DIV8 (0x3 << 12)
#define TIMER_SMCR_ETF (0xF << 12)
#define TIMER_SMCR_MSM (1U << TIMER_SMCR_MSM_BIT)
#define TIMER_SMCR_TS (0x3 << 4)
#define TIMER_SMCR_TS_ITR0 (0x0 << 4)
#define TIMER_SMCR_TS_ITR1 (0x1 << 4)
#define TIMER_SMCR_TS_ITR2 (0x2 << 4)
#define TIMER_SMCR_TS_ITR3 (0x3 << 4)
#define TIMER_SMCR_TS_TI1F_ED (0x4 << 4)
#define TIMER_SMCR_TS_TI1FP1 (0x5 << 4)
#define TIMER_SMCR_TS_TI2FP2 (0x6 << 4)
#define TIMER_SMCR_TS_ETRF (0x7 << 4)
#define TIMER_SMCR_SMS 0x3
#define TIMER_SMCR_SMS_DISABLED 0x0
#define TIMER_SMCR_SMS_ENCODER1 0x1
#define TIMER_SMCR_SMS_ENCODER2 0x2
#define TIMER_SMCR_SMS_ENCODER3 0x3
#define TIMER_SMCR_SMS_RESET 0x4
#define TIMER_SMCR_SMS_GATED 0x5
#define TIMER_SMCR_SMS_TRIGGER 0x6
#define TIMER_SMCR_SMS_EXTERNAL 0x7



#define TIMER_DIER_TDE_BIT 14
#define TIMER_DIER_COMDE_BIT 13
#define TIMER_DIER_CC4DE_BIT 12
#define TIMER_DIER_CC3DE_BIT 11
#define TIMER_DIER_CC2DE_BIT 10
#define TIMER_DIER_CC1DE_BIT 9
#define TIMER_DIER_UDE_BIT 8
#define TIMER_DIER_BIE_BIT 7
#define TIMER_DIER_TIE_BIT 6
#define TIMER_DIER_COMIE_BIT 5
#define TIMER_DIER_CC4IE_BIT 4
#define TIMER_DIER_CC3IE_BIT 3
#define TIMER_DIER_CC2IE_BIT 2
#define TIMER_DIER_CC1IE_BIT 1
#define TIMER_DIER_UIE_BIT 0

#define TIMER_DIER_TDE (1U << TIMER_DIER_TDE_BIT)
#define TIMER_DIER_COMDE (1U << TIMER_DIER_COMDE_BIT)
#define TIMER_DIER_CC4DE (1U << TIMER_DIER_CC4DE_BIT)
#define TIMER_DIER_CC3DE (1U << TIMER_DIER_CC3DE_BIT)
#define TIMER_DIER_CC2DE (1U << TIMER_DIER_CC2DE_BIT)
#define TIMER_DIER_CC1DE (1U << TIMER_DIER_CC1DE_BIT)
#define TIMER_DIER_UDE (1U << TIMER_DIER_UDE_BIT)
#define TIMER_DIER_BIE (1U << TIMER_DIER_BIE_BIT)
#define TIMER_DIER_TIE (1U << TIMER_DIER_TIE_BIT)
#define TIMER_DIER_COMIE (1U << TIMER_DIER_COMIE_BIT)
#define TIMER_DIER_CC4IE (1U << TIMER_DIER_CC4IE_BIT)
#define TIMER_DIER_CC3IE (1U << TIMER_DIER_CC3IE_BIT)
#define TIMER_DIER_CC2IE (1U << TIMER_DIER_CC2IE_BIT)
#define TIMER_DIER_CC1IE (1U << TIMER_DIER_CC1IE_BIT)
#define TIMER_DIER_UIE (1U << TIMER_DIER_UIE_BIT)



#define TIMER_SR_CC4OF_BIT 12
#define TIMER_SR_CC3OF_BIT 11
#define TIMER_SR_CC2OF_BIT 10
#define TIMER_SR_CC1OF_BIT 9
#define TIMER_SR_BIF_BIT 7
#define TIMER_SR_TIF_BIT 6
#define TIMER_SR_COMIF_BIT 5
#define TIMER_SR_CC4IF_BIT 4
#define TIMER_SR_CC3IF_BIT 3
#define TIMER_SR_CC2IF_BIT 2
#define TIMER_SR_CC1IF_BIT 1
#define TIMER_SR_UIF_BIT 0

#define TIMER_SR_CC4OF (1U << TIMER_SR_CC4OF_BIT)
#define TIMER_SR_CC3OF (1U << TIMER_SR_CC3OF_BIT)
#define TIMER_SR_CC2OF (1U << TIMER_SR_CC2OF_BIT)
#define TIMER_SR_CC1OF (1U << TIMER_SR_CC1OF_BIT)
#define TIMER_SR_BIF (1U << TIMER_SR_BIF_BIT)
#define TIMER_SR_TIF (1U << TIMER_SR_TIF_BIT)
#define TIMER_SR_COMIF (1U << TIMER_SR_COMIF_BIT)
#define TIMER_SR_CC4IF (1U << TIMER_SR_CC4IF_BIT)
#define TIMER_SR_CC3IF (1U << TIMER_SR_CC3IF_BIT)
#define TIMER_SR_CC2IF (1U << TIMER_SR_CC2IF_BIT)
#define TIMER_SR_CC1IF (1U << TIMER_SR_CC1IF_BIT)
#define TIMER_SR_UIF (1U << TIMER_SR_UIF_BIT)



#define TIMER_EGR_BG_BIT 7
#define TIMER_EGR_TG_BIT 6
#define TIMER_EGR_COMG_BIT 5
#define TIMER_EGR_CC4G_BIT 4
#define TIMER_EGR_CC3G_BIT 3
#define TIMER_EGR_CC2G_BIT 2
#define TIMER_EGR_CC1G_BIT 1
#define TIMER_EGR_UG_BIT 0

#define TIMER_EGR_BG (1U << TIMER_EGR_BG_BIT)
#define TIMER_EGR_TG (1U << TIMER_EGR_TG_BIT)
#define TIMER_EGR_COMG (1U << TIMER_EGR_COMG_BIT)
#define TIMER_EGR_CC4G (1U << TIMER_EGR_CC4G_BIT)
#define TIMER_EGR_CC3G (1U << TIMER_EGR_CC3G_BIT)
#define TIMER_EGR_CC2G (1U << TIMER_EGR_CC2G_BIT)
#define TIMER_EGR_CC1G (1U << TIMER_EGR_CC1G_BIT)
#define TIMER_EGR_UG (1U << TIMER_EGR_UG_BIT)



#define TIMER_CCMR_CCS_OUTPUT 0x0
#define TIMER_CCMR_CCS_INPUT_TI1 0x1
#define TIMER_CCMR_CCS_INPUT_TI2 0x2
#define TIMER_CCMR_CCS_INPUT_TRC 0x3



#define TIMER_CCMR1_OC2CE_BIT 15
#define TIMER_CCMR1_OC2PE_BIT 11
#define TIMER_CCMR1_OC2FE_BIT 10
#define TIMER_CCMR1_OC1CE_BIT 7
#define TIMER_CCMR1_OC1PE_BIT 3
#define TIMER_CCMR1_OC1FE_BIT 2

#define TIMER_CCMR1_OC2CE (1U << TIMER_CCMR1_OC2CE_BIT)
#define TIMER_CCMR1_OC2M (0x3 << 12)
#define TIMER_CCMR1_IC2F (0xF << 12)
#define TIMER_CCMR1_OC2PE (1U << TIMER_CCMR1_OC2PE_BIT)
#define TIMER_CCMR1_OC2FE (1U << TIMER_CCMR1_OC2FE_BIT)
#define TIMER_CCMR1_IC2PSC (0x3 << 10)
#define TIMER_CCMR1_CC2S (0x3 << 8)
#define TIMER_CCMR1_CC2S_OUTPUT (TIMER_CCMR_CCS_OUTPUT << 8)
#define TIMER_CCMR1_CC2S_INPUT_TI1 (TIMER_CCMR_CCS_INPUT_TI1 << 8)
#define TIMER_CCMR1_CC2S_INPUT_TI2 (TIMER_CCMR_CCS_INPUT_TI2 << 8)
#define TIMER_CCMR1_CC2S_INPUT_TRC (TIMER_CCMR_CCS_INPUT_TRC << 8)
#define TIMER_CCMR1_OC1CE (1U << TIMER_CCMR1_OC1CE_BIT)
#define TIMER_CCMR1_OC1M (0x3 << 4)
#define TIMER_CCMR1_IC1F (0xF << 4)
#define TIMER_CCMR1_OC1PE (1U << TIMER_CCMR1_OC1PE_BIT)
#define TIMER_CCMR1_OC1FE (1U << TIMER_CCMR1_OC1FE_BIT)
#define TIMER_CCMR1_IC1PSC (0x3 << 2)
#define TIMER_CCMR1_CC1S 0x3
#define TIMER_CCMR1_CC1S_OUTPUT TIMER_CCMR_CCS_OUTPUT
#define TIMER_CCMR1_CC1S_INPUT_TI1 TIMER_CCMR_CCS_INPUT_TI1
#define TIMER_CCMR1_CC1S_INPUT_TI2 TIMER_CCMR_CCS_INPUT_TI2
#define TIMER_CCMR1_CC1S_INPUT_TRC TIMER_CCMR_CCS_INPUT_TRC



#define TIMER_CCMR2_OC4CE_BIT 15
#define TIMER_CCMR2_OC4PE_BIT 11
#define TIMER_CCMR2_OC4FE_BIT 10
#define TIMER_CCMR2_OC3CE_BIT 7
#define TIMER_CCMR2_OC3PE_BIT 3
#define TIMER_CCMR2_OC3FE_BIT 2

#define TIMER_CCMR2_OC4CE (1U << TIMER_CCMR2_OC4CE_BIT)
#define TIMER_CCMR2_OC4M (0x3 << 12)
#define TIMER_CCMR2_IC4F (0xF << 12)
#define TIMER_CCMR2_OC4PE (1U << TIMER_CCMR2_OC4PE_BIT)
#define TIMER_CCMR2_OC4FE (1U << TIMER_CCMR2_OC4FE_BIT)
#define TIMER_CCMR2_IC4PSC (0x3 << 10)
#define TIMER_CCMR2_CC4S (0x3 << 8)
#define TIMER_CCMR2_CC4S_OUTPUT (TIMER_CCMR_CCS_OUTPUT << 8)
#define TIMER_CCMR2_CC4S_INPUT_TI1 (TIMER_CCMR_CCS_INPUT_TI1 << 8)
#define TIMER_CCMR2_CC4S_INPUT_TI2 (TIMER_CCMR_CCS_INPUT_TI2 << 8)
#define TIMER_CCMR2_CC4S_INPUT_TRC (TIMER_CCMR_CCS_INPUT_TRC << 8)
#define TIMER_CCMR2_OC3CE (1U << TIMER_CCMR2_OC3CE_BIT)
#define TIMER_CCMR2_OC3M (0x3 << 4)
#define TIMER_CCMR2_IC3F (0xF << 4)
#define TIMER_CCMR2_OC3PE (1U << TIMER_CCMR2_OC3PE_BIT)
#define TIMER_CCMR2_OC3FE (1U << TIMER_CCMR2_OC3FE_BIT)
#define TIMER_CCMR2_IC3PSC (0x3 << 2)
#define TIMER_CCMR2_CC3S 0x3
#define TIMER_CCMR2_CC3S_OUTPUT TIMER_CCMR_CCS_OUTPUT
#define TIMER_CCMR2_CC3S_INPUT_TI1 TIMER_CCMR_CCS_INPUT_TI1
#define TIMER_CCMR2_CC3S_INPUT_TI2 TIMER_CCMR_CCS_INPUT_TI2
#define TIMER_CCMR2_CC3S_INPUT_TRC TIMER_CCMR_CCS_INPUT_TRC



#define TIMER_CCER_CC4P_BIT 13
#define TIMER_CCER_CC4E_BIT 12
#define TIMER_CCER_CC3NP_BIT 11
#define TIMER_CCER_CC3NE_BIT 10
#define TIMER_CCER_CC3P_BIT 9
#define TIMER_CCER_CC3E_BIT 8
#define TIMER_CCER_CC2NP_BIT 7
#define TIMER_CCER_CC2NE_BIT 6
#define TIMER_CCER_CC2P_BIT 5
#define TIMER_CCER_CC2E_BIT 4
#define TIMER_CCER_CC1NP_BIT 3
#define TIMER_CCER_CC1NE_BIT 2
#define TIMER_CCER_CC1P_BIT 1
#define TIMER_CCER_CC1E_BIT 0

#define TIMER_CCER_CC4P (1U << TIMER_CCER_CC4P_BIT)
#define TIMER_CCER_CC4E (1U << TIMER_CCER_CC4E_BIT)
#define TIMER_CCER_CC3NP (1U << TIMER_CCER_CC3NP_BIT)
#define TIMER_CCER_CC3NE (1U << TIMER_CCER_CC3NE_BIT)
#define TIMER_CCER_CC3P (1U << TIMER_CCER_CC3P_BIT)
#define TIMER_CCER_CC3E (1U << TIMER_CCER_CC3E_BIT)
#define TIMER_CCER_CC2NP (1U << TIMER_CCER_CC2NP_BIT)
#define TIMER_CCER_CC2NE (1U << TIMER_CCER_CC2NE_BIT)
#define TIMER_CCER_CC2P (1U << TIMER_CCER_CC2P_BIT)
#define TIMER_CCER_CC2E (1U << TIMER_CCER_CC2E_BIT)
#define TIMER_CCER_CC1NP (1U << TIMER_CCER_CC1NP_BIT)
#define TIMER_CCER_CC1NE (1U << TIMER_CCER_CC1NE_BIT)
#define TIMER_CCER_CC1P (1U << TIMER_CCER_CC1P_BIT)
#define TIMER_CCER_CC1E (1U << TIMER_CCER_CC1E_BIT)



#define TIMER_BDTR_MOE_BIT 15
#define TIMER_BDTR_AOE_BIT 14
#define TIMER_BDTR_BKP_BIT 13
#define TIMER_BDTR_BKE_BIT 12
#define TIMER_BDTR_OSSR_BIT 11
#define TIMER_BDTR_OSSI_BIT 10

#define TIMER_BDTR_MOE (1U << TIMER_BDTR_MOE_BIT)
#define TIMER_BDTR_AOE (1U << TIMER_BDTR_AOE_BIT)
#define TIMER_BDTR_BKP (1U << TIMER_BDTR_BKP_BIT)
#define TIMER_BDTR_BKE (1U << TIMER_BDTR_BKE_BIT)
#define TIMER_BDTR_OSSR (1U << TIMER_BDTR_OSSR_BIT)
#define TIMER_BDTR_OSSI (1U << TIMER_BDTR_OSSI_BIT)
#define TIMER_BDTR_LOCK (0x3 << 8)
#define TIMER_BDTR_LOCK_OFF (0x0 << 8)
#define TIMER_BDTR_LOCK_LEVEL1 (0x1 << 8)
#define TIMER_BDTR_LOCK_LEVEL2 (0x2 << 8)
#define TIMER_BDTR_LOCK_LEVEL3 (0x3 << 8)
#define TIMER_BDTR_DTG 0xFF



#define TIMER_DCR_DBL (0x1F << 8)
#define TIMER_DCR_DBL_1_XFER (0x0 << 8)
#define TIMER_DCR_DBL_2_XFER (0x1 << 8)
#define TIMER_DCR_DBL_3_XFER (0x2 << 8)
#define TIMER_DCR_DBL_4_XFER (0x3 << 8)
#define TIMER_DCR_DBL_5_XFER (0x4 << 8)
#define TIMER_DCR_DBL_6_XFER (0x5 << 8)
#define TIMER_DCR_DBL_7_XFER (0x6 << 8)
#define TIMER_DCR_DBL_8_XFER (0x7 << 8)
#define TIMER_DCR_DBL_9_XFER (0x8 << 8)
#define TIMER_DCR_DBL_10_XFER (0x9 << 8)
#define TIMER_DCR_DBL_11_XFER (0xA << 8)
#define TIMER_DCR_DBL_12_XFER (0xB << 8)
#define TIMER_DCR_DBL_13_XFER (0xC << 8)
#define TIMER_DCR_DBL_14_XFER (0xD << 8)
#define TIMER_DCR_DBL_15_XFER (0xE << 8)
#define TIMER_DCR_DBL_16_XFER (0xF << 8)
#define TIMER_DCR_DBL_17_XFER (0x10 << 8)
#define TIMER_DCR_DBL_18_XFER (0x11 << 8)
#define TIMER_DCR_DBA 0x1F
#define TIMER_DCR_DBA_CR1 0x0
#define TIMER_DCR_DBA_CR2 0x1
#define TIMER_DCR_DBA_SMCR 0x2
#define TIMER_DCR_DBA_DIER 0x3
#define TIMER_DCR_DBA_SR 0x4
#define TIMER_DCR_DBA_EGR 0x5
#define TIMER_DCR_DBA_CCMR1 0x6
#define TIMER_DCR_DBA_CCMR2 0x7
#define TIMER_DCR_DBA_CCER 0x8
#define TIMER_DCR_DBA_CNT 0x9
#define TIMER_DCR_DBA_PSC 0xA
#define TIMER_DCR_DBA_ARR 0xB
#define TIMER_DCR_DBA_RCR 0xC
#define TIMER_DCR_DBA_CCR1 0xD
#define TIMER_DCR_DBA_CCR2 0xE
#define TIMER_DCR_DBA_CCR3 0xF
#define TIMER_DCR_DBA_CCR4 0x10
#define TIMER_DCR_DBA_BDTR 0x11
#define TIMER_DCR_DBA_DCR 0x12
#define TIMER_DCR_DBA_DMAR 0x13
# 535 "./libmaple/include/libmaple/timer.h"
typedef enum timer_mode {



    TIMER_DISABLED,


    TIMER_PWM,







    TIMER_OUTPUT_COMPARE,






} timer_mode;


typedef enum timer_channel {
    TIMER_CH1 = 1,
    TIMER_CH2 = 2,
    TIMER_CH3 = 3,
    TIMER_CH4 = 4
} timer_channel;
# 577 "./libmaple/include/libmaple/timer.h"
void timer_init(timer_dev *dev);
void timer_disable(timer_dev *dev);
void timer_set_mode(timer_dev *dev, uint8 channel, timer_mode mode);
void timer_foreach(void (*fn)(timer_dev*));
int timer_has_cc_channel(timer_dev *dev, uint8 channel);
# 592 "./libmaple/include/libmaple/timer.h"
typedef enum timer_interrupt_id {
    TIMER_UPDATE_INTERRUPT,
    TIMER_CC1_INTERRUPT,
    TIMER_CC2_INTERRUPT,
    TIMER_CC3_INTERRUPT,
    TIMER_CC4_INTERRUPT,
    TIMER_COM_INTERRUPT,
    TIMER_TRG_INTERRUPT,
    TIMER_BREAK_INTERRUPT,
} timer_interrupt_id;

void timer_attach_interrupt(timer_dev *dev,
                            uint8 interrupt,
                            voidFuncPtr handler);
void timer_detach_interrupt(timer_dev *dev, uint8 interrupt);




static inline void timer_init_all(void) {
    timer_foreach(timer_init);
}




static inline void timer_disable_all(void) {
    timer_foreach(timer_disable);
}
# 629 "./libmaple/include/libmaple/timer.h"
static inline void timer_pause(timer_dev *dev) {
    *bb_perip(&(dev->regs).bas->CR1, 0) = 0;
}
# 640 "./libmaple/include/libmaple/timer.h"
static inline void timer_resume(timer_dev *dev) {
    *bb_perip(&(dev->regs).bas->CR1, 0) = 1;
}
# 652 "./libmaple/include/libmaple/timer.h"
static inline uint16 timer_get_count(timer_dev *dev) {
    return (uint16)(dev->regs).bas->CNT;
}






static inline void timer_set_count(timer_dev *dev, uint16 value) {
    (dev->regs).bas->CNT = value;
}
# 677 "./libmaple/include/libmaple/timer.h"
static inline uint16 timer_get_prescaler(timer_dev *dev) {
    return (uint16)(dev->regs).bas->PSC;
}
# 691 "./libmaple/include/libmaple/timer.h"
static inline void timer_set_prescaler(timer_dev *dev, uint16 psc) {
    (dev->regs).bas->PSC = psc;
}





static inline uint16 timer_get_reload(timer_dev *dev) {
    return (uint16)(dev->regs).bas->ARR;
}







static inline void timer_set_reload(timer_dev *dev, uint16 arr) {
    (dev->regs).bas->ARR = arr;
}






static inline uint16 timer_get_compare(timer_dev *dev, uint8 channel) {
    volatile uint32 *ccr = &(dev->regs).gen->CCR1 + (channel - 1);
    return *ccr;
}







static inline void timer_set_compare(timer_dev *dev,
                                     uint8 channel,
                                     uint16 value) {
    volatile uint32 *ccr = &(dev->regs).gen->CCR1 + (channel - 1);
    *ccr = value;
}
# 746 "./libmaple/include/libmaple/timer.h"
static inline void timer_generate_update(timer_dev *dev) {
    *bb_perip(&(dev->regs).bas->EGR, 0) = 1;
}





static inline void timer_dma_enable_trg_req(timer_dev *dev) {
    *bb_perip(&(dev->regs).gen->DIER, 14) = 1;
}





static inline void timer_dma_disable_trg_req(timer_dev *dev) {
    *bb_perip(&(dev->regs).gen->DIER, 14) = 0;
}






static inline void timer_dma_enable_req(timer_dev *dev, uint8 channel) {
    *bb_perip(&(dev->regs).gen->DIER, channel + 8) = 1;
}






static inline void timer_dma_disable_req(timer_dev *dev, uint8 channel) {
    *bb_perip(&(dev->regs).gen->DIER, channel + 8) = 0;
}
# 792 "./libmaple/include/libmaple/timer.h"
static inline void timer_enable_irq(timer_dev *dev, uint8 interrupt) {
    *bb_perip(&(dev->regs).adv->DIER, interrupt) = 1;
}
# 804 "./libmaple/include/libmaple/timer.h"
static inline void timer_disable_irq(timer_dev *dev, uint8 interrupt) {
    *bb_perip(&(dev->regs).adv->DIER, interrupt) = 0;
}
# 819 "./libmaple/include/libmaple/timer.h"
static inline void timer_cc_enable(timer_dev *dev, uint8 channel) {
    *bb_perip(&(dev->regs).gen->CCER, 4 * (channel - 1)) = 1;
}







static inline void timer_cc_disable(timer_dev *dev, uint8 channel) {
    *bb_perip(&(dev->regs).gen->CCER, 4 * (channel - 1)) = 0;
}
# 840 "./libmaple/include/libmaple/timer.h"
static inline uint8 timer_cc_get_pol(timer_dev *dev, uint8 channel) {
    return *bb_perip(&(dev->regs).gen->CCER, 4 * (channel - 1) + 1);
}
# 861 "./libmaple/include/libmaple/timer.h"
static inline void timer_cc_set_pol(timer_dev *dev, uint8 channel, uint8 pol) {
    *bb_perip(&(dev->regs).gen->CCER, 4 * (channel - 1) + 1) = pol;
}







static inline uint8 timer_dma_get_burst_len(timer_dev *dev) {
    uint32 dbl = ((dev->regs).gen->DCR & (0x1F << 8)) >> 8;
    return dbl + 1;
}







static inline void timer_dma_set_burst_len(timer_dev *dev, uint8 length) {
    uint32 tmp = (dev->regs).gen->DCR;
    tmp &= ~(0x1F << 8);
    tmp |= (length - 1) << 8;
    (dev->regs).gen->DCR = tmp;
}






typedef enum timer_dma_base_addr {

    TIMER_DMA_BASE_CR1 = 0x0,

    TIMER_DMA_BASE_CR2 = 0x1,

    TIMER_DMA_BASE_SMCR = 0x2,

    TIMER_DMA_BASE_DIER = 0x3,

    TIMER_DMA_BASE_SR = 0x4,

    TIMER_DMA_BASE_EGR = 0x5,

    TIMER_DMA_BASE_CCMR1 = 0x6,

    TIMER_DMA_BASE_CCMR2 = 0x7,

    TIMER_DMA_BASE_CCER = 0x8,

    TIMER_DMA_BASE_CNT = 0x9,

    TIMER_DMA_BASE_PSC = 0xA,

    TIMER_DMA_BASE_ARR = 0xB,

    TIMER_DMA_BASE_RCR = 0xC,

    TIMER_DMA_BASE_CCR1 = 0xD,

    TIMER_DMA_BASE_CCR2 = 0xE,

    TIMER_DMA_BASE_CCR3 = 0xF,

    TIMER_DMA_BASE_CCR4 = 0x10,

    TIMER_DMA_BASE_BDTR = 0x11,

    TIMER_DMA_BASE_DCR = 0x12,

    TIMER_DMA_BASE_DMAR = 0x13,
} timer_dma_base_addr;
# 945 "./libmaple/include/libmaple/timer.h"
static inline timer_dma_base_addr timer_dma_get_base_addr(timer_dev *dev) {
    uint32 dcr = (dev->regs).gen->DCR;
    return (timer_dma_base_addr)(dcr & 0x1F);
}
# 958 "./libmaple/include/libmaple/timer.h"
static inline void timer_dma_set_base_addr(timer_dev *dev,
                                           timer_dma_base_addr dma_base) {
    uint32 tmp = (dev->regs).gen->DCR;
    tmp &= ~0x1F;
    tmp |= dma_base;
    (dev->regs).gen->DCR = tmp;
}




typedef enum timer_oc_mode {



    TIMER_OC_MODE_FROZEN = 0 << 4,



    TIMER_OC_MODE_ACTIVE_ON_MATCH = 1 << 4,



    TIMER_OC_MODE_INACTIVE_ON_MATCH = 2 << 4,



    TIMER_OC_MODE_TOGGLE = 3 << 4,

    TIMER_OC_MODE_FORCE_INACTIVE = 4 << 4,

    TIMER_OC_MODE_FORCE_ACTIVE = 5 << 4,





    TIMER_OC_MODE_PWM_1 = 6 << 4,





    TIMER_OC_MODE_PWM_2 = 7 << 4,
} timer_oc_mode;





typedef enum timer_oc_mode_flags {
    TIMER_OC_CE = 1U << 7,
    TIMER_OC_PE = 1U << 3,
    TIMER_OC_FE = 1U << 2,
} timer_oc_mode_flags;
# 1024 "./libmaple/include/libmaple/timer.h"
static inline void timer_oc_set_mode(timer_dev *dev,
                                     uint8 channel,
                                     timer_oc_mode mode,
                                     uint8 flags) {

    volatile uint32 *ccmr = &(dev->regs).gen->CCMR1 + (((channel - 1) >> 1) & 1);

    uint8 shift = 8 * (1 - (channel & 1));

    uint32 tmp = *ccmr;
    tmp &= ~(0xFF << shift);
    tmp |= (mode | flags | 0x0) << shift;
    *ccmr = tmp;
}







#define TIMER_CCMR1_CC4S_OUTPUT TIMER_CCMR2_CC4S_OUTPUT

#define TIMER_CCMR1_CC4S_INPUT_TI1 TIMER_CCMR2_CC4S_INPUT_TI1

#define TIMER_CCMR1_CC4S_INPUT_TI2 TIMER_CCMR2_CC4S_INPUT_TI2

#define TIMER_CCMR1_CC4S_INPUT_TRC TIMER_CCMR2_CC4S_INPUT_TRC

#define TIMER_CCMR2_IC2F TIMER_CCMR2_IC4F

#define TIMER_CCMR2_IC2PSC TIMER_CCMR2_IC4PSC

#define TIMER_CCMR2_IC1F TIMER_CCMR2_IC3F

#define TIMER_CCMR2_IC1PSC TIMER_CCMR2_IC3PSC

#define TIMER_CCMR1_CC3S_OUTPUT TIMER_CCMR2_CC3S_OUTPUT

#define TIMER_CCMR1_CC3S_INPUT_TI1 TIMER_CCMR2_CC3S_INPUT_TI1

#define TIMER_CCMR1_CC3S_INPUT_TI2 TIMER_CCMR2_CC3S_INPUT_TI2

#define TIMER_CCMR1_CC3S_INPUT_TRC TIMER_CCMR2_CC3S_INPUT_TRC


#define TIMER_DCR_DBL_1BYTE TIMER_DCR_DBL_1_XFER

#define TIMER_DCR_DBL_2BYTE TIMER_DCR_DBL_2_XFER

#define TIMER_DCR_DBL_3BYTE TIMER_DCR_DBL_3_XFER

#define TIMER_DCR_DBL_4BYTE TIMER_DCR_DBL_4_XFER

#define TIMER_DCR_DBL_5BYTE TIMER_DCR_DBL_5_XFER

#define TIMER_DCR_DBL_6BYTE TIMER_DCR_DBL_6_XFER

#define TIMER_DCR_DBL_7BYTE TIMER_DCR_DBL_7_XFER

#define TIMER_DCR_DBL_8BYTE TIMER_DCR_DBL_8_XFER

#define TIMER_DCR_DBL_9BYTE TIMER_DCR_DBL_9_XFER

#define TIMER_DCR_DBL_10BYTE TIMER_DCR_DBL_10_XFER

#define TIMER_DCR_DBL_11BYTE TIMER_DCR_DBL_11_XFER

#define TIMER_DCR_DBL_12BYTE TIMER_DCR_DBL_12_XFER

#define TIMER_DCR_DBL_13BYTE TIMER_DCR_DBL_13_XFER

#define TIMER_DCR_DBL_14BYTE TIMER_DCR_DBL_14_XFER

#define TIMER_DCR_DBL_15BYTE TIMER_DCR_DBL_15_XFER

#define TIMER_DCR_DBL_16BYTE TIMER_DCR_DBL_16_XFER

#define TIMER_DCR_DBL_17BYTE TIMER_DCR_DBL_17_XFER

#define TIMER_DCR_DBL_18BYTE TIMER_DCR_DBL_18_XFER


}
# 39 "./wirish/include/wirish/wirish_types.h" 2
# 1 "./libmaple/include/libmaple/adc.h" 1
# 36 "./libmaple/include/libmaple/adc.h"
#define _LIBMAPLE_ADC_H_ 


extern "C"{
# 53 "./libmaple/include/libmaple/adc.h"
typedef struct adc_reg_map {
    volatile uint32 SR;
    volatile uint32 CR1;
    volatile uint32 CR2;
    volatile uint32 SMPR1;
    volatile uint32 SMPR2;
    volatile uint32 JOFR1;
    volatile uint32 JOFR2;
    volatile uint32 JOFR3;
    volatile uint32 JOFR4;
    volatile uint32 HTR;
    volatile uint32 LTR;
    volatile uint32 SQR1;
    volatile uint32 SQR2;
    volatile uint32 SQR3;
    volatile uint32 JSQR;
    volatile uint32 JDR1;
    volatile uint32 JDR2;
    volatile uint32 JDR3;
    volatile uint32 JDR4;
    volatile uint32 DR;
} adc_reg_map;


typedef struct adc_dev {
    adc_reg_map *regs;
    rcc_clk_id clk_id;
} adc_dev;
# 105 "./libmaple/include/libmaple/adc.h"
# 1 "./libmaple/stm32f1/include/series/adc.h" 1
# 36 "./libmaple/stm32f1/include/series/adc.h"
#define _LIBMAPLE_STM32F1_ADC_H_ 
# 46 "./libmaple/stm32f1/include/series/adc.h"
extern const struct adc_dev *ADC1;
extern const struct adc_dev *ADC2;
# 57 "./libmaple/stm32f1/include/series/adc.h"
#define ADC1_BASE ((struct adc_reg_map*)0x40012400)

#define ADC2_BASE ((struct adc_reg_map*)0x40012800)

#define ADC3_BASE ((struct adc_reg_map*)0x40013C00)







#define ADC_CR2_ADON_BIT 0
#define ADC_CR2_CONT_BIT 1
#define ADC_CR2_CAL_BIT 2
#define ADC_CR2_RSTCAL_BIT 3
#define ADC_CR2_DMA_BIT 8
#define ADC_CR2_ALIGN_BIT 11
#define ADC_CR2_JEXTTRIG_BIT 15
#define ADC_CR2_EXTTRIG_BIT 20
#define ADC_CR2_JSWSTART_BIT 21
#define ADC_CR2_SWSTART_BIT 22
#define ADC_CR2_TSEREFE_BIT 23

#define ADC_CR2_ADON (1U << ADC_CR2_ADON_BIT)
#define ADC_CR2_CONT (1U << ADC_CR2_CONT_BIT)
#define ADC_CR2_CAL (1U << ADC_CR2_CAL_BIT)
#define ADC_CR2_RSTCAL (1U << ADC_CR2_RSTCAL_BIT)
#define ADC_CR2_DMA (1U << ADC_CR2_DMA_BIT)
#define ADC_CR2_ALIGN (1U << ADC_CR2_ALIGN_BIT)
#define ADC_CR2_JEXTSEL 0x7000
#define ADC_CR2_JEXTTRIG (1U << ADC_CR2_JEXTTRIG_BIT)
#define ADC_CR2_EXTSEL 0xE0000
#define ADC_CR2_EXTTRIG (1U << ADC_CR2_EXTTRIG_BIT)
#define ADC_CR2_JSWSTART (1U << ADC_CR2_JSWSTART_BIT)
#define ADC_CR2_SWSTART (1U << ADC_CR2_SWSTART_BIT)
#define ADC_CR2_TSEREFE (1U << ADC_CR2_TSEREFE_BIT)
# 114 "./libmaple/stm32f1/include/series/adc.h"
typedef enum adc_extsel_event {
# 130 "./libmaple/stm32f1/include/series/adc.h"
    ADC_EXT_EV_TIM1_CC1 = 0x00000,
    ADC_EXT_EV_TIM1_CC2 = 0x20000,
    ADC_EXT_EV_TIM2_CC2 = 0x60000,
    ADC_EXT_EV_TIM3_TRGO = 0x80000,
    ADC_EXT_EV_TIM4_CC4 = 0xA0000,
    ADC_EXT_EV_EXTI11 = 0xC0000,


    ADC_EXT_EV_TIM1_CC3 = 0x40000,
    ADC_EXT_EV_SWSTART = 0xE0000,


    ADC_EXT_EV_TIM3_CC1 = 0x00000,


    ADC_EXT_EV_TIM2_CC3 = 0x20000,


    ADC_EXT_EV_TIM8_CC1 = 0x60000,


    ADC_EXT_EV_ADC3_TIM8_TRGO = 0x80000,


    ADC_EXT_EV_TIM5_CC1 = 0xA0000,


    ADC_EXT_EV_ADC12_TIM8_TRGO = 0xC0000,


    ADC_EXT_EV_TIM5_CC3 = 0xC0000,


} adc_extsel_event;




#define ADC_ADC12_TIM1_CC1 ADC_EXT_EV_TIM1_CC1

#define ADC_ADC12_TIM1_CC2 ADC_EXT_EV_TIM1_CC2

#define ADC_ADC12_TIM1_CC3 ADC_EXT_EV_TIM1_CC3

#define ADC_ADC12_TIM2_CC2 ADC_EXT_EV_TIM2_CC2

#define ADC_ADC12_TIM3_TRGO ADC_EXT_EV_TIM3_TRGO

#define ADC_ADC12_TIM4_CC4 ADC_EXT_EV_TIM4_CC4

#define ADC_ADC12_EXTI11 ADC_EXT_EV_EXTI11

#define ADC_ADC12_TIM8_TRGO ADC_EXT_EV_ADC12_TIM8_TRGO

#define ADC_ADC12_SWSTART ADC_EXT_EV_SWSTART

#define ADC_ADC3_TIM3_CC1 ADC_EXT_EV_TIM1_CC1

#define ADC_ADC3_TIM2_CC3 ADC_EXT_EV_TIM1_CC2

#define ADC_ADC3_TIM1_CC3 ADC_EXT_EV_TIM1_CC3

#define ADC_ADC3_TIM8_CC1 ADC_EXT_EV_TIM2_CC2

#define ADC_ADC3_TIM8_TRGO ADC_EXT_EV_TIM3_TRGO

#define ADC_ADC3_TIM5_CC1 ADC_EXT_EV_TIM4_CC4

#define ADC_ADC3_TIM5_CC3 ADC_EXT_EV_EXTI11

#define ADC_ADC3_SWSTART ADC_EXT_EV_TIM8_TRGO

#define ADC_SWSTART ADC_EXT_EV_SWSTART






typedef enum adc_smp_rate {
    ADC_SMPR_1_5,
    ADC_SMPR_7_5,
    ADC_SMPR_13_5,
    ADC_SMPR_28_5,
    ADC_SMPR_41_5,
    ADC_SMPR_55_5,
    ADC_SMPR_71_5,
    ADC_SMPR_239_5,
} adc_smp_rate;




typedef enum adc_prescaler {

    ADC_PRE_PCLK2_DIV_2 = RCC_ADCPRE_PCLK_DIV_2,

    ADC_PRE_PCLK2_DIV_4 = RCC_ADCPRE_PCLK_DIV_4,

    ADC_PRE_PCLK2_DIV_6 = RCC_ADCPRE_PCLK_DIV_6,

    ADC_PRE_PCLK2_DIV_8 = RCC_ADCPRE_PCLK_DIV_8,
} adc_prescaler;





void adc_calibrate(const adc_dev *dev);
# 249 "./libmaple/stm32f1/include/series/adc.h"
static inline void adc_set_exttrig(const adc_dev *dev, uint8 enable) {
    *bb_perip(&dev->regs->CR2, 20) = !!enable;
}
# 106 "./libmaple/include/libmaple/adc.h" 2







#define ADC_SR_AWD_BIT 0
#define ADC_SR_EOC_BIT 1
#define ADC_SR_JEOC_BIT 2
#define ADC_SR_JSTRT_BIT 3
#define ADC_SR_STRT_BIT 4

#define ADC_SR_AWD BIT(ADC_SR_AWD_BIT)
#define ADC_SR_EOC BIT(ADC_SR_EOC_BIT)
#define ADC_SR_JEOC BIT(ADC_SR_JEOC_BIT)
#define ADC_SR_JSTRT BIT(ADC_SR_JSTRT_BIT)
#define ADC_SR_STRT BIT(ADC_SR_STRT_BIT)



#define ADC_CR1_EOCIE_BIT 5
#define ADC_CR1_AWDIE_BIT 6
#define ADC_CR1_JEOCIE_BIT 7
#define ADC_CR1_SCAN_BIT 8
#define ADC_CR1_AWDSGL_BIT 9
#define ADC_CR1_JAUTO_BIT 10
#define ADC_CR1_DISCEN_BIT 11
#define ADC_CR1_JDISCEN_BIT 12
#define ADC_CR1_JAWDEN_BIT 22
#define ADC_CR1_AWDEN_BIT 23

#define ADC_CR1_AWDCH (0x1F)
#define ADC_CR1_EOCIE BIT(ADC_CR1_EOCIE_BIT)
#define ADC_CR1_AWDIE BIT(ADC_CR1_AWDIE_BIT)
#define ADC_CR1_JEOCIE BIT(ADC_CR1_JEOCIE_BIT)
#define ADC_CR1_SCAN BIT(ADC_CR1_SCAN_BIT)
#define ADC_CR1_AWDSGL BIT(ADC_CR1_AWDSGL_BIT)
#define ADC_CR1_JAUTO BIT(ADC_CR1_JAUTO_BIT)
#define ADC_CR1_DISCEN BIT(ADC_CR1_DISCEN_BIT)
#define ADC_CR1_JDISCEN BIT(ADC_CR1_JDISCEN_BIT)
#define ADC_CR1_DISCNUM (0xE000)
#define ADC_CR1_JAWDEN BIT(ADC_CR1_JAWDEN_BIT)
#define ADC_CR1_AWDEN BIT(ADC_CR1_AWDEN_BIT)
# 159 "./libmaple/include/libmaple/adc.h"
#define ADC_SMPR1_SMP17 (0x7 << 21)
#define ADC_SMPR1_SMP16 (0x7 << 18)
#define ADC_SMPR1_SMP15 (0x7 << 15)
#define ADC_SMPR1_SMP14 (0x7 << 12)
#define ADC_SMPR1_SMP13 (0x7 << 9)
#define ADC_SMPR1_SMP12 (0x7 << 6)
#define ADC_SMPR1_SMP11 (0x7 << 3)
#define ADC_SMPR1_SMP10 0x7



#define ADC_SMPR2_SMP9 (0x7 << 27)
#define ADC_SMPR2_SMP8 (0x7 << 24)
#define ADC_SMPR2_SMP7 (0x7 << 21)
#define ADC_SMPR2_SMP6 (0x7 << 18)
#define ADC_SMPR2_SMP5 (0x7 << 15)
#define ADC_SMPR2_SMP4 (0x7 << 12)
#define ADC_SMPR2_SMP3 (0x7 << 9)
#define ADC_SMPR2_SMP2 (0x7 << 6)
#define ADC_SMPR2_SMP1 (0x7 << 3)
#define ADC_SMPR2_SMP0 0x7



#define ADC_JOFR_JOFFSET 0x3FF



#define ADC_HTR_HT 0x3FF



#define ADC_LTR_LT 0x3FF



#define ADC_SQR1_L (0x1F << 20)
#define ADC_SQR1_SQ16 (0x1F << 15)
#define ADC_SQR1_SQ15 (0x1F << 10)
#define ADC_SQR1_SQ14 (0x1F << 5)
#define ADC_SQR1_SQ13 0x1F



#define ADC_SQR2_SQ12 (0x1F << 25)
#define ADC_SQR2_SQ11 (0x1F << 20)
#define ADC_SQR2_SQ10 (0x1F << 16)
#define ADC_SQR2_SQ9 (0x1F << 10)
#define ADC_SQR2_SQ8 (0x1F << 5)
#define ADC_SQR2_SQ7 0x1F



#define ADC_SQR3_SQ6 (0x1F << 25)
#define ADC_SQR3_SQ5 (0x1F << 20)
#define ADC_SQR3_SQ4 (0x1F << 16)
#define ADC_SQR3_SQ3 (0x1F << 10)
#define ADC_SQR3_SQ2 (0x1F << 5)
#define ADC_SQR3_SQ1 0x1F



#define ADC_JSQR_JL (0x3 << 20)
#define ADC_JSQR_JL_1CONV (0x0 << 20)
#define ADC_JSQR_JL_2CONV (0x1 << 20)
#define ADC_JSQR_JL_3CONV (0x2 << 20)
#define ADC_JSQR_JL_4CONV (0x3 << 20)
#define ADC_JSQR_JSQ4 (0x1F << 15)
#define ADC_JSQR_JSQ3 (0x1F << 10)
#define ADC_JSQR_JSQ2 (0x1F << 5)
#define ADC_JSQR_JSQ1 0x1F



#define ADC_JDR_JDATA 0xFFFF



#define ADC_DR_ADC2DATA (0xFFFF << 16)
#define ADC_DR_DATA 0xFFFF





void adc_init(const adc_dev *dev);
void adc_set_extsel(const adc_dev *dev, adc_extsel_event event);
void adc_set_sample_rate(const adc_dev *dev, adc_smp_rate smp_rate);
uint16 adc_read(const adc_dev *dev, uint8 channel);
void adc_read_run(const adc_dev *dev, uint8 channel);
uint16 adc_read_value(const adc_dev *dev, uint8 channel);






extern void adc_set_prescaler(adc_prescaler pre);





extern void adc_foreach(void (*fn)(const adc_dev*));

struct gpio_dev;







extern void adc_config_gpio(const struct adc_dev *dev,
                            struct gpio_dev *gdev,
                            uint8 bit);
# 286 "./libmaple/include/libmaple/adc.h"
extern void adc_enable_single_swstart(const adc_dev* dev);
# 297 "./libmaple/include/libmaple/adc.h"
static inline void adc_set_reg_seqlen(const adc_dev *dev, uint8 length) {
    uint32 tmp = dev->regs->SQR1;
    tmp &= ~(0x1F << 20);
    tmp |= (length - 1) << 20;
    dev->regs->SQR1 = tmp;
}





static inline void adc_enable(const adc_dev *dev) {
    *bb_perip(&dev->regs->CR2, 0) = 1;
}





static inline void adc_disable(const adc_dev *dev) {
    *bb_perip(&dev->regs->CR2, 0) = 0;
}




static inline void adc_disable_all(void) {
    adc_foreach(adc_disable);
}


}
# 40 "./wirish/include/wirish/wirish_types.h" 2





#define ADCx 0xFF





typedef struct stm32_pin_info {
    gpio_dev *gpio_device;
    timer_dev *timer_device;
    const adc_dev *adc_device;
    uint8 gpio_bit;
    uint8 timer_channel;
    uint8 adc_channel;
} stm32_pin_info;




#define __FLASH__ __attr_flash

typedef uint8 boolean;
typedef uint8 byte;
# 39 "./wirish/include/wirish/boards.h" 2
# 1 "./wirish/boards/maple/include/board/board.h" 1
# 34 "./wirish/boards/maple/include/board/board.h"
#define _BOARD_MAPLE_H_ 


#define CYCLES_PER_MICROSECOND 72


#define BOARD_BUTTON_PIN 38


#define BOARD_LED_PIN 13


#define BOARD_NR_USARTS 3


#define BOARD_USART1_TX_PIN 7
#define BOARD_USART1_RX_PIN 8
#define BOARD_USART2_TX_PIN 1
#define BOARD_USART2_RX_PIN 0
#define BOARD_USART3_TX_PIN 29
#define BOARD_USART3_RX_PIN 30


#define BOARD_NR_SPI 2


#define BOARD_SPI1_NSS_PIN 10
#define BOARD_SPI1_MOSI_PIN 11
#define BOARD_SPI1_MISO_PIN 12
#define BOARD_SPI1_SCK_PIN 13
#define BOARD_SPI2_NSS_PIN 31
#define BOARD_SPI2_MOSI_PIN 34
#define BOARD_SPI2_MISO_PIN 33
#define BOARD_SPI2_SCK_PIN 32




#define BOARD_NR_GPIO_PINS 44


#define BOARD_NR_PWM_PINS 15


#define BOARD_NR_ADC_PINS 15




#define BOARD_NR_USED_PINS 7


#define BOARD_JTMS_SWDIO_PIN 39
#define BOARD_JTCK_SWCLK_PIN 40
#define BOARD_JTDI_PIN 41
#define BOARD_JTDO_PIN 42
#define BOARD_NJTRST_PIN 43



#define BOARD_USB_DISC_DEV GPIOC
#define BOARD_USB_DISC_BIT 12




enum {
    PA3, PA2, PA0, PA1, PB5, PB6, PA8, PA9, PA10, PB7, PA4, PA7, PA6, PA5, PB8,
    PC0, PC1, PC2, PC3, PC4, PC5, PC13, PC14, PC15, PB9, PD2, PC10, PB0, PB1,
    PB10, PB11, PB12, PB13, PB14, PB15, PC6, PC7, PC8, PC9, PA13, PA14, PA15,
    PB3, PB4
};
# 40 "./wirish/include/wirish/boards.h" 2





enum {
    D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16,
    D17, D18, D19, D20, D21, D22, D23, D24, D25, D26, D27, D28, D29, D30, D31,
    D32, D33, D34, D35, D36, D37, D38, D39, D40, D41, D42, D43, D44, D45, D46,
    D47, D48, D49, D50, D51, D52, D53, D54, D55, D56, D57, D58, D59, D60, D61,
    D62, D63, D64, D65, D66, D67, D68, D69, D70, D71, D72, D73, D74, D75, D76,
    D77, D78, D79, D80, D81, D82, D83, D84, D85, D86, D87, D88, D89, D90, D91,
    D92, D93, D94, D95, D96, D97, D98, D99, D100, D101, D102, D103, D104, D105,
    D106, D107, D108, D109, D110, D111, };





extern const stm32_pin_info PIN_MAP[];






extern const uint8 boardPWMPins[];






extern const uint8 boardADCPins[];







extern const uint8 boardUsedPins[];
# 92 "./wirish/include/wirish/boards.h"
void init(void);
# 103 "./wirish/include/wirish/boards.h"
extern void boardInit(void);







bool boardUsesPin(uint8 pin);





#define CLOCK_SPEED_MHZ CYCLES_PER_MICROSECOND
#define CLOCK_SPEED_HZ (CLOCK_SPEED_MHZ * 1000000UL)


#define SYSTICK_RELOAD_VAL (1000 * CYCLES_PER_MICROSECOND - 1)



#define BOARD_BUTTON_PRESSED_LEVEL HIGH
# 134 "./wirish/include/wirish/boards.h"
#define BOARD_HAVE_USART(n) (defined(BOARD_USART ##n ##_TX_PIN) && defined(BOARD_USART ##n ##_RX_PIN))


#define BOARD_HAVE_UART(n) (defined(BOARD_UART ##n ##_TX_PIN) && defined(BOARD_UART ##n ##_RX_PIN))


#define BOARD_HAVE_USART1 BOARD_HAVE_USART(1)

#define BOARD_HAVE_USART2 BOARD_HAVE_USART(2)

#define BOARD_HAVE_USART3 BOARD_HAVE_USART(3)

#define BOARD_HAVE_UART4 BOARD_HAVE_UART(4)

#define BOARD_HAVE_UART5 BOARD_HAVE_UART(5)

#define BOARD_HAVE_USART6 BOARD_HAVE_USART(6)







#define BOARD_HAVE_SPI(n) (defined(BOARD_SPI ##n ##_NSS_PIN) && defined(BOARD_SPI ##n ##_SCK_PIN) && defined(BOARD_SPI ##n ##_MISO_PIN) && defined(BOARD_SPI ##n ##_MOSI_PIN))




#define BOARD_HAVE_SPI1 BOARD_HAVE_SPI(1)

#define BOARD_HAVE_SPI2 BOARD_HAVE_SPI(2)

#define BOARD_HAVE_SPI3 BOARD_HAVE_SPI(3)




#define BOARD_HAVE_SERIALUSB (defined(BOARD_USB_DISC_DEV) && defined(BOARD_USB_DISC_BIT))
# 36 "./wirish/include/wirish/usb_serial.h" 2
# 1 "./wirish/include/wirish/Read.h" 1
# 9 "./wirish/include/wirish/Read.h"
#define _WIRISH_READ_H_ 



class Read {
    public:
        virtual uint32 available(void) = 0;
        virtual uint8 read(void) = 0;
};
# 37 "./wirish/include/wirish/usb_serial.h" 2
# 1 "./wirish/include/wirish/Serial.h" 1
# 9 "./wirish/include/wirish/Serial.h"
#define _WIRISH_SERIAL_H_ 




class Serial : public Print, public Read {
};
# 38 "./wirish/include/wirish/usb_serial.h" 2




class USBSerial : public Serial {
public:
    USBSerial(void);

    void begin(void);
    void end(void);

    uint32 available(void);

    uint32 read(void *buf, uint32 len);
    uint8 read(void);

    void write(uint8);
    void write(const char *str);
    void write(const void*, uint32);

    uint8 getRTS();
    uint8 getDTR();
    uint8 isConnected();
    uint8 pending();
};


extern USBSerial SerialUSB;
# 32 "wirish/usb_serial.cpp" 2

# 1 "/usr/include/newlib/string.h" 1 3







#define _STRING_H_ 

# 1 "/usr/include/newlib/_ansi.h" 1 3







#define _ANSIDECL_H_ 

# 1 "/usr/include/newlib/newlib.h" 1 3







#define __NEWLIB_H__ 1





# 1 "/usr/include/newlib/_newlib_version.h" 1 3



#define _NEWLIB_VERSION_H__ 1

#define _NEWLIB_VERSION "3.3.0"
#define __NEWLIB__ 3
#define __NEWLIB_MINOR__ 3
#define __NEWLIB_PATCHLEVEL__ 0
# 15 "/usr/include/newlib/newlib.h" 2 3






#define _WANT_IO_LONG_LONG 1


#define _WANT_REGISTER_FINI 1
# 37 "/usr/include/newlib/newlib.h" 3
#define _REENT_CHECK_VERIFY 1





#define _MB_LEN_MAX 1
# 53 "/usr/include/newlib/newlib.h" 3
#define HAVE_INITFINI_ARRAY 1



#define _ATEXIT_DYNAMIC_ALLOC 1


#define _HAVE_LONG_DOUBLE 1


#define _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL 1


#define _LDBL_EQ_DBL 1


#define _FVWRITE_IN_STREAMIO 1


#define _FSEEK_OPTIMIZATION 1


#define _WIDE_ORIENT 1


#define _UNBUF_STREAM_OPT 1
# 11 "/usr/include/newlib/_ansi.h" 2 3
# 1 "/usr/include/newlib/sys/config.h" 1 3

#define __SYS_CONFIG_H__ 

# 1 "/usr/include/newlib/machine/ieeefp.h" 1 3
# 77 "/usr/include/newlib/machine/ieeefp.h" 3
#define __IEEE_LITTLE_ENDIAN 
# 473 "/usr/include/newlib/machine/ieeefp.h" 3
#define __OBSOLETE_MATH_DEFAULT 1


#define __OBSOLETE_MATH __OBSOLETE_MATH_DEFAULT
# 5 "/usr/include/newlib/sys/config.h" 2 3
# 1 "/usr/include/newlib/sys/features.h" 1 3
# 22 "/usr/include/newlib/sys/features.h" 3
#define _SYS_FEATURES_H 



# 25 "/usr/include/newlib/sys/features.h" 3
extern "C" {







#define __GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))






#define __GNUC_PREREQ__(ma,mi) __GNUC_PREREQ(ma, mi)
# 131 "/usr/include/newlib/sys/features.h" 3
#undef _DEFAULT_SOURCE
#define _DEFAULT_SOURCE 1



#undef _POSIX_SOURCE
#define _POSIX_SOURCE 1
#undef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 200809L
# 158 "/usr/include/newlib/sys/features.h" 3
#undef _ATFILE_SOURCE
#define _ATFILE_SOURCE 1
# 247 "/usr/include/newlib/sys/features.h" 3
#define __ATFILE_VISIBLE 1





#define __BSD_VISIBLE 1







#define __GNU_VISIBLE 0




#define __ISO_C_VISIBLE 2011
# 277 "/usr/include/newlib/sys/features.h" 3
#define __LARGEFILE_VISIBLE 0



#define __MISC_VISIBLE 1





#define __POSIX_VISIBLE 200809
# 303 "/usr/include/newlib/sys/features.h" 3
#define __SVID_VISIBLE 1
# 319 "/usr/include/newlib/sys/features.h" 3
#define __XSI_VISIBLE 0
# 330 "/usr/include/newlib/sys/features.h" 3
#define __SSP_FORTIFY_LEVEL 0
# 535 "/usr/include/newlib/sys/features.h" 3
}
# 6 "/usr/include/newlib/sys/config.h" 2 3
# 224 "/usr/include/newlib/sys/config.h" 3
#define _POINTER_INT long





#undef __RAND_MAX



#define __RAND_MAX 0x7fffffff
# 250 "/usr/include/newlib/sys/config.h" 3
#define __EXPORT 



#define __IMPORT 






#define _READ_WRITE_RETURN_TYPE int





#define _READ_WRITE_BUFSIZE_TYPE int
# 12 "/usr/include/newlib/_ansi.h" 2 3
# 21 "/usr/include/newlib/_ansi.h" 3
#define _BEGIN_STD_C extern "C" {
#define _END_STD_C }


#define _NOTHROW __attribute__ ((__nothrow__))
# 37 "/usr/include/newlib/_ansi.h" 3
#define _LONG_DOUBLE long double





#define _ATTRIBUTE(attrs) __attribute__ (attrs)
# 69 "/usr/include/newlib/_ansi.h" 3
#define _ELIDABLE_INLINE static __inline__



#define _NOINLINE __attribute__ ((__noinline__))
#define _NOINLINE_STATIC _NOINLINE static
# 11 "/usr/include/newlib/string.h" 2 3
# 1 "/usr/include/newlib/sys/reent.h" 1 3
# 9 "/usr/include/newlib/sys/reent.h" 3
extern "C" {

#define _SYS_REENT_H_ 

# 1 "/usr/include/newlib/_ansi.h" 1 3
# 14 "/usr/include/newlib/sys/reent.h" 2 3
# 1 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 39 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#define _STDDEF_H 
#define _STDDEF_H_ 

#define _ANSI_STDDEF_H 
# 131 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#define _PTRDIFF_T 
#define _T_PTRDIFF_ 
#define _T_PTRDIFF 
#define __PTRDIFF_T 
#define _PTRDIFF_T_ 
#define _BSD_PTRDIFF_T_ 
#define ___int_ptrdiff_t_h 
#define _GCC_PTRDIFF_T 
#define _PTRDIFF_T_DECLARED 



typedef int ptrdiff_t;
# 155 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 181 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 






#define __size_t 





typedef unsigned int size_t;
# 231 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef __need_size_t
# 260 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
# 287 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef _BSD_WCHAR_T_
# 340 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 390 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 401 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)




#define _GCC_MAX_ALIGN_T 



typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
} max_align_t;





#define _GXX_NULLPTR_T 
  typedef decltype(nullptr) nullptr_t;
# 15 "/usr/include/newlib/sys/reent.h" 2 3
# 1 "/usr/include/newlib/sys/_types.h" 1 3
# 20 "/usr/include/newlib/sys/_types.h" 3
#define _SYS__TYPES_H 

#define __need_size_t 
#define __need_wint_t 
# 1 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 155 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 231 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef __need_size_t
# 340 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef __need_wchar_t




#define _WINT_T 




typedef unsigned int wint_t;

#undef __need_wint_t
# 390 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 401 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 25 "/usr/include/newlib/sys/_types.h" 2 3


# 1 "/usr/include/newlib/machine/_types.h" 1 3





#define _MACHINE__TYPES_H 
# 1 "/usr/include/newlib/machine/_default_types.h" 1 3





#define _MACHINE__DEFAULT_TYPES_H 
# 15 "/usr/include/newlib/machine/_default_types.h" 3
#define __EXP(x) __ ##x ##__
# 26 "/usr/include/newlib/machine/_default_types.h" 3
#define __have_longlong64 1






#define __have_long32 1



extern "C" {



typedef signed char __int8_t;

typedef unsigned char __uint8_t;



#define ___int8_t_defined 1







typedef short int __int16_t;

typedef short unsigned int __uint16_t;



#define ___int16_t_defined 1
# 77 "/usr/include/newlib/machine/_default_types.h" 3
typedef long int __int32_t;

typedef long unsigned int __uint32_t;



#define ___int32_t_defined 1
# 103 "/usr/include/newlib/machine/_default_types.h" 3
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;



#define ___int64_t_defined 1
# 134 "/usr/include/newlib/machine/_default_types.h" 3
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;



#define ___int_least8_t_defined 1
# 160 "/usr/include/newlib/machine/_default_types.h" 3
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;



#define ___int_least16_t_defined 1
# 182 "/usr/include/newlib/machine/_default_types.h" 3
typedef long int __int_least32_t;

typedef long unsigned int __uint_least32_t;



#define ___int_least32_t_defined 1
# 200 "/usr/include/newlib/machine/_default_types.h" 3
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;



#define ___int_least64_t_defined 1







typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 244 "/usr/include/newlib/machine/_default_types.h" 3
#undef __EXP


}
# 8 "/usr/include/newlib/machine/_types.h" 2 3
# 28 "/usr/include/newlib/sys/_types.h" 2 3


typedef long __blkcnt_t;



typedef long __blksize_t;



typedef __uint64_t __fsblkcnt_t;



typedef __uint32_t __fsfilcnt_t;



typedef long _off_t;





typedef int __pid_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



typedef __uint32_t __id_t;







typedef unsigned short __ino_t;
# 90 "/usr/include/newlib/sys/_types.h" 3
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;


typedef long __key_t;







typedef long _fpos_t;
# 127 "/usr/include/newlib/sys/_types.h" 3
#undef __size_t



typedef unsigned int __size_t;
# 146 "/usr/include/newlib/sys/_types.h" 3
#define unsigned signed
typedef signed int _ssize_t;
#undef unsigned
# 158 "/usr/include/newlib/sys/_types.h" 3
typedef _ssize_t __ssize_t;



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;




typedef void *_iconv_t;



#define _CLOCK_T_ unsigned long


typedef unsigned long __clock_t;




#define _TIME_T_ __int_least64_t

typedef __int_least64_t __time_t;


#define _CLOCKID_T_ unsigned long


typedef unsigned long __clockid_t;

#define _TIMER_T_ unsigned long
typedef unsigned long __timer_t;


typedef __uint8_t __sa_family_t;



typedef __uint32_t __socklen_t;


typedef int __nl_item;
typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;







typedef __builtin_va_list __va_list;
# 16 "/usr/include/newlib/sys/reent.h" 2 3

#define _NULL 0



#define __Long long
typedef unsigned long __ULong;
# 34 "/usr/include/newlib/sys/reent.h" 3
# 1 "/usr/include/newlib/sys/lock.h" 1 3

#define __SYS_LOCK_H__ 
# 11 "/usr/include/newlib/sys/lock.h" 3
typedef int _LOCK_T;
typedef int _LOCK_RECURSIVE_T;

#define __LOCK_INIT(class,lock) static int lock = 0;
#define __LOCK_INIT_RECURSIVE(class,lock) static int lock = 0;
#define __lock_init(lock) ((void) 0)
#define __lock_init_recursive(lock) ((void) 0)
#define __lock_close(lock) ((void) 0)
#define __lock_close_recursive(lock) ((void) 0)
#define __lock_acquire(lock) ((void) 0)
#define __lock_acquire_recursive(lock) ((void) 0)
#define __lock_try_acquire(lock) ((void) 0)
#define __lock_try_acquire_recursive(lock) ((void) 0)
#define __lock_release(lock) ((void) 0)
#define __lock_release_recursive(lock) ((void) 0)
# 35 "/usr/include/newlib/sys/reent.h" 2 3
typedef _LOCK_RECURSIVE_T _flock_t;







struct _reent;

struct __locale_t;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};





#define _ATEXIT_SIZE 32

struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 98 "/usr/include/newlib/sys/reent.h" 3
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
#define _ATEXIT_INIT {_NULL, 0, {_NULL}, {{_NULL}, {_NULL}, 0, 0}}





#define _REENT_INIT_ATEXIT _NULL, _ATEXIT_INIT,
# 122 "/usr/include/newlib/sys/reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 183 "/usr/include/newlib/sys/reent.h" 3
#define _REENT_SMALL_CHECK_INIT(ptr) 


struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (*_read) (struct _reent *, void *,
        char *, int);
  int (*_write) (struct _reent *, void *,
         const char *,
         int);
  _fpos_t (*_seek) (struct _reent *, void *, _fpos_t, int);
  int (*_close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 292 "/usr/include/newlib/sys/reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 317 "/usr/include/newlib/sys/reent.h" 3
#define _RAND48_SEED_0 (0x330e)
#define _RAND48_SEED_1 (0xabcd)
#define _RAND48_SEED_2 (0x1234)
#define _RAND48_MULT_0 (0xe66d)
#define _RAND48_MULT_1 (0xdeec)
#define _RAND48_MULT_2 (0x0005)
#define _RAND48_ADD (0x000b)
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};


#define _REENT_EMERGENCY_SIZE 25
#define _REENT_ASCTIME_SIZE 26
#define _REENT_SIGNAL_SIZE 24
# 613 "/usr/include/newlib/sys/reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];


  int _unspecified_locale_info;
  struct __locale_t *_locale;

  int __sdidinit;

  void (*__cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {
#define _N_LISTS 30
          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;



  struct _atexit *_atexit;
  struct _atexit _atexit0;



  void (**(_sig_func))(int);




  struct _glue __sglue;

  __FILE __sf[3];

};





#define _REENT_STDIO_STREAM(var,index) &(var)->__sf[index]


#define _REENT_INIT(var) { 0, _REENT_STDIO_STREAM(&(var), 0), _REENT_STDIO_STREAM(&(var), 1), _REENT_STDIO_STREAM(&(var), 2), 0, "", 0, _NULL, 0, _NULL, _NULL, 0, _NULL, _NULL, 0, _NULL, { { 0, _NULL, "", {0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 1, { {_RAND48_SEED_0, _RAND48_SEED_1, _RAND48_SEED_2}, {_RAND48_MULT_0, _RAND48_MULT_1, _RAND48_MULT_2}, _RAND48_ADD }, {0, {0}}, {0, {0}}, {0, {0}}, "", "", 0, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}} } }, _REENT_INIT_ATEXIT _NULL, {_NULL, 0, _NULL} }
# 751 "/usr/include/newlib/sys/reent.h" 3
#define _REENT_INIT_PTR_ZEROED(var) { (var)->_stdin = _REENT_STDIO_STREAM(var, 0); (var)->_stdout = _REENT_STDIO_STREAM(var, 1); (var)->_stderr = _REENT_STDIO_STREAM(var, 2); (var)->_new._reent._rand_next = 1; (var)->_new._reent._r48._seed[0] = _RAND48_SEED_0; (var)->_new._reent._r48._seed[1] = _RAND48_SEED_1; (var)->_new._reent._r48._seed[2] = _RAND48_SEED_2; (var)->_new._reent._r48._mult[0] = _RAND48_MULT_0; (var)->_new._reent._r48._mult[1] = _RAND48_MULT_1; (var)->_new._reent._r48._mult[2] = _RAND48_MULT_2; (var)->_new._reent._r48._add = _RAND48_ADD; }
# 765 "/usr/include/newlib/sys/reent.h" 3
#define _REENT_CHECK_RAND48(ptr) 
#define _REENT_CHECK_MP(ptr) 
#define _REENT_CHECK_TM(ptr) 
#define _REENT_CHECK_ASCTIME_BUF(ptr) 
#define _REENT_CHECK_EMERGENCY(ptr) 
#define _REENT_CHECK_MISC(ptr) 
#define _REENT_CHECK_SIGNAL_BUF(ptr) 

#define _REENT_SIGNGAM(ptr) ((ptr)->_new._reent._gamma_signgam)
#define _REENT_RAND_NEXT(ptr) ((ptr)->_new._reent._rand_next)
#define _REENT_RAND48_SEED(ptr) ((ptr)->_new._reent._r48._seed)
#define _REENT_RAND48_MULT(ptr) ((ptr)->_new._reent._r48._mult)
#define _REENT_RAND48_ADD(ptr) ((ptr)->_new._reent._r48._add)
#define _REENT_MP_RESULT(ptr) ((ptr)->_result)
#define _REENT_MP_RESULT_K(ptr) ((ptr)->_result_k)
#define _REENT_MP_P5S(ptr) ((ptr)->_p5s)
#define _REENT_MP_FREELIST(ptr) ((ptr)->_freelist)
#define _REENT_ASCTIME_BUF(ptr) ((ptr)->_new._reent._asctime_buf)
#define _REENT_TM(ptr) (&(ptr)->_new._reent._localtime_buf)
#define _REENT_EMERGENCY(ptr) ((ptr)->_emergency)
#define _REENT_STRTOK_LAST(ptr) ((ptr)->_new._reent._strtok_last)
#define _REENT_MBLEN_STATE(ptr) ((ptr)->_new._reent._mblen_state)
#define _REENT_MBTOWC_STATE(ptr) ((ptr)->_new._reent._mbtowc_state)
#define _REENT_WCTOMB_STATE(ptr) ((ptr)->_new._reent._wctomb_state)
#define _REENT_MBRLEN_STATE(ptr) ((ptr)->_new._reent._mbrlen_state)
#define _REENT_MBRTOWC_STATE(ptr) ((ptr)->_new._reent._mbrtowc_state)
#define _REENT_MBSRTOWCS_STATE(ptr) ((ptr)->_new._reent._mbsrtowcs_state)
#define _REENT_WCRTOMB_STATE(ptr) ((ptr)->_new._reent._wcrtomb_state)
#define _REENT_WCSRTOMBS_STATE(ptr) ((ptr)->_new._reent._wcsrtombs_state)
#define _REENT_L64A_BUF(ptr) ((ptr)->_new._reent._l64a_buf)
#define _REENT_SIGNAL_BUF(ptr) ((ptr)->_new._reent._signal_buf)
#define _REENT_GETDATE_ERR_P(ptr) (&((ptr)->_new._reent._getdate_err))



#define _REENT_INIT_PTR(var) { memset((var), 0, sizeof(*(var))); _REENT_INIT_PTR_ZEROED(var); }







#define _Kmax (sizeof (size_t) << 3)







#define __ATTRIBUTE_IMPURE_PTR__ 


extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 832 "/usr/include/newlib/sys/reent.h" 3
#define _REENT _impure_ptr


#define _GLOBAL_REENT _global_impure_ptr





#define _GLOBAL_ATEXIT (_GLOBAL_REENT->_atexit)



}
# 12 "/usr/include/newlib/string.h" 2 3
# 1 "/usr/include/newlib/sys/cdefs.h" 1 3
# 43 "/usr/include/newlib/sys/cdefs.h" 3
#define _SYS_CDEFS_H_ 



# 1 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 48 "/usr/include/newlib/sys/cdefs.h" 2 3

#define __PMT(args) args
#define __DOTS , ...
#define __THROW 


#define __ASMNAME(cname) __XSTRING (__USER_LABEL_PREFIX__) cname


#define __ptr_t void *
#define __long_double_t long double

#define __attribute_malloc__ 
#define __attribute_pure__ 
#define __attribute_format_strfmon__(a,b) 
#define __flexarr [0]


#define __bounded 
#define __unbounded 
#define __ptrvalue 
# 78 "/usr/include/newlib/sys/cdefs.h" 3
#define __has_extension __has_feature


#define __has_feature(x) 0





#define __has_builtin(x) 0



#define __BEGIN_DECLS extern "C" {
#define __END_DECLS }
# 107 "/usr/include/newlib/sys/cdefs.h" 3
#define __GNUCLIKE_ASM 3
#define __GNUCLIKE_MATH_BUILTIN_CONSTANTS 



#define __GNUCLIKE___TYPEOF 1
#define __GNUCLIKE___OFFSETOF 1
#define __GNUCLIKE___SECTION 1


#define __GNUCLIKE_CTOR_SECTION_HANDLING 1


#define __GNUCLIKE_BUILTIN_CONSTANT_P 1






#define __GNUCLIKE_BUILTIN_VARARGS 1
#define __GNUCLIKE_BUILTIN_STDARG 1
#define __GNUCLIKE_BUILTIN_VAALIST 1



#define __GNUC_VA_LIST_COMPATIBILITY 1






#define __compiler_membar() __asm __volatile(" " : : : "memory")



#define __GNUCLIKE_BUILTIN_NEXT_ARG 1
#define __GNUCLIKE_MATH_BUILTIN_RELOPS 


#define __GNUCLIKE_BUILTIN_MEMCPY 1


#define __CC_SUPPORTS_INLINE 1
#define __CC_SUPPORTS___INLINE 1
#define __CC_SUPPORTS___INLINE__ 1

#define __CC_SUPPORTS___FUNC__ 1
#define __CC_SUPPORTS_WARNING 1

#define __CC_SUPPORTS_VARADIC_XXX 1

#define __CC_SUPPORTS_DYNAMIC_ARRAY_INIT 1
# 177 "/usr/include/newlib/sys/cdefs.h" 3
#define __P(protos) protos
#define __CONCAT1(x,y) x ## y
#define __CONCAT(x,y) __CONCAT1(x,y)
#define __STRING(x) #x
#define __XSTRING(x) __STRING(x)

#define __const const
#define __signed signed
#define __volatile volatile

#define __inline inline
# 230 "/usr/include/newlib/sys/cdefs.h" 3
#define __weak_symbol __attribute__((__weak__))
# 243 "/usr/include/newlib/sys/cdefs.h" 3
#define __dead2 __attribute__((__noreturn__))
#define __pure2 __attribute__((__const__))
#define __unused __attribute__((__unused__))
#define __used __attribute__((__used__))
#define __packed __attribute__((__packed__))
#define __aligned(x) __attribute__((__aligned__(x)))
#define __section(x) __attribute__((__section__(x)))


#define __alloc_size(x) __attribute__((__alloc_size__(x)))
#define __alloc_size2(n,x) __attribute__((__alloc_size__(n, x)))





#define __alloc_align(x) __attribute__((__alloc_align__(x)))
# 277 "/usr/include/newlib/sys/cdefs.h" 3
#define _Alignas(x) alignas(x)







#define _Alignof(x) alignof(x)
# 300 "/usr/include/newlib/sys/cdefs.h" 3
#define _Noreturn [[noreturn]]







#define _Static_assert(x,y) static_assert(x, y)
# 331 "/usr/include/newlib/sys/cdefs.h" 3
#define _Thread_local __thread
# 368 "/usr/include/newlib/sys/cdefs.h" 3
#define __min_size(x) (x)



#define __malloc_like __attribute__((__malloc__))
#define __pure __attribute__((__pure__))






#define __always_inline __inline__ __attribute__((__always_inline__))





#define __noinline __attribute__ ((__noinline__))





#define __nonnull(x) __attribute__((__nonnull__ x))
#define __nonnull_all __attribute__((__nonnull__))






#define __fastcall __attribute__((__fastcall__))
#define __result_use_check __attribute__((__warn_unused_result__))






#define __returns_twice __attribute__((__returns_twice__))





#define __unreachable() __builtin_unreachable()
# 432 "/usr/include/newlib/sys/cdefs.h" 3
#define __restrict 
# 467 "/usr/include/newlib/sys/cdefs.h" 3
#define __predict_true(exp) __builtin_expect((exp), 1)
#define __predict_false(exp) __builtin_expect((exp), 0)






#define __null_sentinel __attribute__((__sentinel__))
#define __exported __attribute__((__visibility__("default")))


#define __hidden __attribute__((__visibility__("hidden")))
# 489 "/usr/include/newlib/sys/cdefs.h" 3
#define __offsetof(type,field) offsetof(type, field)
#define __rangeof(type,start,end) (__offsetof(type, end) - __offsetof(type, start))
# 500 "/usr/include/newlib/sys/cdefs.h" 3
#define __containerof(x,s,m) ({ const volatile __typeof(((s *)0)->m) *__x = (x); __DEQUALIFY(s *, (const volatile char *)__x - __offsetof(s, m));})
# 522 "/usr/include/newlib/sys/cdefs.h" 3
#define __printflike(fmtarg,firstvararg) __attribute__((__format__ (__printf__, fmtarg, firstvararg)))

#define __scanflike(fmtarg,firstvararg) __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))

#define __format_arg(fmtarg) __attribute__((__format_arg__ (fmtarg)))
#define __strfmonlike(fmtarg,firstvararg) __attribute__((__format__ (__strfmon__, fmtarg, firstvararg)))

#define __strftimelike(fmtarg,firstvararg) __attribute__((__format__ (__strftime__, fmtarg, firstvararg)))
# 539 "/usr/include/newlib/sys/cdefs.h" 3
#define __printf0like(fmtarg,firstvararg) 




#define __strong_reference(sym,aliassym) extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)))




#define __weak_reference(sym,alias) __asm__(".weak " #alias); __asm__(".equ " #alias ", " #sym)


#define __warn_references(sym,msg) __asm__(".section .gnu.warning." #sym); __asm__(".asciz \"" msg "\""); __asm__(".previous")



#define __sym_compat(sym,impl,verid) __asm__(".symver " #impl ", " #sym "@" #verid)

#define __sym_default(sym,impl,verid) __asm__(".symver " #impl ", " #sym "@@" #verid)
# 593 "/usr/include/newlib/sys/cdefs.h" 3
#define __FBSDID(s) struct __hack



#define __RCSID(s) struct __hack



#define __RCSID_SOURCE(s) struct __hack



#define __SCCSID(s) struct __hack



#define __COPYRIGHT(s) struct __hack



#define __DECONST(type,var) ((type)(__uintptr_t)(const void *)(var))



#define __DEVOLATILE(type,var) ((type)(__uintptr_t)(volatile void *)(var))



#define __DEQUALIFY(type,var) ((type)(__uintptr_t)(const volatile void *)(var))






#define _Nonnull 
#define _Nullable 
#define _Null_unspecified 
#define __NULLABILITY_PRAGMA_PUSH 
#define __NULLABILITY_PRAGMA_POP 
# 653 "/usr/include/newlib/sys/cdefs.h" 3
#define __arg_type_tag(arg_kind,arg_idx,type_tag_idx) 
#define __datatype_type_tag(kind,type) 
# 672 "/usr/include/newlib/sys/cdefs.h" 3
#define __lock_annotate(x) 





#define __lockable __lock_annotate(lockable)


#define __locks_exclusive(...) __lock_annotate(exclusive_lock_function(__VA_ARGS__))

#define __locks_shared(...) __lock_annotate(shared_lock_function(__VA_ARGS__))



#define __trylocks_exclusive(...) __lock_annotate(exclusive_trylock_function(__VA_ARGS__))

#define __trylocks_shared(...) __lock_annotate(shared_trylock_function(__VA_ARGS__))



#define __unlocks(...) __lock_annotate(unlock_function(__VA_ARGS__))


#define __asserts_exclusive(...) __lock_annotate(assert_exclusive_lock(__VA_ARGS__))

#define __asserts_shared(...) __lock_annotate(assert_shared_lock(__VA_ARGS__))



#define __requires_exclusive(...) __lock_annotate(exclusive_locks_required(__VA_ARGS__))

#define __requires_shared(...) __lock_annotate(shared_locks_required(__VA_ARGS__))

#define __requires_unlocked(...) __lock_annotate(locks_excluded(__VA_ARGS__))



#define __no_lock_analysis __lock_annotate(no_thread_safety_analysis)


#define __guarded_by(x) __lock_annotate(guarded_by(x))
#define __pt_guarded_by(x) __lock_annotate(pt_guarded_by(x))
# 13 "/usr/include/newlib/string.h" 2 3


#define __need_size_t 
#define __need_NULL 
# 1 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 155 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 231 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef __need_size_t
# 340 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 390 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 401 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 18 "/usr/include/newlib/string.h" 2 3


# 1 "/usr/include/newlib/sys/_locale.h" 1 3



#define _SYS__LOCALE_H 




struct __locale_t;
typedef struct __locale_t *locale_t;
# 21 "/usr/include/newlib/string.h" 2 3



# 1 "/usr/include/newlib/strings.h" 1 3
# 30 "/usr/include/newlib/strings.h" 3
#define _STRINGS_H_ 
# 44 "/usr/include/newlib/strings.h" 3
extern "C" {

int bcmp(const void *, const void *, size_t) __attribute__((__pure__));
void bcopy(const void *, void *, size_t);
void bzero(void *, size_t);


void explicit_bzero(void *, size_t);


int ffs(int) __attribute__((__const__));


int ffsl(long) __attribute__((__const__));
int ffsll(long long) __attribute__((__const__));
int fls(int) __attribute__((__const__));
int flsl(long) __attribute__((__const__));
int flsll(long long) __attribute__((__const__));


char *index(const char *, int) __attribute__((__pure__));
char *rindex(const char *, int) __attribute__((__pure__));

int strcasecmp(const char *, const char *) __attribute__((__pure__));
int strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));


int strcasecmp_l (const char *, const char *, locale_t);
int strncasecmp_l (const char *, const char *, size_t, locale_t);

}
# 25 "/usr/include/newlib/string.h" 2 3


extern "C" {

void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void *, const void *, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *, const char *);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *, const char *);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *, const char *, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *, const char *, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *, const char *);

size_t strxfrm (char *, const char *, size_t);


int strcoll_l (const char *, const char *, locale_t);
char *strerror_l (int, locale_t);
size_t strxfrm_l (char *, const char *, size_t, locale_t);


char *strtok_r (char *, const char *, char **);


int timingsafe_bcmp (const void *, const void *, size_t);
int timingsafe_memcmp (const void *, const void *, size_t);


void * memccpy (void *, const void *, int, size_t);
# 76 "/usr/include/newlib/string.h" 3
char *stpcpy (char *, const char *);
char *stpncpy (char *, const char *, size_t);






char *strdup (const char *) __attribute__((__malloc__)) __attribute__((__warn_unused_result__));

char *_strdup_r (struct _reent *, const char *);

char *strndup (const char *, size_t) __attribute__((__malloc__)) __attribute__((__warn_unused_result__));

char *_strndup_r (struct _reent *, const char *, size_t);
# 100 "/usr/include/newlib/string.h" 3
int strerror_r (int, char *, size_t)

             __asm__ ("" "__xpg_strerror_r")

  ;







char * _strerror_r (struct _reent *, int, int, int *);


size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);


size_t strnlen (const char *, size_t);


char *strsep (char **, const char *);


char *strnstr(const char *, const char *, size_t) __attribute__((__pure__));



char *strlwr (char *);
char *strupr (char *);



char *strsignal (int __signo);
# 175 "/usr/include/newlib/string.h" 3
# 1 "/usr/include/newlib/sys/string.h" 1 3
# 176 "/usr/include/newlib/string.h" 2 3

}
# 34 "wirish/usb_serial.cpp" 2
# 1 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h" 1 3 4
# 29 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h" 3 4
#define _GCC_STDINT_H 




typedef signed char int8_t;


typedef short int int16_t;


typedef long int int32_t;


typedef long long int int64_t;


typedef unsigned char uint8_t;


typedef short unsigned int uint16_t;


typedef long unsigned int uint32_t;


typedef long long unsigned int uint64_t;




typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef long int int_least32_t;
typedef long long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef short unsigned int uint_least16_t;
typedef long unsigned int uint_least32_t;
typedef long long unsigned int uint_least64_t;



typedef int int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int int_fast64_t;
typedef unsigned int uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef long long unsigned int uint_fast64_t;




typedef int intptr_t;


typedef unsigned int uintptr_t;




typedef long long int intmax_t;
typedef long long unsigned int uintmax_t;







#undef INT8_MAX
#define INT8_MAX __INT8_MAX__
#undef INT8_MIN
#define INT8_MIN (-INT8_MAX - 1)


#undef UINT8_MAX
#define UINT8_MAX __UINT8_MAX__


#undef INT16_MAX
#define INT16_MAX __INT16_MAX__
#undef INT16_MIN
#define INT16_MIN (-INT16_MAX - 1)


#undef UINT16_MAX
#define UINT16_MAX __UINT16_MAX__


#undef INT32_MAX
#define INT32_MAX __INT32_MAX__
#undef INT32_MIN
#define INT32_MIN (-INT32_MAX - 1)


#undef UINT32_MAX
#define UINT32_MAX __UINT32_MAX__


#undef INT64_MAX
#define INT64_MAX __INT64_MAX__
#undef INT64_MIN
#define INT64_MIN (-INT64_MAX - 1)


#undef UINT64_MAX
#define UINT64_MAX __UINT64_MAX__


#undef INT_LEAST8_MAX
#define INT_LEAST8_MAX __INT_LEAST8_MAX__
#undef INT_LEAST8_MIN
#define INT_LEAST8_MIN (-INT_LEAST8_MAX - 1)
#undef UINT_LEAST8_MAX
#define UINT_LEAST8_MAX __UINT_LEAST8_MAX__
#undef INT_LEAST16_MAX
#define INT_LEAST16_MAX __INT_LEAST16_MAX__
#undef INT_LEAST16_MIN
#define INT_LEAST16_MIN (-INT_LEAST16_MAX - 1)
#undef UINT_LEAST16_MAX
#define UINT_LEAST16_MAX __UINT_LEAST16_MAX__
#undef INT_LEAST32_MAX
#define INT_LEAST32_MAX __INT_LEAST32_MAX__
#undef INT_LEAST32_MIN
#define INT_LEAST32_MIN (-INT_LEAST32_MAX - 1)
#undef UINT_LEAST32_MAX
#define UINT_LEAST32_MAX __UINT_LEAST32_MAX__
#undef INT_LEAST64_MAX
#define INT_LEAST64_MAX __INT_LEAST64_MAX__
#undef INT_LEAST64_MIN
#define INT_LEAST64_MIN (-INT_LEAST64_MAX - 1)
#undef UINT_LEAST64_MAX
#define UINT_LEAST64_MAX __UINT_LEAST64_MAX__

#undef INT_FAST8_MAX
#define INT_FAST8_MAX __INT_FAST8_MAX__
#undef INT_FAST8_MIN
#define INT_FAST8_MIN (-INT_FAST8_MAX - 1)
#undef UINT_FAST8_MAX
#define UINT_FAST8_MAX __UINT_FAST8_MAX__
#undef INT_FAST16_MAX
#define INT_FAST16_MAX __INT_FAST16_MAX__
#undef INT_FAST16_MIN
#define INT_FAST16_MIN (-INT_FAST16_MAX - 1)
#undef UINT_FAST16_MAX
#define UINT_FAST16_MAX __UINT_FAST16_MAX__
#undef INT_FAST32_MAX
#define INT_FAST32_MAX __INT_FAST32_MAX__
#undef INT_FAST32_MIN
#define INT_FAST32_MIN (-INT_FAST32_MAX - 1)
#undef UINT_FAST32_MAX
#define UINT_FAST32_MAX __UINT_FAST32_MAX__
#undef INT_FAST64_MAX
#define INT_FAST64_MAX __INT_FAST64_MAX__
#undef INT_FAST64_MIN
#define INT_FAST64_MIN (-INT_FAST64_MAX - 1)
#undef UINT_FAST64_MAX
#define UINT_FAST64_MAX __UINT_FAST64_MAX__


#undef INTPTR_MAX
#define INTPTR_MAX __INTPTR_MAX__
#undef INTPTR_MIN
#define INTPTR_MIN (-INTPTR_MAX - 1)


#undef UINTPTR_MAX
#define UINTPTR_MAX __UINTPTR_MAX__


#undef INTMAX_MAX
#define INTMAX_MAX __INTMAX_MAX__
#undef INTMAX_MIN
#define INTMAX_MIN (-INTMAX_MAX - 1)
#undef UINTMAX_MAX
#define UINTMAX_MAX __UINTMAX_MAX__



#undef PTRDIFF_MAX
#define PTRDIFF_MAX __PTRDIFF_MAX__
#undef PTRDIFF_MIN
#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)

#undef SIG_ATOMIC_MAX
#define SIG_ATOMIC_MAX __SIG_ATOMIC_MAX__
#undef SIG_ATOMIC_MIN
#define SIG_ATOMIC_MIN __SIG_ATOMIC_MIN__

#undef SIZE_MAX
#define SIZE_MAX __SIZE_MAX__

#undef WCHAR_MAX
#define WCHAR_MAX __WCHAR_MAX__
#undef WCHAR_MIN
#define WCHAR_MIN __WCHAR_MIN__

#undef WINT_MAX
#define WINT_MAX __WINT_MAX__
#undef WINT_MIN
#define WINT_MIN __WINT_MIN__







#undef INT8_C
#define INT8_C(c) __INT8_C(c)
#undef INT16_C
#define INT16_C(c) __INT16_C(c)
#undef INT32_C
#define INT32_C(c) __INT32_C(c)
#undef INT64_C
#define INT64_C(c) __INT64_C(c)
#undef UINT8_C
#define UINT8_C(c) __UINT8_C(c)
#undef UINT16_C
#define UINT16_C(c) __UINT16_C(c)
#undef UINT32_C
#define UINT32_C(c) __UINT32_C(c)
#undef UINT64_C
#define UINT64_C(c) __UINT64_C(c)
#undef INTMAX_C
#define INTMAX_C(c) __INTMAX_C(c)
#undef UINTMAX_C
#define UINTMAX_C(c) __UINTMAX_C(c)
# 35 "wirish/usb_serial.cpp" 2


# 1 "./libmaple/include/libmaple/usb_cdcacm.h" 1
# 35 "./libmaple/include/libmaple/usb_cdcacm.h"
#define _LIBMAPLE_USB_CDCACM_H_ 



# 1 "./libmaple/include/libmaple/usb.h" 1
# 32 "./libmaple/include/libmaple/usb.h"
#define _LIBMAPLE_USB_H_ 



# 35 "./libmaple/include/libmaple/usb.h"
extern "C" {
# 47 "./libmaple/include/libmaple/usb.h"
#define USB_DESCRIPTOR_TYPE_DEVICE 0x01
#define USB_DESCRIPTOR_TYPE_CONFIGURATION 0x02
#define USB_DESCRIPTOR_TYPE_STRING 0x03
#define USB_DESCRIPTOR_TYPE_INTERFACE 0x04
#define USB_DESCRIPTOR_TYPE_ENDPOINT 0x05



#define USB_DESCRIPTOR_STRING_LEN(x) (2 + (x << 1))

#define USB_DESCRIPTOR_STRING(len) struct { uint8 bLength; uint8 bDescriptorType; uint16 bString[len]; } __packed






typedef struct usb_descriptor_device {
    uint8 bLength;
    uint8 bDescriptorType;
    uint16 bcdUSB;
    uint8 bDeviceClass;
    uint8 bDeviceSubClass;
    uint8 bDeviceProtocol;
    uint8 bMaxPacketSize0;
    uint16 idVendor;
    uint16 idProduct;
    uint16 bcdDevice;
    uint8 iManufacturer;
    uint8 iProduct;
    uint8 iSerialNumber;
    uint8 bNumConfigurations;
} 
# 79 "./libmaple/include/libmaple/usb.h" 3
 __attribute__((__packed__)) 
# 79 "./libmaple/include/libmaple/usb.h"
          usb_descriptor_device;

typedef struct usb_descriptor_config_header {
    uint8 bLength;
    uint8 bDescriptorType;
    uint16 wTotalLength;
    uint8 bNumInterfaces;
    uint8 bConfigurationValue;
    uint8 iConfiguration;
    uint8 bmAttributes;
    uint8 bMaxPower;
} 
# 90 "./libmaple/include/libmaple/usb.h" 3
 __attribute__((__packed__)) 
# 90 "./libmaple/include/libmaple/usb.h"
          usb_descriptor_config_header;

typedef struct usb_descriptor_interface {
    uint8 bLength;
    uint8 bDescriptorType;
    uint8 bInterfaceNumber;
    uint8 bAlternateSetting;
    uint8 bNumEndpoints;
    uint8 bInterfaceClass;
    uint8 bInterfaceSubClass;
    uint8 bInterfaceProtocol;
    uint8 iInterface;
} 
# 102 "./libmaple/include/libmaple/usb.h" 3
 __attribute__((__packed__)) 
# 102 "./libmaple/include/libmaple/usb.h"
          usb_descriptor_interface;

typedef struct usb_descriptor_endpoint {
    uint8 bLength;
    uint8 bDescriptorType;
    uint8 bEndpointAddress;
    uint8 bmAttributes;
    uint16 wMaxPacketSize;
    uint8 bInterval;
} 
# 111 "./libmaple/include/libmaple/usb.h" 3
 __attribute__((__packed__)) 
# 111 "./libmaple/include/libmaple/usb.h"
          usb_descriptor_endpoint;

typedef struct usb_descriptor_string {
    uint8 bLength;
    uint8 bDescriptorType;
    uint8 bString[];
} usb_descriptor_string;



#define USB_CONFIG_ATTR_BUSPOWERED 0b10000000
#define USB_CONFIG_ATTR_SELF_POWERED 0b11000000

#define USB_EP_TYPE_INTERRUPT 0x03
#define USB_EP_TYPE_BULK 0x02

#define USB_DESCRIPTOR_ENDPOINT_IN 0x80
#define USB_DESCRIPTOR_ENDPOINT_OUT 0x00







#define USB_ISR_MSK 0xBF00


typedef enum usb_dev_state {
    USB_UNCONNECTED,
    USB_ATTACHED,
    USB_POWERED,
    USB_SUSPENDED,
    USB_ADDRESSED,
    USB_CONFIGURED
} usb_dev_state;


typedef struct usblib_dev {
    uint32 irq_mask;
    void (**ep_int_in)(void);
    void (**ep_int_out)(void);
    usb_dev_state state;
    usb_dev_state prevState;
    rcc_clk_id clk_id;
} usblib_dev;

extern usblib_dev *USBLIB;

void usb_init_usblib(usblib_dev *dev,
                     void (**ep_int_in)(void),
                     void (**ep_int_out)(void));

static inline uint8 usb_is_connected(usblib_dev *dev) {
    return dev->state != USB_UNCONNECTED;
}

static inline uint8 usb_is_configured(usblib_dev *dev) {
    return dev->state == USB_CONFIGURED;
}


}
# 40 "./libmaple/include/libmaple/usb_cdcacm.h" 2


extern "C" {






#define USB_CDCACM_SET_LINE_CODING 0x20
#define USB_CDCACM_GET_LINE_CODING 0x21
#define USB_CDCACM_SET_COMM_FEATURE 0x02
#define USB_CDCACM_SET_CONTROL_LINE_STATE 0x22
#define USB_CDCACM_CONTROL_LINE_DTR (0x01)
#define USB_CDCACM_CONTROL_LINE_RTS (0x02)





#define CDC_FUNCTIONAL_DESCRIPTOR_SIZE(DataSize) (3 + DataSize)
#define CDC_FUNCTIONAL_DESCRIPTOR(DataSize) struct { uint8 bLength; uint8 bDescriptorType; uint8 SubType; uint8 Data[DataSize]; } __packed







#define USB_DEVICE_CLASS_CDC 0x02
#define USB_DEVICE_SUBCLASS_CDC 0x00
#define USB_INTERFACE_CLASS_CDC 0x02
#define USB_INTERFACE_SUBCLASS_CDC_ACM 0x02
#define USB_INTERFACE_CLASS_DIC 0x0A





#define USB_CDCACM_CTRL_ENDP 0
#define USB_CDCACM_CTRL_RX_ADDR 0x40
#define USB_CDCACM_CTRL_TX_ADDR 0x80
#define USB_CDCACM_CTRL_EPSIZE 0x40

#define USB_CDCACM_TX_ENDP 1
#define USB_CDCACM_TX_ADDR 0xC0
#define USB_CDCACM_TX_EPSIZE 0x40

#define USB_CDCACM_MANAGEMENT_ENDP 2
#define USB_CDCACM_MANAGEMENT_ADDR 0x100
#define USB_CDCACM_MANAGEMENT_EPSIZE 0x40

#define USB_CDCACM_RX_ENDP 3
#define USB_CDCACM_RX_ADDR 0x110
#define USB_CDCACM_RX_EPSIZE 0x40
# 120 "./libmaple/include/libmaple/usb_cdcacm.h"
void usb_cdcacm_enable(gpio_dev*, uint8);
void usb_cdcacm_disable(gpio_dev*, uint8);

void usb_cdcacm_putc(char ch);
uint32 usb_cdcacm_tx(const uint8* buf, uint32 len);
uint32 usb_cdcacm_rx(uint8* buf, uint32 len);
uint32 usb_cdcacm_peek(uint8* buf, uint32 len);

uint32 usb_cdcacm_data_available(void);
uint16 usb_cdcacm_get_pending(void);
uint8 usb_cdcacm_is_transmitting(void);

uint8 usb_cdcacm_get_dtr(void);
uint8 usb_cdcacm_get_rts(void);

typedef struct usb_cdcacm_line_coding {
    uint32 dwDTERate;

#define USB_CDCACM_STOP_BITS_1 0
#define USB_CDCACM_STOP_BITS_1_5 1
#define USB_CDCACM_STOP_BITS_2 2
    uint8 bCharFormat;

#define USB_CDCACM_PARITY_NONE 0
#define USB_CDCACM_PARITY_ODD 1
#define USB_CDCACM_PARITY_EVEN 2
#define USB_CDCACM_PARITY_MARK 3
#define USB_CDCACM_PARITY_SPACE 4
    uint8 bParityType;

    uint8 bDataBits;
} 
# 151 "./libmaple/include/libmaple/usb_cdcacm.h" 3
 __attribute__((__packed__)) 
# 151 "./libmaple/include/libmaple/usb_cdcacm.h"
          usb_cdcacm_line_coding;


void usb_cdcacm_get_line_coding(usb_cdcacm_line_coding*);


int usb_cdcacm_get_baud(void);
int usb_cdcacm_get_stop_bits(void);
int usb_cdcacm_get_parity(void);
int usb_cdcacm_get_n_data_bits(void);





#define USB_CDCACM_HOOK_RX 0x1
#define USB_CDCACM_HOOK_IFACE_SETUP 0x2

void usb_cdcacm_set_hooks(unsigned hook_flags, void (*hook)(unsigned, void*));

static inline 
# 171 "./libmaple/include/libmaple/usb_cdcacm.h" 3
             __inline__ __attribute__((__always_inline__)) 
# 171 "./libmaple/include/libmaple/usb_cdcacm.h"
                             void usb_cdcacm_remove_hooks(unsigned hook_flags) {
    usb_cdcacm_set_hooks(hook_flags, 0);
}


}
# 38 "wirish/usb_serial.cpp" 2

# 1 "./libmaple/include/libmaple/iwdg.h" 1
# 42 "./libmaple/include/libmaple/iwdg.h"
#define _LIBMAPLE_IWDG_H_ 


extern "C"{
# 55 "./libmaple/include/libmaple/iwdg.h"
typedef struct iwdg_reg_map {
    volatile uint32 KR;
    volatile uint32 PR;
    volatile uint32 RLR;
    volatile uint32 SR;
} iwdg_reg_map;


#define IWDG_BASE ((struct iwdg_reg_map*)0x40003000)

typedef struct wwdg_reg_map {
    volatile uint32 CR;
    volatile uint32 CFR;
    volatile uint32 SR;
} wwdg_reg_map;

#define WWDG_BASE ((struct wwdg_reg_map*)0x40002C00)







#define IWDG_KR_UNLOCK 0x5555
#define IWDG_KR_FEED 0xAAAA
#define IWDG_KR_START 0xCCCC



#define IWDG_PR_DIV_4 0x0
#define IWDG_PR_DIV_8 0x1
#define IWDG_PR_DIV_16 0x2
#define IWDG_PR_DIV_32 0x3
#define IWDG_PR_DIV_64 0x4
#define IWDG_PR_DIV_128 0x5
#define IWDG_PR_DIV_256 0x6



#define IWDG_SR_RVU_BIT 1
#define IWDG_SR_PVU_BIT 0

#define IWDG_SR_RVU (1U << IWDG_SR_RVU_BIT)
#define IWDG_SR_PVU (1U << IWDG_SR_PVU_BIT)






typedef enum iwdg_prescaler {
    IWDG_PRE_4 = 0x0,
    IWDG_PRE_8 = 0x1,
    IWDG_PRE_16 = 0x2,
    IWDG_PRE_32 = 0x3,
    IWDG_PRE_64 = 0x4,
    IWDG_PRE_128 = 0x5,
    IWDG_PRE_256 = 0x6
} iwdg_prescaler;

void iwdg_init(iwdg_prescaler prescaler, uint16 reload);
void iwdg_feed(void);


}
# 40 "wirish/usb_serial.cpp" 2

# 1 "./wirish/include/wirish/wirish.h" 1
# 35 "./wirish/include/wirish/wirish.h"
#define _WIRISH_WIRISH_H_ 




# 1 "./wirish/include/wirish/io.h" 1
# 33 "./wirish/include/wirish/io.h"
#define _WIRISH_IO_H_ 
# 42 "./wirish/include/wirish/io.h"
typedef enum WiringPinMode {
    OUTPUT,



    OUTPUT_OPEN_DRAIN,
# 63 "./wirish/include/wirish/io.h"
    INPUT,







    INPUT_ANALOG,




    INPUT_PULLUP,







    INPUT_PULLDOWN,







    INPUT_FLOATING,

    PWM,


    PWM_OPEN_DRAIN,



} WiringPinMode;
# 110 "./wirish/include/wirish/io.h"
void pinMode(uint8 pin, WiringPinMode mode);

#define HIGH 0x1
#define LOW 0x0
# 123 "./wirish/include/wirish/io.h"
void digitalWrite(uint8 pin, uint8 value);
# 133 "./wirish/include/wirish/io.h"
uint32 digitalRead(uint8 pin);
# 145 "./wirish/include/wirish/io.h"
uint16 analogRead(uint8 pin);
void analogReadRun(uint8 pin);
uint16 analogReadValue(uint8 pin);
# 159 "./wirish/include/wirish/io.h"
void togglePin(uint8 pin);
# 172 "./wirish/include/wirish/io.h"
static inline void toggleLED() {
    togglePin(13);
}
# 186 "./wirish/include/wirish/io.h"
uint8 isButtonPressed(uint8 pin=38,
                      uint32 pressedLevel=0x1);
# 206 "./wirish/include/wirish/io.h"
uint8 waitForButtonPress(uint32 timeout_millis=0);
# 222 "./wirish/include/wirish/io.h"
void shiftOut(uint8 dataPin, uint8 clockPin, uint8 bitOrder, uint8 value);
# 41 "./wirish/include/wirish/wirish.h" 2
# 1 "./wirish/include/wirish/bit_constants.h" 1
# 33 "./wirish/include/wirish/bit_constants.h"
#define _WIRISH_BIT_CONSTANTS_H_ 

#define BIT0 (1 << 0)
#define BIT1 (1 << 1)
#define BIT2 (1 << 2)
#define BIT3 (1 << 3)
#define BIT4 (1 << 4)
#define BIT5 (1 << 5)
#define BIT6 (1 << 6)
#define BIT7 (1 << 7)
#define BIT8 (1 << 8)
#define BIT9 (1 << 9)
#define BIT10 (1 << 10)
#define BIT11 (1 << 11)
#define BIT12 (1 << 12)
#define BIT13 (1 << 13)
#define BIT14 (1 << 14)
#define BIT15 (1 << 15)
#define BIT16 (1 << 16)
#define BIT17 (1 << 17)
#define BIT18 (1 << 18)
#define BIT19 (1 << 19)
#define BIT20 (1 << 20)
#define BIT21 (1 << 21)
#define BIT22 (1 << 22)
#define BIT23 (1 << 23)
#define BIT24 (1 << 24)
#define BIT25 (1 << 25)
#define BIT26 (1 << 26)
#define BIT27 (1 << 27)
#define BIT28 (1 << 28)
#define BIT29 (1 << 29)
#define BIT30 (1 << 30)
#define BIT31 (1 << 31)

#define B0 0
#define B00 0
#define B000 0
#define B0000 0
#define B00000 0
#define B000000 0
#define B0000000 0
#define B00000000 0
#define B1 1
#define B01 1
#define B001 1
#define B0001 1
#define B00001 1
#define B000001 1
#define B0000001 1
#define B00000001 1
#define B10 2
#define B010 2
#define B0010 2
#define B00010 2
#define B000010 2
#define B0000010 2
#define B00000010 2
#define B11 3
#define B011 3
#define B0011 3
#define B00011 3
#define B000011 3
#define B0000011 3
#define B00000011 3
#define B100 4
#define B0100 4
#define B00100 4
#define B000100 4
#define B0000100 4
#define B00000100 4
#define B101 5
#define B0101 5
#define B00101 5
#define B000101 5
#define B0000101 5
#define B00000101 5
#define B110 6
#define B0110 6
#define B00110 6
#define B000110 6
#define B0000110 6
#define B00000110 6
#define B111 7
#define B0111 7
#define B00111 7
#define B000111 7
#define B0000111 7
#define B00000111 7
#define B1000 8
#define B01000 8
#define B001000 8
#define B0001000 8
#define B00001000 8
#define B1001 9
#define B01001 9
#define B001001 9
#define B0001001 9
#define B00001001 9
#define B1010 10
#define B01010 10
#define B001010 10
#define B0001010 10
#define B00001010 10
#define B1011 11
#define B01011 11
#define B001011 11
#define B0001011 11
#define B00001011 11
#define B1100 12
#define B01100 12
#define B001100 12
#define B0001100 12
#define B00001100 12
#define B1101 13
#define B01101 13
#define B001101 13
#define B0001101 13
#define B00001101 13
#define B1110 14
#define B01110 14
#define B001110 14
#define B0001110 14
#define B00001110 14
#define B1111 15
#define B01111 15
#define B001111 15
#define B0001111 15
#define B00001111 15
#define B10000 16
#define B010000 16
#define B0010000 16
#define B00010000 16
#define B10001 17
#define B010001 17
#define B0010001 17
#define B00010001 17
#define B10010 18
#define B010010 18
#define B0010010 18
#define B00010010 18
#define B10011 19
#define B010011 19
#define B0010011 19
#define B00010011 19
#define B10100 20
#define B010100 20
#define B0010100 20
#define B00010100 20
#define B10101 21
#define B010101 21
#define B0010101 21
#define B00010101 21
#define B10110 22
#define B010110 22
#define B0010110 22
#define B00010110 22
#define B10111 23
#define B010111 23
#define B0010111 23
#define B00010111 23
#define B11000 24
#define B011000 24
#define B0011000 24
#define B00011000 24
#define B11001 25
#define B011001 25
#define B0011001 25
#define B00011001 25
#define B11010 26
#define B011010 26
#define B0011010 26
#define B00011010 26
#define B11011 27
#define B011011 27
#define B0011011 27
#define B00011011 27
#define B11100 28
#define B011100 28
#define B0011100 28
#define B00011100 28
#define B11101 29
#define B011101 29
#define B0011101 29
#define B00011101 29
#define B11110 30
#define B011110 30
#define B0011110 30
#define B00011110 30
#define B11111 31
#define B011111 31
#define B0011111 31
#define B00011111 31
#define B100000 32
#define B0100000 32
#define B00100000 32
#define B100001 33
#define B0100001 33
#define B00100001 33
#define B100010 34
#define B0100010 34
#define B00100010 34
#define B100011 35
#define B0100011 35
#define B00100011 35
#define B100100 36
#define B0100100 36
#define B00100100 36
#define B100101 37
#define B0100101 37
#define B00100101 37
#define B100110 38
#define B0100110 38
#define B00100110 38
#define B100111 39
#define B0100111 39
#define B00100111 39
#define B101000 40
#define B0101000 40
#define B00101000 40
#define B101001 41
#define B0101001 41
#define B00101001 41
#define B101010 42
#define B0101010 42
#define B00101010 42
#define B101011 43
#define B0101011 43
#define B00101011 43
#define B101100 44
#define B0101100 44
#define B00101100 44
#define B101101 45
#define B0101101 45
#define B00101101 45
#define B101110 46
#define B0101110 46
#define B00101110 46
#define B101111 47
#define B0101111 47
#define B00101111 47
#define B110000 48
#define B0110000 48
#define B00110000 48
#define B110001 49
#define B0110001 49
#define B00110001 49
#define B110010 50
#define B0110010 50
#define B00110010 50
#define B110011 51
#define B0110011 51
#define B00110011 51
#define B110100 52
#define B0110100 52
#define B00110100 52
#define B110101 53
#define B0110101 53
#define B00110101 53
#define B110110 54
#define B0110110 54
#define B00110110 54
#define B110111 55
#define B0110111 55
#define B00110111 55
#define B111000 56
#define B0111000 56
#define B00111000 56
#define B111001 57
#define B0111001 57
#define B00111001 57
#define B111010 58
#define B0111010 58
#define B00111010 58
#define B111011 59
#define B0111011 59
#define B00111011 59
#define B111100 60
#define B0111100 60
#define B00111100 60
#define B111101 61
#define B0111101 61
#define B00111101 61
#define B111110 62
#define B0111110 62
#define B00111110 62
#define B111111 63
#define B0111111 63
#define B00111111 63
#define B1000000 64
#define B01000000 64
#define B1000001 65
#define B01000001 65
#define B1000010 66
#define B01000010 66
#define B1000011 67
#define B01000011 67
#define B1000100 68
#define B01000100 68
#define B1000101 69
#define B01000101 69
#define B1000110 70
#define B01000110 70
#define B1000111 71
#define B01000111 71
#define B1001000 72
#define B01001000 72
#define B1001001 73
#define B01001001 73
#define B1001010 74
#define B01001010 74
#define B1001011 75
#define B01001011 75
#define B1001100 76
#define B01001100 76
#define B1001101 77
#define B01001101 77
#define B1001110 78
#define B01001110 78
#define B1001111 79
#define B01001111 79
#define B1010000 80
#define B01010000 80
#define B1010001 81
#define B01010001 81
#define B1010010 82
#define B01010010 82
#define B1010011 83
#define B01010011 83
#define B1010100 84
#define B01010100 84
#define B1010101 85
#define B01010101 85
#define B1010110 86
#define B01010110 86
#define B1010111 87
#define B01010111 87
#define B1011000 88
#define B01011000 88
#define B1011001 89
#define B01011001 89
#define B1011010 90
#define B01011010 90
#define B1011011 91
#define B01011011 91
#define B1011100 92
#define B01011100 92
#define B1011101 93
#define B01011101 93
#define B1011110 94
#define B01011110 94
#define B1011111 95
#define B01011111 95
#define B1100000 96
#define B01100000 96
#define B1100001 97
#define B01100001 97
#define B1100010 98
#define B01100010 98
#define B1100011 99
#define B01100011 99
#define B1100100 100
#define B01100100 100
#define B1100101 101
#define B01100101 101
#define B1100110 102
#define B01100110 102
#define B1100111 103
#define B01100111 103
#define B1101000 104
#define B01101000 104
#define B1101001 105
#define B01101001 105
#define B1101010 106
#define B01101010 106
#define B1101011 107
#define B01101011 107
#define B1101100 108
#define B01101100 108
#define B1101101 109
#define B01101101 109
#define B1101110 110
#define B01101110 110
#define B1101111 111
#define B01101111 111
#define B1110000 112
#define B01110000 112
#define B1110001 113
#define B01110001 113
#define B1110010 114
#define B01110010 114
#define B1110011 115
#define B01110011 115
#define B1110100 116
#define B01110100 116
#define B1110101 117
#define B01110101 117
#define B1110110 118
#define B01110110 118
#define B1110111 119
#define B01110111 119
#define B1111000 120
#define B01111000 120
#define B1111001 121
#define B01111001 121
#define B1111010 122
#define B01111010 122
#define B1111011 123
#define B01111011 123
#define B1111100 124
#define B01111100 124
#define B1111101 125
#define B01111101 125
#define B1111110 126
#define B01111110 126
#define B1111111 127
#define B01111111 127
#define B10000000 128
#define B10000001 129
#define B10000010 130
#define B10000011 131
#define B10000100 132
#define B10000101 133
#define B10000110 134
#define B10000111 135
#define B10001000 136
#define B10001001 137
#define B10001010 138
#define B10001011 139
#define B10001100 140
#define B10001101 141
#define B10001110 142
#define B10001111 143
#define B10010000 144
#define B10010001 145
#define B10010010 146
#define B10010011 147
#define B10010100 148
#define B10010101 149
#define B10010110 150
#define B10010111 151
#define B10011000 152
#define B10011001 153
#define B10011010 154
#define B10011011 155
#define B10011100 156
#define B10011101 157
#define B10011110 158
#define B10011111 159
#define B10100000 160
#define B10100001 161
#define B10100010 162
#define B10100011 163
#define B10100100 164
#define B10100101 165
#define B10100110 166
#define B10100111 167
#define B10101000 168
#define B10101001 169
#define B10101010 170
#define B10101011 171
#define B10101100 172
#define B10101101 173
#define B10101110 174
#define B10101111 175
#define B10110000 176
#define B10110001 177
#define B10110010 178
#define B10110011 179
#define B10110100 180
#define B10110101 181
#define B10110110 182
#define B10110111 183
#define B10111000 184
#define B10111001 185
#define B10111010 186
#define B10111011 187
#define B10111100 188
#define B10111101 189
#define B10111110 190
#define B10111111 191
#define B11000000 192
#define B11000001 193
#define B11000010 194
#define B11000011 195
#define B11000100 196
#define B11000101 197
#define B11000110 198
#define B11000111 199
#define B11001000 200
#define B11001001 201
#define B11001010 202
#define B11001011 203
#define B11001100 204
#define B11001101 205
#define B11001110 206
#define B11001111 207
#define B11010000 208
#define B11010001 209
#define B11010010 210
#define B11010011 211
#define B11010100 212
#define B11010101 213
#define B11010110 214
#define B11010111 215
#define B11011000 216
#define B11011001 217
#define B11011010 218
#define B11011011 219
#define B11011100 220
#define B11011101 221
#define B11011110 222
#define B11011111 223
#define B11100000 224
#define B11100001 225
#define B11100010 226
#define B11100011 227
#define B11100100 228
#define B11100101 229
#define B11100110 230
#define B11100111 231
#define B11101000 232
#define B11101001 233
#define B11101010 234
#define B11101011 235
#define B11101100 236
#define B11101101 237
#define B11101110 238
#define B11101111 239
#define B11110000 240
#define B11110001 241
#define B11110010 242
#define B11110011 243
#define B11110100 244
#define B11110101 245
#define B11110110 246
#define B11110111 247
#define B11111000 248
#define B11111001 249
#define B11111010 250
#define B11111011 251
#define B11111100 252
#define B11111101 253
#define B11111110 254
#define B11111111 255
# 42 "./wirish/include/wirish/wirish.h" 2
# 1 "./wirish/include/wirish/pwm.h" 1
# 33 "./wirish/include/wirish/pwm.h"
#define _WIRISH_PWM_H_ 
# 42 "./wirish/include/wirish/pwm.h"
#define analogWrite pwmWrite
# 53 "./wirish/include/wirish/pwm.h"
void pwmWrite(uint8 pin, uint16 duty_cycle);
# 43 "./wirish/include/wirish/wirish.h" 2
# 1 "./wirish/include/wirish/ext_interrupts.h" 1
# 33 "./wirish/include/wirish/ext_interrupts.h"
#define _WIRISH_EXT_INTERRUPTS_H_ 
# 42 "./wirish/include/wirish/ext_interrupts.h"
typedef enum ExtIntTriggerMode {
    RISING,

    FALLING,

    CHANGE


} ExtIntTriggerMode;
# 69 "./wirish/include/wirish/ext_interrupts.h"
void attachInterrupt(uint8 pin, voidFuncPtr handler, ExtIntTriggerMode mode);
# 90 "./wirish/include/wirish/ext_interrupts.h"
void attachInterrupt(uint8 pin, voidArgumentFuncPtr handler, void *arg,
                     ExtIntTriggerMode mode);







void detachInterrupt(uint8 pin);
# 109 "./wirish/include/wirish/ext_interrupts.h"
static inline 
# 109 "./wirish/include/wirish/ext_interrupts.h" 3
             __inline__ __attribute__((__always_inline__)) 
# 109 "./wirish/include/wirish/ext_interrupts.h"
                             void interrupts() {
    nvic_globalirq_enable();
}
# 123 "./wirish/include/wirish/ext_interrupts.h"
static inline 
# 123 "./wirish/include/wirish/ext_interrupts.h" 3
             __inline__ __attribute__((__always_inline__)) 
# 123 "./wirish/include/wirish/ext_interrupts.h"
                             void noInterrupts() {
    nvic_globalirq_disable();
}
# 44 "./wirish/include/wirish/wirish.h" 2
# 1 "./wirish/include/wirish/wirish_debug.h" 1
# 33 "./wirish/include/wirish/wirish_debug.h"
#define _WIRISH_WIRISH_DEBUG_H_ 
# 45 "./wirish/include/wirish/wirish_debug.h"
void disableDebugPorts(void);
# 55 "./wirish/include/wirish/wirish_debug.h"
void enableDebugPorts(void);
# 45 "./wirish/include/wirish/wirish.h" 2
# 1 "./wirish/include/wirish/wirish_math.h" 1
# 33 "./wirish/include/wirish/wirish_math.h"
#define _WIRISH_WIRISH_MATH_H_ 

# 1 "/usr/include/newlib/c++/9.2.1/math.h" 1 3
# 34 "/usr/include/newlib/c++/9.2.1/math.h" 3
#define _GLIBCXX_MATH_H 1

# 1 "/usr/include/newlib/c++/9.2.1/cmath" 1 3
# 39 "/usr/include/newlib/c++/9.2.1/cmath" 3
       
# 40 "/usr/include/newlib/c++/9.2.1/cmath" 3

# 1 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 1 3
# 31 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_CXX_CONFIG_H 1


#define _GLIBCXX_RELEASE 9


#define __GLIBCXX__ 20191025
# 46 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_PURE __attribute__ ((__pure__))



#define _GLIBCXX_CONST __attribute__ ((__const__))



#define _GLIBCXX_NORETURN __attribute__ ((__noreturn__))
# 67 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY 1


#define _GLIBCXX_VISIBILITY(V) __attribute__ ((__visibility__ (#V)))
# 82 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_USE_DEPRECATED 1



#define _GLIBCXX_DEPRECATED __attribute__ ((__deprecated__))







#define _GLIBCXX17_DEPRECATED 




#define _GLIBCXX_ABI_TAG_CXX11 __attribute ((__abi_tag__ ("cxx11")))






#define _GLIBCXX_NODISCARD 
# 116 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_CONSTEXPR constexpr
#define _GLIBCXX_USE_CONSTEXPR constexpr
# 126 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX14_CONSTEXPR constexpr
# 136 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX17_CONSTEXPR 







#define _GLIBCXX20_CONSTEXPR 







#define _GLIBCXX17_INLINE 






#define _GLIBCXX_NOEXCEPT noexcept
#define _GLIBCXX_NOEXCEPT_IF(_COND) noexcept(_COND)
#define _GLIBCXX_USE_NOEXCEPT noexcept
#define _GLIBCXX_THROW(_EXC) 
# 172 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_NOTHROW _GLIBCXX_USE_NOEXCEPT






#define _GLIBCXX_THROW_OR_ABORT(_EXC) (__builtin_abort())







#define _GLIBCXX_NOEXCEPT_PARM 
#define _GLIBCXX_NOEXCEPT_QUAL 
# 201 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_EXTERN_TEMPLATE 1
# 252 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3

# 252 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
namespace std
{
  typedef unsigned int size_t;
  typedef int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}

#define _GLIBCXX_USE_DUAL_ABI 1







#define _GLIBCXX_USE_CXX11_ABI 1



namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
#define _GLIBCXX_NAMESPACE_CXX11 __cxx11::
#define _GLIBCXX_BEGIN_NAMESPACE_CXX11 namespace __cxx11 {
#define _GLIBCXX_END_NAMESPACE_CXX11 }
#define _GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_ABI_TAG_CXX11
# 294 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_INLINE_VERSION 0
# 324 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_BEGIN_NAMESPACE_VERSION 
#define _GLIBCXX_END_NAMESPACE_VERSION 
# 395 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_STD_C std
#define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER 
#define _GLIBCXX_END_NAMESPACE_CONTAINER 
# 406 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_STD_A std
#define _GLIBCXX_BEGIN_NAMESPACE_ALGO 
#define _GLIBCXX_END_NAMESPACE_ALGO 




#undef _GLIBCXX_LONG_DOUBLE_COMPAT
# 425 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_NAMESPACE_LDBL 
#define _GLIBCXX_BEGIN_NAMESPACE_LDBL 
#define _GLIBCXX_END_NAMESPACE_LDBL 


#define _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_NAMESPACE_CXX11
#define _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_BEGIN_NAMESPACE_CXX11
#define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_END_NAMESPACE_CXX11
# 478 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define __glibcxx_assert(_Condition) 
# 503 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(A) 


#define _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(A) 



#define _GLIBCXX_BEGIN_EXTERN_C extern "C" {
#define _GLIBCXX_END_EXTERN_C }

#define _GLIBCXX_USE_ALLOCATOR_NEW 1
# 524 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
# 1 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/os_defines.h" 1 3
# 31 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/os_defines.h" 3
#define _GLIBCXX_OS_DEFINES 1
# 525 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 2 3


# 1 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/cpu_defines.h" 1 3
# 31 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/cpu_defines.h" 3
#define _GLIBCXX_CPU_DEFINES 1



#define __glibcxx_integral_traps false
# 528 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 2 3




#define _GLIBCXX_PSEUDO_VISIBILITY(V) 






#define _GLIBCXX_WEAK_DEFINITION 







#define _GLIBCXX_USE_WEAK_REF __GXX_WEAK__
# 560 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_TXN_SAFE 
#define _GLIBCXX_TXN_SAFE_DYN 
# 579 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_FAST_MATH 0






#define __N(msgid) (msgid)


#undef min
#undef max





#define _GLIBCXX_USE_C99_MATH _GLIBCXX11_USE_C99_MATH


#define _GLIBCXX_USE_C99_COMPLEX _GLIBCXX11_USE_C99_COMPLEX


#define _GLIBCXX_USE_C99_STDIO _GLIBCXX11_USE_C99_STDIO


#define _GLIBCXX_USE_C99_STDLIB _GLIBCXX11_USE_C99_STDLIB


#define _GLIBCXX_USE_C99_WCHAR _GLIBCXX11_USE_C99_WCHAR
# 646 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP 1
#define _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE 1
#define _GLIBCXX_HAVE_BUILTIN_LAUNDER 1

#define _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED 1
# 696 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_ACOSF 1
# 708 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_ASINF 1





#define _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE 1


#define _GLIBCXX_HAVE_ATAN2F 1





#define _GLIBCXX_HAVE_ATANF 1





#define _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY 1
# 738 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_CEILF 1





#define _GLIBCXX_HAVE_COMPLEX_H 1


#define _GLIBCXX_HAVE_COSF 1


#define _GLIBCXX_HAVE_COSHF 1
# 765 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_EBADMSG 1


#define _GLIBCXX_HAVE_ECANCELED 1


#define _GLIBCXX_HAVE_ECHILD 1


#define _GLIBCXX_HAVE_EIDRM 1





#define _GLIBCXX_HAVE_ENODATA 1


#define _GLIBCXX_HAVE_ENOLINK 1


#define _GLIBCXX_HAVE_ENOSPC 1


#define _GLIBCXX_HAVE_ENOSR 1


#define _GLIBCXX_HAVE_ENOSTR 1


#define _GLIBCXX_HAVE_ENOTRECOVERABLE 1


#define _GLIBCXX_HAVE_ENOTSUP 1


#define _GLIBCXX_HAVE_EOVERFLOW 1


#define _GLIBCXX_HAVE_EOWNERDEAD 1


#define _GLIBCXX_HAVE_EPERM 1


#define _GLIBCXX_HAVE_EPROTO 1


#define _GLIBCXX_HAVE_ETIME 1


#define _GLIBCXX_HAVE_ETIMEDOUT 1


#define _GLIBCXX_HAVE_ETXTBSY 1


#define _GLIBCXX_HAVE_EWOULDBLOCK 1
# 831 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_EXPF 1





#define _GLIBCXX_HAVE_FABSF 1





#define _GLIBCXX_HAVE_FCNTL_H 1


#define _GLIBCXX_HAVE_FENV_H 1
# 858 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_FLOAT_H 1


#define _GLIBCXX_HAVE_FLOORF 1





#define _GLIBCXX_HAVE_FMODF 1
# 879 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_FREXPF 1





#define _GLIBCXX_HAVE_GETIPINFO 1


#define _GLIBCXX_HAVE_GETS 1


#define _GLIBCXX_HAVE_HYPOT 1
# 900 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_ICONV 1


#define _GLIBCXX_HAVE_IEEEFP_H 1


#define _GLIBCXX_HAVE_INT64_T 1





#define _GLIBCXX_HAVE_INT64_T_LONG_LONG 1


#define _GLIBCXX_HAVE_INTTYPES_H 1
# 936 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_ISWBLANK 1


#define _GLIBCXX_HAVE_LC_MESSAGES 1


#define _GLIBCXX_HAVE_LDEXPF 1
# 951 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_LIMIT_AS 0


#define _GLIBCXX_HAVE_LIMIT_DATA 0


#define _GLIBCXX_HAVE_LIMIT_FSIZE 0


#define _GLIBCXX_HAVE_LIMIT_RSS 0


#define _GLIBCXX_HAVE_LIMIT_VMEM 0
# 978 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_LOCALE_H 1


#define _GLIBCXX_HAVE_LOG10F 1





#define _GLIBCXX_HAVE_LOGF 1





#define _GLIBCXX_HAVE_MACHINE_ENDIAN_H 1


#define _GLIBCXX_HAVE_MACHINE_PARAM_H 1


#define _GLIBCXX_HAVE_MBSTATE_T 1


#define _GLIBCXX_HAVE_MEMALIGN 1


#define _GLIBCXX_HAVE_MEMORY_H 1





#define _GLIBCXX_HAVE_MODFF 1
# 1044 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_POWF 1
# 1071 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_SINF 1


#define _GLIBCXX_HAVE_SINHF 1
# 1083 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_SLEEP 1





#define _GLIBCXX_HAVE_SQRTF 1





#define _GLIBCXX_HAVE_STDALIGN_H 1


#define _GLIBCXX_HAVE_STDBOOL_H 1


#define _GLIBCXX_HAVE_STDINT_H 1


#define _GLIBCXX_HAVE_STDLIB_H 1





#define _GLIBCXX_HAVE_STRERROR_R 1


#define _GLIBCXX_HAVE_STRINGS_H 1


#define _GLIBCXX_HAVE_STRING_H 1


#define _GLIBCXX_HAVE_STRTOF 1
# 1153 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_SYS_PARAM_H 1


#define _GLIBCXX_HAVE_SYS_RESOURCE_H 1
# 1171 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_SYS_STAT_H 1





#define _GLIBCXX_HAVE_SYS_TIME_H 1


#define _GLIBCXX_HAVE_SYS_TYPES_H 1
# 1189 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_S_ISREG 1


#define _GLIBCXX_HAVE_TANF 1


#define _GLIBCXX_HAVE_TANHF 1
# 1204 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_TGMATH_H 1
# 1219 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_HAVE_UNISTD_H 1


#define _GLIBCXX_HAVE_USLEEP 1


#define _GLIBCXX_HAVE_UTIME_H 1


#define _GLIBCXX_HAVE_VFWSCANF 1


#define _GLIBCXX_HAVE_VSWSCANF 1


#define _GLIBCXX_HAVE_VWSCANF 1


#define _GLIBCXX_HAVE_WCHAR_H 1


#define _GLIBCXX_HAVE_WCSTOF 1


#define _GLIBCXX_HAVE_WCTYPE_H 1
# 1454 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define LT_OBJDIR ".libs/"





#define _GLIBCXX_PACKAGE_BUGREPORT ""


#define _GLIBCXX_PACKAGE_NAME "package-unused"


#define _GLIBCXX_PACKAGE_STRING "package-unused version-unused"


#define _GLIBCXX_PACKAGE_TARNAME "libstdc++"


#define _GLIBCXX_PACKAGE_URL ""


#define _GLIBCXX_PACKAGE__GLIBCXX_VERSION "version-unused"
# 1493 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define STDC_HEADERS 1
# 1505 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX11_USE_C99_MATH 1



#define _GLIBCXX11_USE_C99_STDIO 1



#define _GLIBCXX11_USE_C99_STDLIB 1



#define _GLIBCXX11_USE_C99_WCHAR 1
# 1526 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX98_USE_C99_MATH 1



#define _GLIBCXX98_USE_C99_STDIO 1



#define _GLIBCXX98_USE_C99_STDLIB 1



#define _GLIBCXX98_USE_C99_WCHAR 1


#define _GLIBCXX_ATOMIC_BUILTINS 1






#define _GLIBCXX_FULLY_DYNAMIC_STRING 0





#define _GLIBCXX_HOSTED 1




#define _GLIBCXX_MANGLE_SIZE_T j





#define _GLIBCXX_PTRDIFF_T_IS_INT 1





#define _GLIBCXX_SIZE_T_IS_UINT 1


#define _GLIBCXX_STDIO_EOF -1


#define _GLIBCXX_STDIO_SEEK_CUR 1


#define _GLIBCXX_STDIO_SEEK_END 2
# 1612 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_USE_C99_CTYPE_TR1 1



#define _GLIBCXX_USE_C99_FENV_TR1 1



#define _GLIBCXX_USE_C99_INTTYPES_TR1 1



#define _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1 1



#define _GLIBCXX_USE_C99_MATH_TR1 1



#define _GLIBCXX_USE_C99_STDINT_TR1 1
# 1659 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_USE_GETTIMEOFDAY 1
# 1671 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_USE_LONG_LONG 1
# 1699 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_USE_SC_NPROCESSORS_ONLN 1
# 1714 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_USE_TMPNAM 1
# 1724 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7-m/nofp/bits/c++config.h" 3
#define _GLIBCXX_USE_WCHAR_T 1


#define _GLIBCXX_VERBOSE 0





#define _GTHREAD_USE_MUTEX_TIMEDLOCK 1
# 42 "/usr/include/newlib/c++/9.2.1/cmath" 2 3
# 1 "/usr/include/newlib/c++/9.2.1/bits/cpp_type_traits.h" 1 3
# 33 "/usr/include/newlib/c++/9.2.1/bits/cpp_type_traits.h" 3
#define _CPP_TYPE_TRAITS_H 1

       
# 36 "/usr/include/newlib/c++/9.2.1/bits/cpp_type_traits.h" 3
# 67 "/usr/include/newlib/c++/9.2.1/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 184 "/usr/include/newlib/c++/9.2.1/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

#define __INT_N(TYPE) template<> struct __is_integer<TYPE> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned TYPE> { enum { __value = 1 }; typedef __true_type __type; };
# 282 "/usr/include/newlib/c++/9.2.1/bits/cpp_type_traits.h" 3
#undef __INT_N




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 417 "/usr/include/newlib/c++/9.2.1/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 43 "/usr/include/newlib/c++/9.2.1/cmath" 2 3
# 1 "/usr/include/newlib/c++/9.2.1/ext/type_traits.h" 1 3
# 30 "/usr/include/newlib/c++/9.2.1/ext/type_traits.h" 3
#define _EXT_TYPE_TRAITS 1

       
# 33 "/usr/include/newlib/c++/9.2.1/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 44 "/usr/include/newlib/c++/9.2.1/cmath" 2 3
#define _GLIBCXX_INCLUDE_NEXT_C_HEADERS 
# 1 "/usr/include/newlib/math.h" 1 3


#define _MATH_H_ 



# 1 "/usr/include/newlib/machine/ieeefp.h" 1 3
# 8 "/usr/include/newlib/math.h" 2 3


extern "C" {


#define _M_LN2 0.693147180559945309417





#define HUGE_VAL (__builtin_huge_val())



#define HUGE_VALF (__builtin_huge_valf())



#define HUGE_VALL (__builtin_huge_vall())



#define INFINITY (__builtin_inff())



#define NAN (__builtin_nanf(""))
# 86 "/usr/include/newlib/math.h" 3
extern double atan (double);
extern double cos (double);
extern double sin (double);
extern double tan (double);
extern double tanh (double);
extern double frexp (double, int *);
extern double modf (double, double *);
extern double ceil (double);
extern double fabs (double);
extern double floor (double);






extern double acos (double);
extern double asin (double);
extern double atan2 (double, double);
extern double cosh (double);
extern double sinh (double);
extern double exp (double);
extern double ldexp (double, int);
extern double log (double);
extern double log10 (double);
extern double pow (double, double);
extern double sqrt (double);
extern double fmod (double, double);




extern int finite (double);
extern int finitef (float);
extern int finitel (long double);
extern int isinff (float);
extern int isnanf (float);
# 145 "/usr/include/newlib/math.h" 3
#define FLT_EVAL_METHOD __FLT_EVAL_METHOD__
#define __TMP_FLT_EVAL_METHOD 



    typedef float float_t;
    typedef double double_t;
# 168 "/usr/include/newlib/math.h" 3
#undef FLT_EVAL_METHOD


#define FP_NAN 0
#define FP_INFINITE 1
#define FP_ZERO 2
#define FP_SUBNORMAL 3
#define FP_NORMAL 4


#define FP_ILOGB0 (-__INT_MAX__)


#define FP_ILOGBNAN __INT_MAX__



#define MATH_ERRNO 1


#define MATH_ERREXCEPT 2


#define math_errhandling MATH_ERRNO


extern int __isinff (float x);
extern int __isinfd (double x);
extern int __isnanf (float x);
extern int __isnand (double x);
extern int __fpclassifyf (float x);
extern int __fpclassifyd (double x);
extern int __signbitf (float x);
extern int __signbitd (double x);
# 211 "/usr/include/newlib/math.h" 3
#define fpclassify(__x) (__builtin_fpclassify (FP_NAN, FP_INFINITE, FP_NORMAL, FP_SUBNORMAL, FP_ZERO, __x))



#define isfinite(__x) (__builtin_isfinite (__x))


#define isinf(__x) (__builtin_isinf_sign (__x))


#define isnan(__x) (__builtin_isnan (__x))

#define isnormal(__x) (__builtin_isnormal (__x))
# 244 "/usr/include/newlib/math.h" 3
#define signbit(__x) ((sizeof(__x) == sizeof(float)) ? __builtin_signbitf(__x) : (sizeof(__x) == sizeof(double)) ? __builtin_signbit (__x) : __builtin_signbitl(__x))
# 260 "/usr/include/newlib/math.h" 3
#define isgreater(__x,__y) (__builtin_isgreater (__x, __y))
#define isgreaterequal(__x,__y) (__builtin_isgreaterequal (__x, __y))
#define isless(__x,__y) (__builtin_isless (__x, __y))
#define islessequal(__x,__y) (__builtin_islessequal (__x, __y))
#define islessgreater(__x,__y) (__builtin_islessgreater (__x, __y))
#define isunordered(__x,__y) (__builtin_isunordered (__x, __y))
# 290 "/usr/include/newlib/math.h" 3
extern double infinity (void);
extern double nan (const char *);
extern double copysign (double, double);
extern double logb (double);
extern int ilogb (double);

extern double asinh (double);
extern double cbrt (double);
extern double nextafter (double, double);
extern double rint (double);
extern double scalbn (double, int);

extern double exp2 (double);
extern double scalbln (double, long int);
extern double tgamma (double);
extern double nearbyint (double);
extern long int lrint (double);
extern long long int llrint (double);
extern double round (double);
extern long int lround (double);
extern long long int llround (double);
extern double trunc (double);
extern double remquo (double, double, int *);
extern double fdim (double, double);
extern double fmax (double, double);
extern double fmin (double, double);
extern double fma (double, double, double);


extern double log1p (double);
extern double expm1 (double);



extern double acosh (double);
extern double atanh (double);
extern double remainder (double, double);
extern double gamma (double);
extern double lgamma (double);
extern double erf (double);
extern double erfc (double);
extern double log2 (double);





extern double hypot (double, double);






extern float atanf (float);
extern float cosf (float);
extern float sinf (float);
extern float tanf (float);
extern float tanhf (float);
extern float frexpf (float, int *);
extern float modff (float, float *);
extern float ceilf (float);
extern float fabsf (float);
extern float floorf (float);


extern float acosf (float);
extern float asinf (float);
extern float atan2f (float, float);
extern float coshf (float);
extern float sinhf (float);
extern float expf (float);
extern float ldexpf (float, int);
extern float logf (float);
extern float log10f (float);
extern float powf (float, float);
extern float sqrtf (float);
extern float fmodf (float, float);




extern float exp2f (float);
extern float scalblnf (float, long int);
extern float tgammaf (float);
extern float nearbyintf (float);
extern long int lrintf (float);
extern long long int llrintf (float);
extern float roundf (float);
extern long int lroundf (float);
extern long long int llroundf (float);
extern float truncf (float);
extern float remquof (float, float, int *);
extern float fdimf (float, float);
extern float fmaxf (float, float);
extern float fminf (float, float);
extern float fmaf (float, float, float);

extern float infinityf (void);
extern float nanf (const char *);
extern float copysignf (float, float);
extern float logbf (float);
extern int ilogbf (float);

extern float asinhf (float);
extern float cbrtf (float);
extern float nextafterf (float, float);
extern float rintf (float);
extern float scalbnf (float, int);
extern float log1pf (float);
extern float expm1f (float);


extern float acoshf (float);
extern float atanhf (float);
extern float remainderf (float, float);
extern float gammaf (float);
extern float lgammaf (float);
extern float erff (float);
extern float erfcf (float);
extern float log2f (float);
extern float hypotf (float, float);
# 422 "/usr/include/newlib/math.h" 3
extern long double atanl (long double);
extern long double cosl (long double);
extern long double sinl (long double);
extern long double tanl (long double);
extern long double tanhl (long double);
extern long double frexpl (long double, int *);
extern long double modfl (long double, long double *);
extern long double ceill (long double);
extern long double fabsl (long double);
extern long double floorl (long double);
extern long double log1pl (long double);
extern long double expm1l (long double);




extern long double acosl (long double);
extern long double asinl (long double);
extern long double atan2l (long double, long double);
extern long double coshl (long double);
extern long double sinhl (long double);
extern long double expl (long double);
extern long double ldexpl (long double, int);
extern long double logl (long double);
extern long double log10l (long double);
extern long double powl (long double, long double);
extern long double sqrtl (long double);
extern long double fmodl (long double, long double);
extern long double hypotl (long double, long double);


extern long double copysignl (long double, long double);
extern long double nanl (const char *);
extern int ilogbl (long double);
extern long double asinhl (long double);
extern long double cbrtl (long double);
extern long double nextafterl (long double, long double);
extern float nexttowardf (float, long double);
extern double nexttoward (double, long double);
extern long double nexttowardl (long double, long double);
extern long double logbl (long double);
extern long double log2l (long double);
extern long double rintl (long double);
extern long double scalbnl (long double, int);
extern long double exp2l (long double);
extern long double scalblnl (long double, long);
extern long double tgammal (long double);
extern long double nearbyintl (long double);
extern long int lrintl (long double);
extern long long int llrintl (long double);
extern long double roundl (long double);
extern long lroundl (long double);
extern long long int llroundl (long double);
extern long double truncl (long double);
extern long double remquol (long double, long double, int *);
extern long double fdiml (long double, long double);
extern long double fmaxl (long double, long double);
extern long double fminl (long double, long double);
extern long double fmal (long double, long double, long double);

extern long double acoshl (long double);
extern long double atanhl (long double);
extern long double remainderl (long double, long double);
extern long double lgammal (long double);
extern long double erfl (long double);
extern long double erfcl (long double);
# 503 "/usr/include/newlib/math.h" 3
extern double drem (double, double);
extern float dremf (float, float);



extern double gamma_r (double, int *);
extern double lgamma_r (double, int *);
extern float gammaf_r (float, int *);
extern float lgammaf_r (float, int *);



extern double y0 (double);
extern double y1 (double);
extern double yn (int, double);
extern double j0 (double);
extern double j1 (double);
extern double jn (int, double);



extern float y0f (float);
extern float y1f (float);
extern float ynf (int, float);
extern float j0f (float);
extern float j1f (float);
extern float jnf (int, float);
# 564 "/usr/include/newlib/math.h" 3
#define signgam (*__signgam())
extern int *__signgam (void);


#define __signgam_r(ptr) _REENT_SIGNGAM(ptr)






#define MAXFLOAT 3.40282347e+38F

#define M_E 2.7182818284590452354
#define M_LOG2E 1.4426950408889634074
#define M_LOG10E 0.43429448190325182765
#define M_LN2 _M_LN2
#define M_LN10 2.30258509299404568402
#define M_PI 3.14159265358979323846
#define M_PI_2 1.57079632679489661923
#define M_PI_4 0.78539816339744830962
#define M_1_PI 0.31830988618379067154
#define M_2_PI 0.63661977236758134308
#define M_2_SQRTPI 1.12837916709551257390
#define M_SQRT2 1.41421356237309504880
#define M_SQRT1_2 0.70710678118654752440





#define M_TWOPI (M_PI * 2.0)
#define M_3PI_4 2.3561944901923448370E0
#define M_SQRTPI 1.77245385090551602792981
#define M_LN2LO 1.9082149292705877000E-10
#define M_LN2HI 6.9314718036912381649E-1
#define M_SQRT3 1.73205080756887719000
#define M_IVLN10 0.43429448190325182765
#define M_LOG2_E _M_LN2
#define M_INVLN2 1.4426950408889633870E0



enum __fdlibm_version
{
  __fdlibm_ieee = -1,
  __fdlibm_posix
};

#define _LIB_VERSION_TYPE enum __fdlibm_version
#define _LIB_VERSION __fdlib_version

extern enum __fdlibm_version __fdlib_version;

#define _IEEE_ __fdlibm_ieee
#define _POSIX_ __fdlibm_posix



}
# 46 "/usr/include/newlib/c++/9.2.1/cmath" 2 3
#undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
# 1 "/usr/include/newlib/c++/9.2.1/bits/std_abs.h" 1 3
# 31 "/usr/include/newlib/c++/9.2.1/bits/std_abs.h" 3
#define _GLIBCXX_BITS_STD_ABS_H 

       
# 34 "/usr/include/newlib/c++/9.2.1/bits/std_abs.h" 3



#define _GLIBCXX_INCLUDE_NEXT_C_HEADERS 
# 1 "/usr/include/newlib/stdlib.h" 1 3







#define _STDLIB_H_ 

# 1 "/usr/include/newlib/machine/ieeefp.h" 1 3
# 11 "/usr/include/newlib/stdlib.h" 2 3


#define __need_size_t 
#define __need_wchar_t 
#define __need_NULL 
# 1 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 155 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 231 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef __need_size_t
# 340 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 390 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 401 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 17 "/usr/include/newlib/stdlib.h" 2 3



# 1 "/usr/include/newlib/machine/stdlib.h" 1 3

#define _MACHSTDLIB_H_ 
# 21 "/usr/include/newlib/stdlib.h" 2 3

# 1 "/usr/include/newlib/alloca.h" 1 3







#define _NEWLIB_ALLOCA_H 




#undef alloca


#define alloca(size) __builtin_alloca(size)
# 23 "/usr/include/newlib/stdlib.h" 2 3
# 33 "/usr/include/newlib/stdlib.h" 3
extern "C" {

typedef struct
{
  int quot;
  int rem;
} div_t;

typedef struct
{
  long quot;
  long rem;
} ldiv_t;


typedef struct
{
  long long int quot;
  long long int rem;
} lldiv_t;



#define __compar_fn_t_defined 
typedef int (*__compar_fn_t) (const void *, const void *);


#define EXIT_FAILURE 1
#define EXIT_SUCCESS 0

#define RAND_MAX __RAND_MAX

int __locale_mb_cur_max (void);

#define MB_CUR_MAX __locale_mb_cur_max()

void abort (void) __attribute__ ((__noreturn__));
int abs (int);

__uint32_t arc4random (void);
__uint32_t arc4random_uniform (__uint32_t);
void arc4random_buf (void *, size_t);

int atexit (void (*__func)(void));
double atof (const char *__nptr);

float atoff (const char *__nptr);

int atoi (const char *__nptr);
int _atoi_r (struct _reent *, const char *__nptr);
long atol (const char *__nptr);
long _atol_r (struct _reent *, const char *__nptr);
void * bsearch (const void *__key,
         const void *__base,
         size_t __nmemb,
         size_t __size,
         __compar_fn_t _compar);
void *calloc(size_t, size_t) __attribute__((__malloc__)) __attribute__((__warn_unused_result__))
      __attribute__((__alloc_size__(1, 2))) __attribute__ ((__nothrow__));
div_t div (int __numer, int __denom);
void exit (int __status) __attribute__ ((__noreturn__));
void free (void *) __attribute__ ((__nothrow__));
char * getenv (const char *__string);
char * _getenv_r (struct _reent *, const char *__string);



char * _findenv (const char *, int *);
char * _findenv_r (struct _reent *, const char *, int *);

extern char *suboptarg;
int getsubopt (char **, char * const *, char **);

long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void *malloc(size_t) __attribute__((__malloc__)) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(1))) __attribute__ ((__nothrow__));
int mblen (const char *, size_t);
int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int mbtowc (wchar_t *, const char *, size_t);
int _mbtowc_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
int wctomb (char *, wchar_t);
int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t mbstowcs (wchar_t *, const char *, size_t);
size_t _mbstowcs_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
size_t wcstombs (char *, const wchar_t *, size_t);
size_t _wcstombs_r (struct _reent *, char *, const wchar_t *, size_t, _mbstate_t *);


char * mkdtemp (char *);






int mkstemp (char *);


int mkstemps (char *, int);


char * mktemp (char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));


char * _mkdtemp_r (struct _reent *, char *);
int _mkostemp_r (struct _reent *, char *, int);
int _mkostemps_r (struct _reent *, char *, int, int);
int _mkstemp_r (struct _reent *, char *);
int _mkstemps_r (struct _reent *, char *, int);
char * _mktemp_r (struct _reent *, char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));
void qsort (void *__base, size_t __nmemb, size_t __size, __compar_fn_t _compar);
int rand (void);
void *realloc(void *, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2))) __attribute__ ((__nothrow__));

void *reallocarray(void *, size_t, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2, 3)));
void *reallocf(void *, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2)));


char * realpath (const char * path, char * resolved_path);


int rpmatch (const char *response);




void srand (unsigned __seed);
double strtod (const char * __n, char ** __end_PTR);
double _strtod_r (struct _reent *,const char * __n, char ** __end_PTR);

float strtof (const char * __n, char ** __end_PTR);




#define strtodf strtof


long strtol (const char * __n, char ** __end_PTR, int __base);
long _strtol_r (struct _reent *,const char * __n, char ** __end_PTR, int __base);
unsigned long strtoul (const char * __n, char ** __end_PTR, int __base);
unsigned long _strtoul_r (struct _reent *,const char * __n, char ** __end_PTR, int __base);
# 191 "/usr/include/newlib/stdlib.h" 3
int system (const char *__string);


long a64l (const char *__input);
char * l64a (long __input);
char * _l64a_r (struct _reent *,long __input);


int on_exit (void (*__func)(int, void *),void *__arg);


void _Exit (int __status) __attribute__ ((__noreturn__));


int putenv (char *__string);

int _putenv_r (struct _reent *, char *__string);
void * _reallocf_r (struct _reent *, void *, size_t);

int setenv (const char *__string, const char *__value, int __overwrite);

int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);
# 224 "/usr/include/newlib/stdlib.h" 3
char * __itoa (int, char *, int);
char * __utoa (unsigned, char *, int);

char * itoa (int, char *, int);
char * utoa (unsigned, char *, int);


int rand_r (unsigned *__seed);



double drand48 (void);
double _drand48_r (struct _reent *);
double erand48 (unsigned short [3]);
double _erand48_r (struct _reent *, unsigned short [3]);
long jrand48 (unsigned short [3]);
long _jrand48_r (struct _reent *, unsigned short [3]);
void lcong48 (unsigned short [7]);
void _lcong48_r (struct _reent *, unsigned short [7]);
long lrand48 (void);
long _lrand48_r (struct _reent *);
long mrand48 (void);
long _mrand48_r (struct _reent *);
long nrand48 (unsigned short [3]);
long _nrand48_r (struct _reent *, unsigned short [3]);
unsigned short *
       seed48 (unsigned short [3]);
unsigned short *
       _seed48_r (struct _reent *, unsigned short [3]);
void srand48 (long);
void _srand48_r (struct _reent *, long);


char * initstate (unsigned, char *, size_t);
long random (void);
char * setstate (char *);
void srandom (unsigned);


long long atoll (const char *__nptr);

long long _atoll_r (struct _reent *, const char *__nptr);

long long llabs (long long);
lldiv_t lldiv (long long __numer, long long __denom);
long long strtoll (const char * __n, char ** __end_PTR, int __base);

long long _strtoll_r (struct _reent *, const char * __n, char ** __end_PTR, int __base);

unsigned long long strtoull (const char * __n, char ** __end_PTR, int __base);

unsigned long long _strtoull_r (struct _reent *, const char * __n, char ** __end_PTR, int __base);



void cfree (void *);


int unsetenv (const char *__string);

int _unsetenv_r (struct _reent *, const char *__string);



int posix_memalign (void **, size_t, size_t) __attribute__((__nonnull__ (1)))
     __attribute__((__warn_unused_result__));


char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);

void * _malloc_r (struct _reent *, size_t) __attribute__ ((__nothrow__));
void * _calloc_r (struct _reent *, size_t, size_t) __attribute__ ((__nothrow__));
void _free_r (struct _reent *, void *) __attribute__ ((__nothrow__));
void * _realloc_r (struct _reent *, void *, size_t) __attribute__ ((__nothrow__));
void _mstats_r (struct _reent *, char *);

int _system_r (struct _reent *, const char *);

void __eprintf (const char *, const char *, unsigned int, const char *);
# 312 "/usr/include/newlib/stdlib.h" 3
void qsort_r (void *__base, size_t __nmemb, size_t __size, void *__thunk, int (*_compar)(void *, const void *, const void *))
             __asm__ ("" "__bsd_qsort_r");
# 322 "/usr/include/newlib/stdlib.h" 3
extern long double _strtold_r (struct _reent *, const char *, char **);

extern long double strtold (const char *, char **);







void * aligned_alloc(size_t, size_t) __attribute__((__malloc__)) __attribute__((__alloc_align__(1)))
     __attribute__((__alloc_size__(2))) __attribute__((__warn_unused_result__));
int at_quick_exit(void (*)(void));
[[noreturn]] void
 quick_exit(int);


}
# 39 "/usr/include/newlib/c++/9.2.1/bits/std_abs.h" 2 3



#undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS

#undef abs

extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 70 "/usr/include/newlib/c++/9.2.1/bits/std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }
# 107 "/usr/include/newlib/c++/9.2.1/bits/std_abs.h" 3

}
}
# 48 "/usr/include/newlib/c++/9.2.1/cmath" 2 3


#define _GLIBCXX_CMATH 1


#undef div
#undef acos
#undef asin
#undef atan
#undef atan2
#undef ceil
#undef cos
#undef cosh
#undef exp
#undef fabs
#undef floor
#undef fmod
#undef frexp
#undef ldexp
#undef log
#undef log10
#undef modf
#undef pow
#undef sin
#undef sinh
#undef sqrt
#undef tan
#undef tanh

extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 412 "/usr/include/newlib/c++/9.2.1/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }





#undef fpclassify
#undef isfinite
#undef isinf
#undef isnan
#undef isnormal
#undef signbit
#undef isgreater
#undef isgreaterequal
#undef isless
#undef islessequal
#undef islessgreater
#undef isunordered




  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 956 "/usr/include/newlib/c++/9.2.1/cmath" 3
#undef acosh
#undef acoshf
#undef acoshl
#undef asinh
#undef asinhf
#undef asinhl
#undef atanh
#undef atanhf
#undef atanhl
#undef cbrt
#undef cbrtf
#undef cbrtl
#undef copysign
#undef copysignf
#undef copysignl
#undef erf
#undef erff
#undef erfl
#undef erfc
#undef erfcf
#undef erfcl
#undef exp2
#undef exp2f
#undef exp2l
#undef expm1
#undef expm1f
#undef expm1l
#undef fdim
#undef fdimf
#undef fdiml
#undef fma
#undef fmaf
#undef fmal
#undef fmax
#undef fmaxf
#undef fmaxl
#undef fmin
#undef fminf
#undef fminl
#undef hypot
#undef hypotf
#undef hypotl
#undef ilogb
#undef ilogbf
#undef ilogbl
#undef lgamma
#undef lgammaf
#undef lgammal

#undef llrint
#undef llrintf
#undef llrintl
#undef llround
#undef llroundf
#undef llroundl

#undef log1p
#undef log1pf
#undef log1pl
#undef log2
#undef log2f
#undef log2l
#undef logb
#undef logbf
#undef logbl
#undef lrint
#undef lrintf
#undef lrintl
#undef lround
#undef lroundf
#undef lroundl
#undef nan
#undef nanf
#undef nanl
#undef nearbyint
#undef nearbyintf
#undef nearbyintl
#undef nextafter
#undef nextafterf
#undef nextafterl
#undef nexttoward
#undef nexttowardf
#undef nexttowardl
#undef remainder
#undef remainderf
#undef remainderl
#undef remquo
#undef remquof
#undef remquol
#undef rint
#undef rintf
#undef rintl
#undef round
#undef roundf
#undef roundl
#undef scalbln
#undef scalblnf
#undef scalblnl
#undef scalbn
#undef scalbnf
#undef scalbnl
#undef tgamma
#undef tgammaf
#undef tgammal
#undef trunc
#undef truncf
#undef truncl


  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }
# 1923 "/usr/include/newlib/c++/9.2.1/cmath" 3

}





}
# 37 "/usr/include/newlib/c++/9.2.1/math.h" 2 3

using std::abs;
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::cos;
using std::sin;
using std::tan;
using std::cosh;
using std::sinh;
using std::tanh;
using std::exp;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sqrt;
using std::ceil;
using std::fabs;
using std::floor;
using std::fmod;


using std::fpclassify;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::signbit;
using std::isgreater;
using std::isgreaterequal;
using std::isless;
using std::islessequal;
using std::islessgreater;
using std::isunordered;



using std::acosh;
using std::asinh;
using std::atanh;
using std::cbrt;
using std::copysign;
using std::erf;
using std::erfc;
using std::exp2;
using std::expm1;
using std::fdim;
using std::fma;
using std::fmax;
using std::fmin;
using std::hypot;
using std::ilogb;
using std::lgamma;
using std::llrint;
using std::llround;
using std::log1p;
using std::log2;
using std::logb;
using std::lrint;
using std::lround;
using std::nearbyint;
using std::nextafter;
using std::nexttoward;
using std::remainder;
using std::remquo;
using std::rint;
using std::round;
using std::scalbln;
using std::scalbn;
using std::tgamma;
using std::trunc;
# 36 "./wirish/include/wirish/wirish_math.h" 2






# 41 "./wirish/include/wirish/wirish_math.h"
void randomSeed(unsigned int seed);







long random(long max);
# 58 "./wirish/include/wirish/wirish_math.h"
long random(long min, long max);
# 81 "./wirish/include/wirish/wirish_math.h"
static inline long map(long value, long fromStart, long fromEnd,
                long toStart, long toEnd) {
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) +
        toStart;
}

#define PI 3.1415926535897932384626433832795
#define HALF_PI 1.5707963267948966192313216916398
#define TWO_PI 6.283185307179586476925286766559
#define DEG_TO_RAD 0.017453292519943295769236907684886
#define RAD_TO_DEG 57.295779513082320876798154814105

#define min(a,b) ((a)<(b)?(a):(b))
#define max(a,b) ((a)>(b)?(a):(b))
#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))
#define round(x) ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))
#define radians(deg) ((deg)*DEG_TO_RAD)
#define degrees(rad) ((rad)*RAD_TO_DEG)
#define sq(x) ((x)*(x))





#define abs(x) (((x) > 0) ? (x) : -(x))
# 117 "./wirish/include/wirish/wirish_math.h"
double cos(double x);






double sin(double x);







double tan(double x);







double sqrt(double x);
# 149 "./wirish/include/wirish/wirish_math.h"
double pow(double x, double y);
# 46 "./wirish/include/wirish/wirish.h" 2
# 1 "./wirish/include/wirish/wirish_time.h" 1
# 33 "./wirish/include/wirish/wirish_time.h"
#define _WIRISH_WIRISH_TIME_H_ 


# 1 "./libmaple/include/libmaple/systick.h" 1
# 33 "./libmaple/include/libmaple/systick.h"
#define _LIBMAPLE_SYSTICK_H_ 


extern "C"{






typedef struct systick_reg_map {
    volatile uint32 CSR;
    volatile uint32 RVR;
    volatile uint32 CNT;
    volatile uint32 CVR;
} systick_reg_map;


#define SYSTICK_BASE ((struct systick_reg_map*)0xE000E010)







#define SYSTICK_CSR_COUNTFLAG BIT(16)
#define SYSTICK_CSR_CLKSOURCE BIT(2)
#define SYSTICK_CSR_CLKSOURCE_EXTERNAL 0
#define SYSTICK_CSR_CLKSOURCE_CORE BIT(2)
#define SYSTICK_CSR_TICKINT BIT(1)
#define SYSTICK_CSR_TICKINT_PEND BIT(1)
#define SYSTICK_CSR_TICKINT_NO_PEND 0
#define SYSTICK_CSR_ENABLE BIT(0)
#define SYSTICK_CSR_ENABLE_MULTISHOT BIT(0)
#define SYSTICK_CSR_ENABLE_DISABLED 0



#define SYSTICK_CVR_NOREF BIT(31)
#define SYSTICK_CVR_SKEW BIT(30)
#define SYSTICK_CVR_TENMS 0xFFFFFF


extern volatile uint32 systick_uptime_millis;




static inline uint32 systick_uptime(void) {
    return systick_uptime_millis;
}


void systick_init(uint32 reload_val);
void systick_disable();
void systick_enable();




static inline uint32 systick_get_count(void) {
    return ((struct systick_reg_map*)0xE000E010)->CNT;
}
# 107 "./libmaple/include/libmaple/systick.h"
static inline uint32 systick_check_underflow(void) {
    return ((struct systick_reg_map*)0xE000E010)->CSR & (1UL << (16));
}


}
# 37 "./wirish/include/wirish/wirish_time.h" 2
# 45 "./wirish/include/wirish/wirish_time.h"
static inline uint32 millis(void) {
    return systick_uptime();
}






static inline uint32 micros(void) {
    uint32 ms;
    uint32 cycle_cnt;

    do {
        ms = millis();
        cycle_cnt = systick_get_count();
    } while (ms != millis());

#define US_PER_MS 1000


    return ((ms * 1000) +
            ((1000 * 72 - 1) + 1 - cycle_cnt) / 72);
#undef US_PER_MS
}
# 81 "./wirish/include/wirish/wirish_time.h"
void delay(unsigned long ms);
# 93 "./wirish/include/wirish/wirish_time.h"
void delayMicroseconds(uint32 us);
# 47 "./wirish/include/wirish/wirish.h" 2

# 1 "./wirish/include/wirish/HardwareSPI.h" 1
# 37 "./wirish/include/wirish/HardwareSPI.h"
# 1 "./libmaple/include/libmaple/spi.h" 1
# 38 "./libmaple/include/libmaple/spi.h"
#define _LIBMAPLE_SPI_H_ 


extern "C" {





# 1 "./libmaple/stm32f1/include/series/spi.h" 1
# 35 "./libmaple/stm32f1/include/series/spi.h"
#define _LIBMAPLE_STM32F1_SPI_H_ 




extern "C" {






struct spi_reg_map;

#define SPI1_BASE ((struct spi_reg_map*)0x40013000)
#define SPI2_BASE ((struct spi_reg_map*)0x40003800)
#define SPI3_BASE ((struct spi_reg_map*)0x40003C00)





struct spi_dev;

extern struct spi_dev *SPI1;
extern struct spi_dev *SPI2;
# 70 "./libmaple/stm32f1/include/series/spi.h"
struct gpio_dev;
extern void spi_config_gpios(struct spi_dev*, uint8,
                             struct gpio_dev*, uint8,
                             struct gpio_dev*, uint8, uint8, uint8);




static inline 
# 78 "./libmaple/stm32f1/include/series/spi.h" 3
             __inline__ __attribute__((__always_inline__)) 
# 78 "./libmaple/stm32f1/include/series/spi.h"
                             void spi_gpio_cfg(uint8 as_master,
                                         struct gpio_dev *nss_dev,
                                         uint8 nss_bit,
                                         struct gpio_dev *comm_dev,
                                         uint8 sck_bit,
                                         uint8 miso_bit,
                                         uint8 mosi_bit) {






    spi_config_gpios(
# 91 "./libmaple/stm32f1/include/series/spi.h" 3 4
                    __null
# 91 "./libmaple/stm32f1/include/series/spi.h"
                        , as_master, nss_dev, nss_bit,
                     comm_dev, sck_bit, miso_bit, mosi_bit);
}


}
# 48 "./libmaple/include/libmaple/spi.h" 2






typedef struct spi_reg_map {
    volatile uint32 CR1;
    volatile uint32 CR2;
    volatile uint32 SR;
    volatile uint32 DR;
    volatile uint32 CRCPR;
    volatile uint32 RXCRCR;
    volatile uint32 TXCRCR;
    volatile uint32 I2SCFGR;
    volatile uint32 I2SPR;
} spi_reg_map;







#define SPI_CR1_BIDIMODE_BIT 15
#define SPI_CR1_BIDIOE_BIT 14
#define SPI_CR1_CRCEN_BIT 13
#define SPI_CR1_CRCNEXT_BIT 12
#define SPI_CR1_DFF_BIT 11
#define SPI_CR1_RXONLY_BIT 10
#define SPI_CR1_SSM_BIT 9
#define SPI_CR1_SSI_BIT 8
#define SPI_CR1_LSBFIRST_BIT 7
#define SPI_CR1_SPE_BIT 6
#define SPI_CR1_MSTR_BIT 2
#define SPI_CR1_CPOL_BIT 1
#define SPI_CR1_CPHA_BIT 0

#define SPI_CR1_BIDIMODE (1U << SPI_CR1_BIDIMODE_BIT)
#define SPI_CR1_BIDIMODE_2_LINE (0x0 << SPI_CR1_BIDIMODE_BIT)
#define SPI_CR1_BIDIMODE_1_LINE (0x1 << SPI_CR1_BIDIMODE_BIT)
#define SPI_CR1_BIDIOE (1U << SPI_CR1_BIDIOE_BIT)
#define SPI_CR1_CRCEN (1U << SPI_CR1_CRCEN_BIT)
#define SPI_CR1_CRCNEXT (1U << SPI_CR1_CRCNEXT_BIT)
#define SPI_CR1_DFF (1U << SPI_CR1_DFF_BIT)
#define SPI_CR1_DFF_8_BIT (0x0 << SPI_CR1_DFF_BIT)
#define SPI_CR1_DFF_16_BIT (0x1 << SPI_CR1_DFF_BIT)
#define SPI_CR1_RXONLY (1U << SPI_CR1_RXONLY_BIT)
#define SPI_CR1_SSM (1U << SPI_CR1_SSM_BIT)
#define SPI_CR1_SSI (1U << SPI_CR1_SSI_BIT)
#define SPI_CR1_LSBFIRST (1U << SPI_CR1_LSBFIRST_BIT)
#define SPI_CR1_SPE (1U << SPI_CR1_SPE_BIT)
#define SPI_CR1_BR (0x7 << 3)
#define SPI_CR1_BR_PCLK_DIV_2 (0x0 << 3)
#define SPI_CR1_BR_PCLK_DIV_4 (0x1 << 3)
#define SPI_CR1_BR_PCLK_DIV_8 (0x2 << 3)
#define SPI_CR1_BR_PCLK_DIV_16 (0x3 << 3)
#define SPI_CR1_BR_PCLK_DIV_32 (0x4 << 3)
#define SPI_CR1_BR_PCLK_DIV_64 (0x5 << 3)
#define SPI_CR1_BR_PCLK_DIV_128 (0x6 << 3)
#define SPI_CR1_BR_PCLK_DIV_256 (0x7 << 3)
#define SPI_CR1_MSTR (1U << SPI_CR1_MSTR_BIT)
#define SPI_CR1_CPOL (1U << SPI_CR1_CPOL_BIT)
#define SPI_CR1_CPOL_LOW (0x0 << SPI_CR1_CPOL_BIT)
#define SPI_CR1_CPOL_HIGH (0x1 << SPI_CR1_CPOL_BIT)
#define SPI_CR1_CPHA (1U << SPI_CR1_CPHA_BIT)



#define SPI_CR2_TXEIE_BIT 7
#define SPI_CR2_RXNEIE_BIT 6
#define SPI_CR2_ERRIE_BIT 5
#define SPI_CR2_SSOE_BIT 2
#define SPI_CR2_TXDMAEN_BIT 1
#define SPI_CR2_RXDMAEN_BIT 0

#define SPI_CR2_TXEIE (1U << SPI_CR2_TXEIE_BIT)
#define SPI_CR2_RXNEIE (1U << SPI_CR2_RXNEIE_BIT)
#define SPI_CR2_ERRIE (1U << SPI_CR2_ERRIE_BIT)
#define SPI_CR2_SSOE (1U << SPI_CR2_SSOE_BIT)
#define SPI_CR2_TXDMAEN (1U << SPI_CR2_TXDMAEN_BIT)
#define SPI_CR2_RXDMAEN (1U << SPI_CR2_RXDMAEN_BIT)



#define SPI_SR_BSY_BIT 7
#define SPI_SR_OVR_BIT 6
#define SPI_SR_MODF_BIT 5
#define SPI_SR_CRCERR_BIT 4
#define SPI_SR_UDR_BIT 3
#define SPI_SR_CHSIDE_BIT 2
#define SPI_SR_TXE_BIT 1
#define SPI_SR_RXNE_BIT 0

#define SPI_SR_BSY (1U << SPI_SR_BSY_BIT)
#define SPI_SR_OVR (1U << SPI_SR_OVR_BIT)
#define SPI_SR_MODF (1U << SPI_SR_MODF_BIT)
#define SPI_SR_CRCERR (1U << SPI_SR_CRCERR_BIT)
#define SPI_SR_UDR (1U << SPI_SR_UDR_BIT)
#define SPI_SR_CHSIDE (1U << SPI_SR_CHSIDE_BIT)
#define SPI_SR_CHSIDE_LEFT (0x0 << SPI_SR_CHSIDE_BIT)
#define SPI_SR_CHSIDE_RIGHT (0x1 << SPI_SR_CHSIDE_BIT)
#define SPI_SR_TXE (1U << SPI_SR_TXE_BIT)
#define SPI_SR_RXNE (1U << SPI_SR_RXNE_BIT)



#define SPI_I2SCFGR_I2SMOD_BIT 11
#define SPI_I2SCFGR_I2SE_BIT 10
#define SPI_I2SCFGR_PCMSYNC_BIT 7
#define SPI_I2SCFGR_CKPOL_BIT 3
#define SPI_I2SCFGR_CHLEN_BIT 0

#define SPI_I2SCFGR_I2SMOD (1U << SPI_I2SCFGR_I2SMOD_BIT)
#define SPI_I2SCFGR_I2SMOD_SPI (0x0 << SPI_I2SCFGR_I2SMOD_BIT)
#define SPI_I2SCFGR_I2SMOD_I2S (0x1 << SPI_I2SCFGR_I2SMOD_BIT)
#define SPI_I2SCFGR_I2SE (1U << SPI_I2SCFGR_I2SE_BIT)
#define SPI_I2SCFGR_I2SCFG (0x3 << 8)
#define SPI_I2SCFGR_I2SCFG_SLAVE_TX (0x0 << 8)
#define SPI_I2SCFGR_I2SCFG_SLAVE_RX (0x1 << 8)
#define SPI_I2SCFGR_I2SCFG_MASTER_TX (0x2 << 8)
#define SPI_I2SCFGR_I2SCFG_MASTER_RX (0x3 << 8)
#define SPI_I2SCFGR_PCMSYNC (1U << SPI_I2SCFGR_PCMSYNC_BIT)
#define SPI_I2SCFGR_PCMSYNC_SHORT (0x0 << SPI_I2SCFGR_PCMSYNC_BIT)
#define SPI_I2SCFGR_PCMSYNC_LONG (0x1 << SPI_I2SCFGR_PCMSYNC_BIT)
#define SPI_I2SCFGR_I2SSTD (0x3 << 4)
#define SPI_I2SCFGR_I2SSTD_PHILLIPS (0x0 << 4)
#define SPI_I2SCFGR_I2SSTD_MSB (0x1 << 4)
#define SPI_I2SCFGR_I2SSTD_LSB (0x2 << 4)
#define SPI_I2SCFGR_I2SSTD_PCM (0x3 << 4)
#define SPI_I2SCFGR_CKPOL (1U << SPI_I2SCFGR_CKPOL_BIT)
#define SPI_I2SCFGR_CKPOL_LOW (0x0 << SPI_I2SCFGR_CKPOL_BIT)
#define SPI_I2SCFGR_CKPOL_HIGH (0x1 << SPI_I2SCFGR_CKPOL_BIT)
#define SPI_I2SCFGR_DATLEN (0x3 << 1)
#define SPI_I2SCFGR_DATLEN_16_BIT (0x0 << 1)
#define SPI_I2SCFGR_DATLEN_24_BIT (0x1 << 1)
#define SPI_I2SCFGR_DATLEN_32_BIT (0x2 << 1)
#define SPI_I2SCFGR_CHLEN (1U << SPI_I2SCFGR_CHLEN_BIT)
#define SPI_I2SCFGR_CHLEN_16_BIT (0x0 << SPI_I2SCFGR_CHLEN_BIT)
#define SPI_I2SCFGR_CHLEN_32_BIT (0x1 << SPI_I2SCFGR_CHLEN_BIT)



#define SPI_I2SPR_MCKOE_BIT 9
#define SPI_I2SPR_ODD_BIT 8

#define SPI_I2SPR_MCKOE (1U << SPI_I2SPR_MCKOE_BIT)
#define SPI_I2SPR_ODD (1U << SPI_I2SPR_ODD_BIT)
#define SPI_I2SPR_I2SDIV 0xFF






typedef struct spi_dev {
    spi_reg_map *regs;
    rcc_clk_id clk_id;
    nvic_irq_num irq_num;
} spi_dev;





void spi_init(spi_dev *dev);

struct gpio_dev;
# 228 "./libmaple/include/libmaple/spi.h"
extern void spi_config_gpios(spi_dev *dev,
                             uint8 as_master,
                             struct gpio_dev *nss_dev,
                             uint8 nss_bit,
                             struct gpio_dev *comm_dev,
                             uint8 sck_bit,
                             uint8 miso_bit,
                             uint8 mosi_bit);
# 244 "./libmaple/include/libmaple/spi.h"
typedef enum spi_mode {

    SPI_MODE_LOW_RISING = 0,

    SPI_MODE_LOW_FALLING = 1,

    SPI_MODE_HIGH_FALLING = 2,

    SPI_MODE_HIGH_RISING = 3,

    SPI_MODE_0 = SPI_MODE_LOW_RISING,
    SPI_MODE_1 = SPI_MODE_LOW_FALLING,
    SPI_MODE_2 = SPI_MODE_HIGH_FALLING,
    SPI_MODE_3 = SPI_MODE_HIGH_RISING,
} spi_mode;





typedef enum spi_baud_rate {
    SPI_BAUD_PCLK_DIV_2 = (0x0 << 3),
    SPI_BAUD_PCLK_DIV_4 = (0x1 << 3),
    SPI_BAUD_PCLK_DIV_8 = (0x2 << 3),
    SPI_BAUD_PCLK_DIV_16 = (0x3 << 3),
    SPI_BAUD_PCLK_DIV_32 = (0x4 << 3),
    SPI_BAUD_PCLK_DIV_64 = (0x5 << 3),
    SPI_BAUD_PCLK_DIV_128 = (0x6 << 3),
    SPI_BAUD_PCLK_DIV_256 = (0x7 << 3),
} spi_baud_rate;






typedef enum spi_cfg_flag {
    SPI_BIDIMODE = (1U << 15),
    SPI_BIDIOE = (1U << 14),

    SPI_CRCEN = (1U << 13),

    SPI_DFF_8_BIT = (0x0 << 11),

    SPI_DFF_16_BIT = (0x1 << 11),
    SPI_RX_ONLY = (1U << 10),
    SPI_SW_SLAVE = (1U << 9),
    SPI_SOFT_SS = (1U << 8),



    SPI_FRAME_LSB = (1U << 7),

    SPI_FRAME_MSB = 0,

} spi_cfg_flag;

void spi_master_enable(spi_dev *dev,
                       spi_baud_rate baud,
                       spi_mode mode,
                       uint32 flags);

void spi_slave_enable(spi_dev *dev,
                      spi_mode mode,
                      uint32 flags);

uint32 spi_tx(spi_dev *dev, const void *buf, uint32 len);





extern void spi_foreach(void (*fn)(spi_dev*));

void spi_peripheral_enable(spi_dev *dev);
void spi_peripheral_disable(spi_dev *dev);

void spi_tx_dma_enable(spi_dev *dev);
void spi_tx_dma_disable(spi_dev *dev);

void spi_rx_dma_enable(spi_dev *dev);
void spi_rx_dma_disable(spi_dev *dev);






static inline uint8 spi_is_enabled(spi_dev *dev) {
    return dev->regs->CR1 & 6;
}




static inline void spi_peripheral_disable_all(void) {
    spi_foreach(spi_peripheral_disable);
}


typedef enum spi_interrupt {
    SPI_TXE_INTERRUPT = (1U << 7),
    SPI_RXNE_INTERRUPT = (1U << 6),
    SPI_ERR_INTERRUPT = (1U << 5)




} spi_interrupt;





#define SPI_INTERRUPTS_ALL (SPI_TXE_INTERRUPT | SPI_RXNE_INTERRUPT | SPI_ERR_INTERRUPT)
# 368 "./libmaple/include/libmaple/spi.h"
static inline void spi_irq_enable(spi_dev *dev, uint32 interrupt_flags) {
    dev->regs->CR2 |= interrupt_flags;
    nvic_irq_enable(dev->irq_num);
}







static inline void spi_irq_disable(spi_dev *dev, uint32 interrupt_flags) {
    dev->regs->CR2 &= ~interrupt_flags;
}
# 390 "./libmaple/include/libmaple/spi.h"
static inline spi_cfg_flag spi_dff(spi_dev *dev) {
    return ((dev->regs->CR1 & (1U << 11)) == (0x0 << 11) ?
            SPI_DFF_8_BIT :
            SPI_DFF_16_BIT);
}







static inline uint8 spi_is_rx_nonempty(spi_dev *dev) {
    return dev->regs->SR & (1U << 0);
}
# 417 "./libmaple/include/libmaple/spi.h"
static inline uint16 spi_rx_reg(spi_dev *dev) {
    return (uint16)dev->regs->DR;
}







static inline uint8 spi_is_tx_empty(spi_dev *dev) {
    return dev->regs->SR & (1U << 1);
}
# 448 "./libmaple/include/libmaple/spi.h"
static inline void spi_tx_reg(spi_dev *dev, uint16 val) {
    dev->regs->DR = val;
}







static inline uint8 spi_is_busy(spi_dev *dev) {
    return dev->regs->SR & (1U << 7);
}

static inline uint32 spi_tx_inline(spi_dev *dev, const void *buf, uint32 len) {
    uint32 txed = 0;
    uint8 byte_frame = spi_dff(dev) == SPI_DFF_8_BIT;
    while (spi_is_tx_empty(dev) && (txed < len)) {
        if (byte_frame) {
            dev->regs->DR = ((const uint8*)buf)[txed++];
        } else {
            dev->regs->DR = ((const uint16*)buf)[txed++];
        }
    }
    return txed;
}







}
# 38 "./wirish/include/wirish/HardwareSPI.h" 2




#define _WIRISH_HARDWARESPI_H_ 




typedef enum SPIFrequency {
    SPI_18MHZ = 0,
    SPI_9MHZ = 1,
    SPI_4_5MHZ = 2,
    SPI_2_25MHZ = 3,
    SPI_1_125MHZ = 4,
    SPI_562_500KHZ = 5,
    SPI_281_250KHZ = 6,
    SPI_140_625KHZ = 7,
} SPIFrequency;

#define MAX_SPI_FREQS 8







class HardwareSPI {
public:



    HardwareSPI(uint32 spiPortNumber);
# 87 "./wirish/include/wirish/HardwareSPI.h"
    void begin(SPIFrequency frequency, uint32 bitOrder, uint32 mode);




    void begin(void);
# 102 "./wirish/include/wirish/HardwareSPI.h"
    void beginSlave(uint32 bitOrder, uint32 mode);




    void beginSlave(void);




    void end(void);

    void wait();
# 126 "./wirish/include/wirish/HardwareSPI.h"
    uint8 read(void);
# 135 "./wirish/include/wirish/HardwareSPI.h"
    void read(uint8 *buffer, uint32 length);





    void write(uint8 data);






    void write(const uint8 *buffer, uint32 length);
# 158 "./wirish/include/wirish/HardwareSPI.h"
    uint8 transfer(uint8 data);
# 167 "./wirish/include/wirish/HardwareSPI.h"
    uint8 misoPin(void);




    uint8 mosiPin(void);




    uint8 sckPin(void);




    uint8 nssPin(void);







    spi_dev* c_dev(void) { return this->spi_d; }
# 201 "./wirish/include/wirish/HardwareSPI.h"
    uint8 send(uint8 data);
# 213 "./wirish/include/wirish/HardwareSPI.h"
    uint8 send(uint8 *data, uint32 length);
# 222 "./wirish/include/wirish/HardwareSPI.h"
    uint8 recv(void);
private:
    spi_dev *spi_d;
};
# 49 "./wirish/include/wirish/wirish.h" 2

# 1 "./wirish/include/wirish/HardwareSerial.h" 1
# 34 "./wirish/include/wirish/HardwareSerial.h"
#define _WIRISH_HARDWARESERIAL_H_ 
# 53 "./wirish/include/wirish/HardwareSerial.h"
struct usart_dev;

class HardwareSerial : public Serial {
public:
    HardwareSerial(struct usart_dev *usart_device,
                   uint8 tx_pin,
                   uint8 rx_pin);


    void begin(uint32 baud);
    void end(void);


    uint32 available(void);
    uint8 read(void);
    void flush(void);
    virtual void write(unsigned char);
    using Print::write;


    int txPin(void) { return this->tx_pin; }
    int rxPin(void) { return this->rx_pin; }

    void enableTransmitter(bool enable = true);
    void enableReceiver(bool enable = true);
    void waitDataToBeSent();



    struct usart_dev* c_dev(void) { return this->usart_device; }
private:
    struct usart_dev *usart_device;
    uint8 tx_pin;
    uint8 rx_pin;
};


extern HardwareSerial Serial1;


extern HardwareSerial Serial2;


extern HardwareSerial Serial3;
# 51 "./wirish/include/wirish/wirish.h" 2
# 1 "./wirish/include/wirish/HardwareTimer.h" 1
# 32 "./wirish/include/wirish/HardwareTimer.h"
#define _WIRISH_HARDWARETIMER_H_ 






typedef timer_mode TimerMode;




class HardwareTimer {
private:
    timer_dev *dev;

public:




    HardwareTimer(uint8 timerNum);






    void pause(void);
# 75 "./wirish/include/wirish/HardwareTimer.h"
    void resume(void);






    uint32 getPrescaleFactor();
# 94 "./wirish/include/wirish/HardwareTimer.h"
    void setPrescaleFactor(uint32 factor);





    uint16 getOverflow();
# 112 "./wirish/include/wirish/HardwareTimer.h"
    void setOverflow(uint16 val);






    uint16 getCount(void);
# 128 "./wirish/include/wirish/HardwareTimer.h"
    void setCount(uint16 val);
# 141 "./wirish/include/wirish/HardwareTimer.h"
    uint16 setPeriod(uint32 microseconds);






    void setMode(int channel, timer_mode mode);





    uint16 getCompare(int channel);
# 168 "./wirish/include/wirish/HardwareTimer.h"
    void setCompare(int channel, uint16 compare);
# 180 "./wirish/include/wirish/HardwareTimer.h"
    void attachInterrupt(int channel, voidFuncPtr handler);
# 191 "./wirish/include/wirish/HardwareTimer.h"
    void detachInterrupt(int channel);
# 206 "./wirish/include/wirish/HardwareTimer.h"
    void refresh(void);







    timer_dev* c_dev(void) { return this->dev; }




    void setChannelMode(int channel, timer_mode mode) {
        setMode(channel, mode);
    }


    void setChannel1Mode(timer_mode mode) { setMode(TIMER_CH1, mode); }


    void setChannel2Mode(timer_mode mode) { setMode(TIMER_CH2, mode); }


    void setChannel3Mode(timer_mode mode) { setMode(TIMER_CH3, mode); }


    void setChannel4Mode(timer_mode mode) { setMode(TIMER_CH4, mode); }


    uint16 getCompare1() { return getCompare(TIMER_CH1); }


    uint16 getCompare2() { return getCompare(TIMER_CH2); }


    uint16 getCompare3() { return getCompare(TIMER_CH3); }


    uint16 getCompare4() { return getCompare(TIMER_CH4); }


    void setCompare1(uint16 compare) { setCompare(TIMER_CH1, compare); }


    void setCompare2(uint16 compare) { setCompare(TIMER_CH2, compare); }


    void setCompare3(uint16 compare) { setCompare(TIMER_CH3, compare); }


    void setCompare4(uint16 compare) { setCompare(TIMER_CH4, compare); }


    void attachCompare1Interrupt(voidFuncPtr handler) {
        attachInterrupt(TIMER_CH1, handler);
    }


    void attachCompare2Interrupt(voidFuncPtr handler) {
        attachInterrupt(TIMER_CH2, handler);
    }


    void attachCompare3Interrupt(voidFuncPtr handler) {
        attachInterrupt(TIMER_CH3, handler);
    }


    void attachCompare4Interrupt(voidFuncPtr handler) {
        attachInterrupt(TIMER_CH4, handler);
    }


    void detachCompare1Interrupt(void) { detachInterrupt(TIMER_CH1); }


    void detachCompare2Interrupt(void) { detachInterrupt(TIMER_CH2); }


    void detachCompare3Interrupt(void) { detachInterrupt(TIMER_CH3); }


    void detachCompare4Interrupt(void) { detachInterrupt(TIMER_CH4); }


    void generateUpdate(void) { refresh(); }
};


#define TIMER_OUTPUTCOMPARE TIMER_OUTPUT_COMPARE






extern HardwareTimer Timer1;





extern HardwareTimer Timer2;





extern HardwareTimer Timer3;





extern HardwareTimer Timer4;
# 52 "./wirish/include/wirish/wirish.h" 2
# 61 "./wirish/include/wirish/wirish.h"
#define true 0x1
#define false 0x0

#define LSBFIRST 0
#define MSBFIRST 1

#define lowByte(w) ((w) & 0xFF)
#define highByte(w) (((w) >> 8) & 0xFF)
#define bitRead(value,bit) (((value) >> (bit)) & 0x01)
#define bitSet(value,bit) ((value) |= (1UL << (bit)))
#define bitClear(value,bit) ((value) &= ~(1UL << (bit)))
#define bitWrite(value,bit,bitvalue) (bitvalue ? bitSet(value, bit) : bitClear(value, bit))

#define bit(b) (1UL << (b))
# 42 "wirish/usb_serial.cpp" 2






static void rxHook(unsigned, void*);
static void ifaceSetupHook(unsigned, void*);






#define USB_TIMEOUT 50

USBSerial::USBSerial(void) {



}

void USBSerial::begin(void) {

    usb_cdcacm_enable(GPIOC, 12);
    usb_cdcacm_set_hooks(0x1, rxHook);
    usb_cdcacm_set_hooks(0x2, ifaceSetupHook);

}

void USBSerial::end(void) {

    usb_cdcacm_disable(GPIOC, 12);
    usb_cdcacm_remove_hooks(0x1 | 0x2);

}

void USBSerial::write(uint8 ch) {
    this->write(&ch, 1);
}

void USBSerial::write(const char *str) {
    this->write(str, strlen(str));
}

void USBSerial::write(const void *buf, uint32 len) {
    if (!this->isConnected() || !buf) {
        return;
    }

    uint32 txed = 0;
    uint32 old_txed = 0;
    uint32 start = millis();

    uint32 sent = 0;

    while (txed < len && (millis() - start < 50)) {
        sent = usb_cdcacm_tx((const uint8*)buf + txed, len - txed);
        txed += sent;
        if (old_txed != txed) {
            start = millis();
        }
        old_txed = txed;
    }


    if (sent == 0x40) {
        while (usb_cdcacm_is_transmitting() != 0) {
        }

        usb_cdcacm_tx(
# 112 "wirish/usb_serial.cpp" 3 4
                     __null
# 112 "wirish/usb_serial.cpp"
                         , 0);
    }
}

uint32 USBSerial::available(void) {
    return usb_cdcacm_data_available();
}

uint32 USBSerial::read(void *buf, uint32 len) {
    if (!buf) {
        return 0;
    }

    uint32 rxed = 0;
    while (rxed < len) {
        rxed += usb_cdcacm_rx((uint8*)buf + rxed, len - rxed);
    }

    return rxed;
}


uint8 USBSerial::read(void) {
    uint8 b;
    this->read(&b, 1);
    return b;
}

uint8 USBSerial::pending(void) {
    return usb_cdcacm_get_pending();
}

uint8 USBSerial::isConnected(void) {
    return usb_is_connected(USBLIB) && usb_is_configured(USBLIB);
}

uint8 USBSerial::getDTR(void) {
    return usb_cdcacm_get_dtr();
}

uint8 USBSerial::getRTS(void) {
    return usb_cdcacm_get_rts();
}


USBSerial SerialUSB;
# 166 "wirish/usb_serial.cpp"
enum reset_state_t {
    DTR_UNSET,
    DTR_HIGH,
    DTR_NEGEDGE,
    DTR_LOW
};

static reset_state_t reset_state = DTR_UNSET;

static void ifaceSetupHook(unsigned hook, void *requestvp) {
    uint8 request = *(uint8*)requestvp;


    if (request != 0x22) {
        return;
    }




    uint8 dtr = usb_cdcacm_get_dtr();
    switch (reset_state) {
    case DTR_UNSET:
        reset_state = dtr ? DTR_HIGH : DTR_LOW;
        break;
    case DTR_HIGH:
        reset_state = dtr ? DTR_HIGH : DTR_NEGEDGE;
        break;
    case DTR_NEGEDGE:
        reset_state = dtr ? DTR_HIGH : DTR_LOW;
        break;
    case DTR_LOW:
        reset_state = dtr ? DTR_HIGH : DTR_LOW;
        break;
    }
# 211 "wirish/usb_serial.cpp"
}

#define RESET_DELAY 100000

static void wait_reset(void) {
  delay_us(100000);
  nvic_sys_reset();
}


#define STACK_TOP 0x20000800
#define EXC_RETURN 0xFFFFFFF9
#define DEFAULT_CPSR 0x61000000
static void rxHook(unsigned hook, void *ignored) {


    if (reset_state == DTR_NEGEDGE) {
        reset_state = DTR_LOW;

        if (usb_cdcacm_data_available() >= 4) {


            static const uint8 magic[4] = {'1', 'E', 'A', 'F'};




            uint8 chkBuf[4];



            usb_cdcacm_peek(chkBuf, 4);
            for (unsigned i = 0; i < sizeof(magic); i++) {
                if (chkBuf[i] != magic[i]) {
                    return;
                }
            }




            uintptr_t target = (uintptr_t)wait_reset | 0x1;
            asm volatile("mov r0, %[stack_top]      \n\t"
                         "mov sp, r0                \n\t"
                         "mov r0, #1                \n\t"
                         "mov r1, %[target_addr]    \n\t"
                         "mov r2, %[cpsr]           \n\t"
                         "push {r2}                 \n\t"
                         "push {r1}                 \n\t"
                         "push {r0}                 \n\t"
                         "push {r0}                 \n\t"
                         "push {r0}                 \n\t"
                         "push {r0}                 \n\t"
                         "push {r0}                 \n\t"
                         "push {r0}                 \n\t"
                         "mov lr, %[exc_return]     \n\t"
                         "bx lr"
                         :
                         : [stack_top] "r" (0x20000800),
                           [target_addr] "r" (target),
                           [exc_return] "r" (0xFFFFFFF9),
                           [cpsr] "r" (0x61000000)
                         : "r0", "r1", "r2");







            if (0) { } else { _fail("wirish/usb_serial.cpp", 281, "0"); };
        }
    }
}
